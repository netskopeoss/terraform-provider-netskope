// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"npa-publisher/internal/sdk/pkg/utils"
)

type PublisherAssessment2 struct {
}

type PublisherAssessmentType string

const (
	PublisherAssessmentTypeAssessment           PublisherAssessmentType = "Assessment"
	PublisherAssessmentTypePublisherAssessment2 PublisherAssessmentType = "Publisher_assessment_2"
)

type PublisherAssessment struct {
	Assessment           *Assessment
	PublisherAssessment2 *PublisherAssessment2

	Type PublisherAssessmentType
}

func CreatePublisherAssessmentAssessment(assessment Assessment) PublisherAssessment {
	typ := PublisherAssessmentTypeAssessment

	return PublisherAssessment{
		Assessment: &assessment,
		Type:       typ,
	}
}

func CreatePublisherAssessmentPublisherAssessment2(publisherAssessment2 PublisherAssessment2) PublisherAssessment {
	typ := PublisherAssessmentTypePublisherAssessment2

	return PublisherAssessment{
		PublisherAssessment2: &publisherAssessment2,
		Type:                 typ,
	}
}

func (u *PublisherAssessment) UnmarshalJSON(data []byte) error {

	publisherAssessment2 := new(PublisherAssessment2)
	if err := utils.UnmarshalJSON(data, &publisherAssessment2, "", true, true); err == nil {
		u.PublisherAssessment2 = publisherAssessment2
		u.Type = PublisherAssessmentTypePublisherAssessment2
		return nil
	}

	assessment := new(Assessment)
	if err := utils.UnmarshalJSON(data, &assessment, "", true, true); err == nil {
		u.Assessment = assessment
		u.Type = PublisherAssessmentTypeAssessment
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PublisherAssessment) MarshalJSON() ([]byte, error) {
	if u.Assessment != nil {
		return utils.MarshalJSON(u.Assessment, "", true)
	}

	if u.PublisherAssessment2 != nil {
		return utils.MarshalJSON(u.PublisherAssessment2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type PublisherStitcherID2 struct {
}

type PublisherStitcherIDType string

const (
	PublisherStitcherIDTypeInteger              PublisherStitcherIDType = "integer"
	PublisherStitcherIDTypePublisherStitcherID2 PublisherStitcherIDType = "Publisher_stitcher_id_2"
)

type PublisherStitcherID struct {
	Integer              *int64
	PublisherStitcherID2 *PublisherStitcherID2

	Type PublisherStitcherIDType
}

func CreatePublisherStitcherIDInteger(integer int64) PublisherStitcherID {
	typ := PublisherStitcherIDTypeInteger

	return PublisherStitcherID{
		Integer: &integer,
		Type:    typ,
	}
}

func CreatePublisherStitcherIDPublisherStitcherID2(publisherStitcherID2 PublisherStitcherID2) PublisherStitcherID {
	typ := PublisherStitcherIDTypePublisherStitcherID2

	return PublisherStitcherID{
		PublisherStitcherID2: &publisherStitcherID2,
		Type:                 typ,
	}
}

func (u *PublisherStitcherID) UnmarshalJSON(data []byte) error {

	publisherStitcherID2 := new(PublisherStitcherID2)
	if err := utils.UnmarshalJSON(data, &publisherStitcherID2, "", true, true); err == nil {
		u.PublisherStitcherID2 = publisherStitcherID2
		u.Type = PublisherStitcherIDTypePublisherStitcherID2
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = PublisherStitcherIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PublisherStitcherID) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.PublisherStitcherID2 != nil {
		return utils.MarshalJSON(u.PublisherStitcherID2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type PublisherUpgradeFailedReason2 struct {
}

type PublisherUpgradeFailedReasonType string

const (
	PublisherUpgradeFailedReasonTypeUpgradeFailedReason           PublisherUpgradeFailedReasonType = "UpgradeFailedReason"
	PublisherUpgradeFailedReasonTypePublisherUpgradeFailedReason2 PublisherUpgradeFailedReasonType = "Publisher_upgrade_failed_reason_2"
)

type PublisherUpgradeFailedReason struct {
	UpgradeFailedReason           *UpgradeFailedReason
	PublisherUpgradeFailedReason2 *PublisherUpgradeFailedReason2

	Type PublisherUpgradeFailedReasonType
}

func CreatePublisherUpgradeFailedReasonUpgradeFailedReason(upgradeFailedReason UpgradeFailedReason) PublisherUpgradeFailedReason {
	typ := PublisherUpgradeFailedReasonTypeUpgradeFailedReason

	return PublisherUpgradeFailedReason{
		UpgradeFailedReason: &upgradeFailedReason,
		Type:                typ,
	}
}

func CreatePublisherUpgradeFailedReasonPublisherUpgradeFailedReason2(publisherUpgradeFailedReason2 PublisherUpgradeFailedReason2) PublisherUpgradeFailedReason {
	typ := PublisherUpgradeFailedReasonTypePublisherUpgradeFailedReason2

	return PublisherUpgradeFailedReason{
		PublisherUpgradeFailedReason2: &publisherUpgradeFailedReason2,
		Type:                          typ,
	}
}

func (u *PublisherUpgradeFailedReason) UnmarshalJSON(data []byte) error {

	publisherUpgradeFailedReason2 := new(PublisherUpgradeFailedReason2)
	if err := utils.UnmarshalJSON(data, &publisherUpgradeFailedReason2, "", true, true); err == nil {
		u.PublisherUpgradeFailedReason2 = publisherUpgradeFailedReason2
		u.Type = PublisherUpgradeFailedReasonTypePublisherUpgradeFailedReason2
		return nil
	}

	upgradeFailedReason := new(UpgradeFailedReason)
	if err := utils.UnmarshalJSON(data, &upgradeFailedReason, "", true, true); err == nil {
		u.UpgradeFailedReason = upgradeFailedReason
		u.Type = PublisherUpgradeFailedReasonTypeUpgradeFailedReason
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PublisherUpgradeFailedReason) MarshalJSON() ([]byte, error) {
	if u.UpgradeFailedReason != nil {
		return utils.MarshalJSON(u.UpgradeFailedReason, "", true)
	}

	if u.PublisherUpgradeFailedReason2 != nil {
		return utils.MarshalJSON(u.PublisherUpgradeFailedReason2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Publisher struct {
	AppsCount                          int64                        `json:"apps_count"`
	Assessment                         PublisherAssessment          `json:"assessment"`
	CommonName                         string                       `json:"common_name"`
	ConnectedApps                      []string                     `json:"connected_apps"`
	Lbrokerconnect                     bool                         `json:"lbrokerconnect"`
	PublisherID                        int64                        `json:"publisher_id"`
	PublisherName                      string                       `json:"publisher_name"`
	PublisherUpgradeProfilesExternalID int64                        `json:"publisher_upgrade_profiles_external_id"`
	Registered                         bool                         `json:"registered"`
	Status                             string                       `json:"status"`
	StitcherID                         PublisherStitcherID          `json:"stitcher_id"`
	Tags                               []interface{}                `json:"tags"`
	UpgradeFailedReason                PublisherUpgradeFailedReason `json:"upgrade_failed_reason"`
	UpgradeRequest                     bool                         `json:"upgrade_request"`
	UpgradeStatus                      UpgradeStatus                `json:"upgrade_status"`
}

func (o *Publisher) GetAppsCount() int64 {
	if o == nil {
		return 0
	}
	return o.AppsCount
}

func (o *Publisher) GetAssessment() PublisherAssessment {
	if o == nil {
		return PublisherAssessment{}
	}
	return o.Assessment
}

func (o *Publisher) GetCommonName() string {
	if o == nil {
		return ""
	}
	return o.CommonName
}

func (o *Publisher) GetConnectedApps() []string {
	if o == nil {
		return []string{}
	}
	return o.ConnectedApps
}

func (o *Publisher) GetLbrokerconnect() bool {
	if o == nil {
		return false
	}
	return o.Lbrokerconnect
}

func (o *Publisher) GetPublisherID() int64 {
	if o == nil {
		return 0
	}
	return o.PublisherID
}

func (o *Publisher) GetPublisherName() string {
	if o == nil {
		return ""
	}
	return o.PublisherName
}

func (o *Publisher) GetPublisherUpgradeProfilesExternalID() int64 {
	if o == nil {
		return 0
	}
	return o.PublisherUpgradeProfilesExternalID
}

func (o *Publisher) GetRegistered() bool {
	if o == nil {
		return false
	}
	return o.Registered
}

func (o *Publisher) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *Publisher) GetStitcherID() PublisherStitcherID {
	if o == nil {
		return PublisherStitcherID{}
	}
	return o.StitcherID
}

func (o *Publisher) GetTags() []interface{} {
	if o == nil {
		return []interface{}{}
	}
	return o.Tags
}

func (o *Publisher) GetUpgradeFailedReason() PublisherUpgradeFailedReason {
	if o == nil {
		return PublisherUpgradeFailedReason{}
	}
	return o.UpgradeFailedReason
}

func (o *Publisher) GetUpgradeRequest() bool {
	if o == nil {
		return false
	}
	return o.UpgradeRequest
}

func (o *Publisher) GetUpgradeStatus() UpgradeStatus {
	if o == nil {
		return UpgradeStatus{}
	}
	return o.UpgradeStatus
}
