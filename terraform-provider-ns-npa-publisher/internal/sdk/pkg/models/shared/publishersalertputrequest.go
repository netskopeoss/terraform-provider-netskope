// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PublishersAlertPutRequestEventTypes string

const (
	PublishersAlertPutRequestEventTypesUpgradeWillStart PublishersAlertPutRequestEventTypes = "UPGRADE_WILL_START"
	PublishersAlertPutRequestEventTypesUpgradeStarted   PublishersAlertPutRequestEventTypes = "UPGRADE_STARTED"
	PublishersAlertPutRequestEventTypesUpgradeSucceeded PublishersAlertPutRequestEventTypes = "UPGRADE_SUCCEEDED"
	PublishersAlertPutRequestEventTypesUpgradeFailed    PublishersAlertPutRequestEventTypes = "UPGRADE_FAILED"
	PublishersAlertPutRequestEventTypesConnectionFailed PublishersAlertPutRequestEventTypes = "CONNECTION_FAILED"
)

func (e PublishersAlertPutRequestEventTypes) ToPointer() *PublishersAlertPutRequestEventTypes {
	return &e
}

func (e *PublishersAlertPutRequestEventTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UPGRADE_WILL_START":
		fallthrough
	case "UPGRADE_STARTED":
		fallthrough
	case "UPGRADE_SUCCEEDED":
		fallthrough
	case "UPGRADE_FAILED":
		fallthrough
	case "CONNECTION_FAILED":
		*e = PublishersAlertPutRequestEventTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublishersAlertPutRequestEventTypes: %v", v)
	}
}

type PublishersAlertPutRequest struct {
	AdminUsers    []string                              `json:"adminUsers,omitempty"`
	EventTypes    []PublishersAlertPutRequestEventTypes `json:"eventTypes,omitempty"`
	SelectedUsers *string                               `json:"selectedUsers,omitempty"`
}

func (o *PublishersAlertPutRequest) GetAdminUsers() []string {
	if o == nil {
		return nil
	}
	return o.AdminUsers
}

func (o *PublishersAlertPutRequest) GetEventTypes() []PublishersAlertPutRequestEventTypes {
	if o == nil {
		return nil
	}
	return o.EventTypes
}

func (o *PublishersAlertPutRequest) GetSelectedUsers() *string {
	if o == nil {
		return nil
	}
	return o.SelectedUsers
}
