// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PublishersAlertPutResponseStatus string

const (
	PublishersAlertPutResponseStatusSuccess  PublishersAlertPutResponseStatus = "success"
	PublishersAlertPutResponseStatusNotFound PublishersAlertPutResponseStatus = "not found"
	PublishersAlertPutResponseStatusFailure  PublishersAlertPutResponseStatus = "failure"
)

func (e PublishersAlertPutResponseStatus) ToPointer() *PublishersAlertPutResponseStatus {
	return &e
}

func (e *PublishersAlertPutResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "not found":
		fallthrough
	case "failure":
		*e = PublishersAlertPutResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublishersAlertPutResponseStatus: %v", v)
	}
}

type PublishersAlertPutResponse struct {
	Status *PublishersAlertPutResponseStatus `json:"status,omitempty"`
}

func (o *PublishersAlertPutResponse) GetStatus() *PublishersAlertPutResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
