// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"npa-publisher/internal/sdk"
	"npa-publisher/internal/sdk/pkg/models/operations"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"npa-publisher/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &NPAPublisherDataSource{}
var _ datasource.DataSourceWithConfigure = &NPAPublisherDataSource{}

func NewNPAPublisherDataSource() datasource.DataSource {
	return &NPAPublisherDataSource{}
}

// NPAPublisherDataSource is the data source implementation.
type NPAPublisherDataSource struct {
	client *sdk.SDK
}

// NPAPublisherDataSourceModel describes the data model.
type NPAPublisherDataSourceModel struct {
	Assessment                types.String `tfsdk:"assessment"`
	CommonName                types.String `tfsdk:"common_name"`
	ID                        types.Int64  `tfsdk:"id"`
	Lbrokerconnect            types.Bool   `tfsdk:"lbrokerconnect"`
	Name                      types.String `tfsdk:"name"`
	PublisherUpgradeProfileID types.Int64  `tfsdk:"publisher_upgrade_profile_id"`
	Registered                types.Bool   `tfsdk:"registered"`
	Status                    types.String `tfsdk:"status"`
	StitcherID                types.Int64  `tfsdk:"stitcher_id"`
	Tags                      []TagItem    `tfsdk:"tags"`
}

// Metadata returns the data source type name.
func (r *NPAPublisherDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_publisher"
}

// Schema defines the schema for the data source.
func (r *NPAPublisherDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "NPAPublisher DataSource",

		Attributes: map[string]schema.Attribute{
			"assessment": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
				Description: `Parsed as JSON.`,
			},
			"common_name": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.Int64Attribute{
				Optional:    true,
				Description: `publisher id`,
			},
			"lbrokerconnect": schema.BoolAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"publisher_upgrade_profile_id": schema.Int64Attribute{
				Computed: true,
			},
			"registered": schema.BoolAttribute{
				Computed: true,
			},
			"status": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"connected",
						"not registered",
					),
				},
				Description: `must be one of ["connected", "not registered"]`,
			},
			"stitcher_id": schema.Int64Attribute{
				Computed: true,
			},
			"tags": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"tag_id": schema.Int64Attribute{
							Computed: true,
						},
						"tag_name": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
		},
	}
}

func (r *NPAPublisherDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPAPublisherDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *NPAPublisherDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	publisherID := int(data.ID.ValueInt64())
	request := operations.GetInfrastructurePublishersPublisherIDRequest{
		PublisherID: publisherID,
	}
	res, err := r.client.NPAPublishers.Read(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.PublisherResponse == nil || res.PublisherResponse.Data == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.PublisherResponse.Data)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
