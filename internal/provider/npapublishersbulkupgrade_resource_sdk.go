// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk/pkg/models/operations"
)

func (r *NPAPublishersBulkUpgradeResourceModel) ToCreateSDKType() *operations.PutInfrastructurePublishersBulkRequestBody {
	var publishers *operations.PutInfrastructurePublishersBulkPublishers
	if r.Publishers != nil {
		var apply *operations.Apply
		if r.Publishers.Apply != nil {
			upgradeRequest := new(bool)
			if !r.Publishers.Apply.UpgradeRequest.IsUnknown() && !r.Publishers.Apply.UpgradeRequest.IsNull() {
				*upgradeRequest = r.Publishers.Apply.UpgradeRequest.ValueBool()
			} else {
				upgradeRequest = nil
			}
			apply = &operations.Apply{
				UpgradeRequest: upgradeRequest,
			}
		}
		var id []string = nil
		for _, idItem := range r.Publishers.ID {
			id = append(id, idItem.ValueString())
		}
		publishers = &operations.PutInfrastructurePublishersBulkPublishers{
			Apply: apply,
			ID:    id,
		}
	}
	out := operations.PutInfrastructurePublishersBulkRequestBody{
		Publishers: publishers,
	}
	return &out
}

func (r *NPAPublishersBulkUpgradeResourceModel) RefreshFromCreateResponse(resp *operations.PutInfrastructurePublishersBulkResponseBody) {
	if len(r.Data) > len(resp.Data) {
		r.Data = r.Data[:len(resp.Data)]
	}
	for dataCount, dataItem := range resp.Data {
		var data1 PutInfrastructurePublishersBulkData
		if dataItem.Assessment == nil {
			data1.Assessment = nil
		} else {
			data1.Assessment = &Assessment{}
		}
		if dataItem.CommonName != nil {
			data1.CommonName = types.StringValue(*dataItem.CommonName)
		} else {
			data1.CommonName = types.StringNull()
		}
		if dataItem.ID != nil {
			data1.ID = types.Int64Value(int64(*dataItem.ID))
		} else {
			data1.ID = types.Int64Null()
		}
		if dataItem.Lbrokerconnect != nil {
			data1.Lbrokerconnect = types.BoolValue(*dataItem.Lbrokerconnect)
		} else {
			data1.Lbrokerconnect = types.BoolNull()
		}
		if dataItem.Name != nil {
			data1.Name = types.StringValue(*dataItem.Name)
		} else {
			data1.Name = types.StringNull()
		}
		if dataItem.PublisherUpgradeProfileID != nil {
			data1.PublisherUpgradeProfileID = types.Int64Value(int64(*dataItem.PublisherUpgradeProfileID))
		} else {
			data1.PublisherUpgradeProfileID = types.Int64Null()
		}
		if dataItem.Registered != nil {
			data1.Registered = types.BoolValue(*dataItem.Registered)
		} else {
			data1.Registered = types.BoolNull()
		}
		if dataItem.Status != nil {
			data1.Status = types.StringValue(string(*dataItem.Status))
		} else {
			data1.Status = types.StringNull()
		}
		if dataItem.StitcherID != nil {
			data1.StitcherID = types.Int64Value(int64(*dataItem.StitcherID))
		} else {
			data1.StitcherID = types.Int64Null()
		}
		if len(data1.Tags) > len(dataItem.Tags) {
			data1.Tags = data1.Tags[:len(dataItem.Tags)]
		}
		for tagsCount, tagsItem := range dataItem.Tags {
			var tags1 PostInfrastructurePublishersTags
			if tagsItem.TagID != nil {
				tags1.TagID = types.Int64Value(int64(*tagsItem.TagID))
			} else {
				tags1.TagID = types.Int64Null()
			}
			if tagsItem.TagName != nil {
				tags1.TagName = types.StringValue(*tagsItem.TagName)
			} else {
				tags1.TagName = types.StringNull()
			}
			if tagsCount+1 > len(data1.Tags) {
				data1.Tags = append(data1.Tags, tags1)
			} else {
				data1.Tags[tagsCount].TagID = tags1.TagID
				data1.Tags[tagsCount].TagName = tags1.TagName
			}
		}
		if dataItem.UpgradeFailedReason == nil {
			data1.UpgradeFailedReason = nil
		} else {
			data1.UpgradeFailedReason = &Assessment{}
		}
		if dataItem.UpgradeRequest != nil {
			data1.UpgradeRequest = types.BoolValue(*dataItem.UpgradeRequest)
		} else {
			data1.UpgradeRequest = types.BoolNull()
		}
		if dataItem.UpgradeStatus == nil {
			data1.UpgradeStatus = nil
		} else {
			data1.UpgradeStatus = &Assessment{}
		}
		if dataCount+1 > len(r.Data) {
			r.Data = append(r.Data, data1)
		} else {
			r.Data[dataCount].Assessment = data1.Assessment
			r.Data[dataCount].CommonName = data1.CommonName
			r.Data[dataCount].ID = data1.ID
			r.Data[dataCount].Lbrokerconnect = data1.Lbrokerconnect
			r.Data[dataCount].Name = data1.Name
			r.Data[dataCount].PublisherUpgradeProfileID = data1.PublisherUpgradeProfileID
			r.Data[dataCount].Registered = data1.Registered
			r.Data[dataCount].Status = data1.Status
			r.Data[dataCount].StitcherID = data1.StitcherID
			r.Data[dataCount].Tags = data1.Tags
			r.Data[dataCount].UpgradeFailedReason = data1.UpgradeFailedReason
			r.Data[dataCount].UpgradeRequest = data1.UpgradeRequest
			r.Data[dataCount].UpgradeStatus = data1.UpgradeStatus
		}
	}
	if resp.Status != nil {
		r.Status = types.StringValue(string(*resp.Status))
	} else {
		r.Status = types.StringNull()
	}
}
