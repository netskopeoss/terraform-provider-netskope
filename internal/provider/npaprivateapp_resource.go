// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_stringplanmodifier "github.com/netskope/terraform-provider-ns/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/operations"
	speakeasy_stringvalidators "github.com/netskope/terraform-provider-ns/internal/validators/stringvalidators"
	"strconv"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &NPAPrivateAppResource{}
var _ resource.ResourceWithImportState = &NPAPrivateAppResource{}

func NewNPAPrivateAppResource() resource.Resource {
	return &NPAPrivateAppResource{}
}

// NPAPrivateAppResource defines the resource implementation.
type NPAPrivateAppResource struct {
	client *sdk.TerraformProviderNs
}

// NPAPrivateAppResourceModel describes the resource data model.
type NPAPrivateAppResourceModel struct {
	AllowUnauthenticatedCors    types.Bool                               `tfsdk:"allow_unauthenticated_cors"`
	AppName                     types.String                             `tfsdk:"app_name"`
	AppOption                   *tfTypes.AppOption                       `tfsdk:"app_option"`
	ClientlessAccess            types.Bool                               `tfsdk:"clientless_access"`
	IsUserPortalApp             types.Bool                               `tfsdk:"is_user_portal_app"`
	ModifiedBy                  types.String                             `tfsdk:"modified_by"`
	ModifyTime                  types.String                             `tfsdk:"modify_time"`
	Name                        types.String                             `tfsdk:"name"`
	Policies                    []types.String                           `tfsdk:"policies"`
	PrivateAppHostname          types.String                             `tfsdk:"private_app_hostname"`
	PrivateAppID                types.Int64                              `tfsdk:"private_app_id"`
	PrivateAppName              types.String                             `tfsdk:"private_app_name"`
	PrivateAppProtocol          types.String                             `tfsdk:"private_app_protocol"`
	Protocols                   []tfTypes.Protocols                      `tfsdk:"protocols"`
	PublicHost                  types.String                             `tfsdk:"public_host"`
	Publishers                  []tfTypes.PublisherItem                  `tfsdk:"publishers"`
	Reachability                *tfTypes.PrivateAppsResponseReachability `tfsdk:"reachability"`
	RealHost                    types.String                             `tfsdk:"real_host"`
	ServicePublisherAssignments []tfTypes.ServicePublisherAssignmentItem `tfsdk:"service_publisher_assignments"`
	SteeringConfigs             []types.String                           `tfsdk:"steering_configs"`
	SupplementDNSForOsx         types.Bool                               `tfsdk:"supplement_dns_for_osx"`
	Tags                        []tfTypes.Tags                           `tfsdk:"tags"`
	TrustSelfSignedCerts        types.Bool                               `tfsdk:"trust_self_signed_certs"`
	UsePublisherDNS             types.Bool                               `tfsdk:"use_publisher_dns"`
}

func (r *NPAPrivateAppResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_private_app"
}

func (r *NPAPrivateAppResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "NPAPrivateApp Resource",
		Attributes: map[string]schema.Attribute{
			"allow_unauthenticated_cors": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"app_name": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
			},
			"app_option": schema.SingleNestedAttribute{
				Computed:   true,
				Optional:   true,
				Attributes: map[string]schema.Attribute{},
			},
			"clientless_access": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"is_user_portal_app": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"modified_by": schema.StringAttribute{
				Computed: true,
			},
			"modify_time": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"policies": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"private_app_hostname": schema.StringAttribute{
				Required: true,
			},
			"private_app_id": schema.Int64Attribute{
				Computed:    true,
				Description: `private apps id`,
			},
			"private_app_name": schema.StringAttribute{
				Computed: true,
			},
			"private_app_protocol": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `Requires replacement if changed. ; must be one of ["http", "https"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"http",
						"https",
					),
				},
			},
			"protocols": schema.ListNestedAttribute{
				Required: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.Int64Attribute{
							Computed: true,
						},
						"port": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"protocol": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"service_id": schema.Int64Attribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"public_host": schema.StringAttribute{
				Computed: true,
			},
			"publishers": schema.ListNestedAttribute{
				Required: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"publisher_id": schema.StringAttribute{
							Required: true,
						},
						"publisher_name": schema.StringAttribute{
							Required: true,
						},
					},
				},
			},
			"reachability": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"reachable": schema.BoolAttribute{
						Computed: true,
					},
				},
			},
			"real_host": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"service_publisher_assignments": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"primary": schema.BoolAttribute{
							Computed: true,
						},
						"private_app_id": schema.Int64Attribute{
							Computed: true,
						},
						"publisher_id": schema.Int64Attribute{
							Computed: true,
						},
						"publisher_name": schema.StringAttribute{
							Computed: true,
						},
						"reachability": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"error_code": schema.Int64Attribute{
									Computed: true,
								},
								"error_string": schema.StringAttribute{
									Computed: true,
								},
								"reachable": schema.BoolAttribute{
									Computed: true,
								},
							},
						},
					},
				},
			},
			"steering_configs": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"supplement_dns_for_osx": schema.BoolAttribute{
				Computed: true,
			},
			"tags": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"tag_id": schema.Int64Attribute{
							Computed: true,
						},
						"tag_name": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
					},
				},
			},
			"trust_self_signed_certs": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"use_publisher_dns": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
		},
	}
}

func (r *NPAPrivateAppResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderNs)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderNs, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPAPrivateAppResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *NPAPrivateAppResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToSharedPrivateAppsRequest()
	res, err := r.client.NPAPrivateApp.CreateNPAPrivateApps(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PrivateAppsResponse != nil && res.PrivateAppsResponse.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPrivateAppsResponseData(res.PrivateAppsResponse.Data)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var privateAppID int
	privateAppID = int(data.PrivateAppID.ValueInt64())

	request1 := operations.GetNPAPrivateAppRequest{
		PrivateAppID: privateAppID,
	}
	res1, err := r.client.GetNPAPrivateApp(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.PrivateAppsResponse != nil && res1.PrivateAppsResponse.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedPrivateAppsResponseData(res1.PrivateAppsResponse.Data)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPrivateAppResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *NPAPrivateAppResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var privateAppID int
	privateAppID = int(data.PrivateAppID.ValueInt64())

	request := operations.GetNPAPrivateAppRequest{
		PrivateAppID: privateAppID,
	}
	res, err := r.client.GetNPAPrivateApp(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PrivateAppsResponse != nil && res.PrivateAppsResponse.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPrivateAppsResponseData(res.PrivateAppsResponse.Data)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPrivateAppResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *NPAPrivateAppResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var privateAppID int
	privateAppID = int(data.PrivateAppID.ValueInt64())

	privateAppsPutRequest := *data.ToSharedPrivateAppsPutRequest()
	request := operations.UpdateNPAPrivateAppRequest{
		PrivateAppID:          privateAppID,
		PrivateAppsPutRequest: privateAppsPutRequest,
	}
	res, err := r.client.NPAPrivateApp.UpdateNPAPrivateApp(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PrivateAppsResponse != nil && res.PrivateAppsResponse.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPrivateAppsResponseData(res.PrivateAppsResponse.Data)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var privateAppId1 int
	privateAppId1 = int(data.PrivateAppID.ValueInt64())

	request1 := operations.GetNPAPrivateAppRequest{
		PrivateAppID: privateAppId1,
	}
	res1, err := r.client.GetNPAPrivateApp(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.PrivateAppsResponse != nil && res1.PrivateAppsResponse.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedPrivateAppsResponseData(res1.PrivateAppsResponse.Data)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPrivateAppResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *NPAPrivateAppResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var privateAppID int
	privateAppID = int(data.PrivateAppID.ValueInt64())

	request := operations.DeleteNPAPrivateAppRequest{
		PrivateAppID: privateAppID,
	}
	res, err := r.client.DeleteNPAPrivateApp(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *NPAPrivateAppResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	privateAppID, err := strconv.Atoi(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Invalid ID", fmt.Sprintf("ID must be an integer but was %s", req.ID))
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("private_app_id"), int64(privateAppID))...)
}
