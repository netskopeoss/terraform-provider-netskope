// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk/pkg/models/operations"
)

func (r *PrivateAppResourceModel) ToCreateSDKType() *operations.PostSteeringAppsPrivateRequestBody {
	appName := new(string)
	if !r.AppName.IsUnknown() && !r.AppName.IsNull() {
		*appName = r.AppName.ValueString()
	} else {
		appName = nil
	}
	clientlessAccess := new(bool)
	if !r.ClientlessAccess.IsUnknown() && !r.ClientlessAccess.IsNull() {
		*clientlessAccess = r.ClientlessAccess.ValueBool()
	} else {
		clientlessAccess = nil
	}
	host := new(string)
	if !r.Host.IsUnknown() && !r.Host.IsNull() {
		*host = r.Host.ValueString()
	} else {
		host = nil
	}
	var protocols []operations.PostSteeringAppsPrivateProtocols = nil
	for _, protocolsItem := range r.Protocols {
		port := new(string)
		if !protocolsItem.Port.IsUnknown() && !protocolsItem.Port.IsNull() {
			*port = protocolsItem.Port.ValueString()
		} else {
			port = nil
		}
		typeVar := new(string)
		if !protocolsItem.Type.IsUnknown() && !protocolsItem.Type.IsNull() {
			*typeVar = protocolsItem.Type.ValueString()
		} else {
			typeVar = nil
		}
		protocols = append(protocols, operations.PostSteeringAppsPrivateProtocols{
			Port: port,
			Type: typeVar,
		})
	}
	var publisherTags []operations.PostSteeringAppsPrivatePublisherTags = nil
	for _, publisherTagsItem := range r.PublisherTags {
		tagName := new(string)
		if !publisherTagsItem.TagName.IsUnknown() && !publisherTagsItem.TagName.IsNull() {
			*tagName = publisherTagsItem.TagName.ValueString()
		} else {
			tagName = nil
		}
		publisherTags = append(publisherTags, operations.PostSteeringAppsPrivatePublisherTags{
			TagName: tagName,
		})
	}
	var publishers []operations.PostSteeringAppsPrivatePublishers = nil
	for _, publishersItem := range r.Publishers {
		publisherID := new(string)
		if !publishersItem.PublisherID.IsUnknown() && !publishersItem.PublisherID.IsNull() {
			*publisherID = publishersItem.PublisherID.ValueString()
		} else {
			publisherID = nil
		}
		publisherName := new(string)
		if !publishersItem.PublisherName.IsUnknown() && !publishersItem.PublisherName.IsNull() {
			*publisherName = publishersItem.PublisherName.ValueString()
		} else {
			publisherName = nil
		}
		publishers = append(publishers, operations.PostSteeringAppsPrivatePublishers{
			PublisherID:   publisherID,
			PublisherName: publisherName,
		})
	}
	realHost := new(string)
	if !r.RealHost.IsUnknown() && !r.RealHost.IsNull() {
		*realHost = r.RealHost.ValueString()
	} else {
		realHost = nil
	}
	var tags []operations.PostSteeringAppsPrivateTags = nil
	for _, tagsItem := range r.Tags {
		tagName1 := new(string)
		if !tagsItem.TagName.IsUnknown() && !tagsItem.TagName.IsNull() {
			*tagName1 = tagsItem.TagName.ValueString()
		} else {
			tagName1 = nil
		}
		tags = append(tags, operations.PostSteeringAppsPrivateTags{
			TagName: tagName1,
		})
	}
	trustSelfSignedCerts := new(bool)
	if !r.TrustSelfSignedCerts.IsUnknown() && !r.TrustSelfSignedCerts.IsNull() {
		*trustSelfSignedCerts = r.TrustSelfSignedCerts.ValueBool()
	} else {
		trustSelfSignedCerts = nil
	}
	usePublisherDNS := new(bool)
	if !r.UsePublisherDNS.IsUnknown() && !r.UsePublisherDNS.IsNull() {
		*usePublisherDNS = r.UsePublisherDNS.ValueBool()
	} else {
		usePublisherDNS = nil
	}
	out := operations.PostSteeringAppsPrivateRequestBody{
		AppName:              appName,
		ClientlessAccess:     clientlessAccess,
		Host:                 host,
		Protocols:            protocols,
		PublisherTags:        publisherTags,
		Publishers:           publishers,
		RealHost:             realHost,
		Tags:                 tags,
		TrustSelfSignedCerts: trustSelfSignedCerts,
		UsePublisherDNS:      usePublisherDNS,
	}
	return &out
}

func (r *PrivateAppResourceModel) ToUpdateSDKType() *operations.PutSteeringAppsPrivatePrivateAppIDRequestBody {
	appName := new(string)
	if !r.AppName.IsUnknown() && !r.AppName.IsNull() {
		*appName = r.AppName.ValueString()
	} else {
		appName = nil
	}
	clientlessAccess := new(bool)
	if !r.ClientlessAccess.IsUnknown() && !r.ClientlessAccess.IsNull() {
		*clientlessAccess = r.ClientlessAccess.ValueBool()
	} else {
		clientlessAccess = nil
	}
	host := new(string)
	if !r.Host.IsUnknown() && !r.Host.IsNull() {
		*host = r.Host.ValueString()
	} else {
		host = nil
	}
	id := new(int)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = int(r.ID.ValueInt64())
	} else {
		id = nil
	}
	var protocols []operations.PutSteeringAppsPrivatePrivateAppIDProtocols = nil
	for _, protocolsItem := range r.Protocols {
		port := new(string)
		if !protocolsItem.Port.IsUnknown() && !protocolsItem.Port.IsNull() {
			*port = protocolsItem.Port.ValueString()
		} else {
			port = nil
		}
		typeVar := new(string)
		if !protocolsItem.Type.IsUnknown() && !protocolsItem.Type.IsNull() {
			*typeVar = protocolsItem.Type.ValueString()
		} else {
			typeVar = nil
		}
		protocols = append(protocols, operations.PutSteeringAppsPrivatePrivateAppIDProtocols{
			Port: port,
			Type: typeVar,
		})
	}
	var publisherTags []operations.PutSteeringAppsPrivatePrivateAppIDPublisherTags = nil
	for _, publisherTagsItem := range r.PublisherTags {
		tagName := new(string)
		if !publisherTagsItem.TagName.IsUnknown() && !publisherTagsItem.TagName.IsNull() {
			*tagName = publisherTagsItem.TagName.ValueString()
		} else {
			tagName = nil
		}
		publisherTags = append(publisherTags, operations.PutSteeringAppsPrivatePrivateAppIDPublisherTags{
			TagName: tagName,
		})
	}
	var publishers []operations.PutSteeringAppsPrivatePrivateAppIDPublishers = nil
	for _, publishersItem := range r.Publishers {
		publisherID := new(string)
		if !publishersItem.PublisherID.IsUnknown() && !publishersItem.PublisherID.IsNull() {
			*publisherID = publishersItem.PublisherID.ValueString()
		} else {
			publisherID = nil
		}
		publisherName := new(string)
		if !publishersItem.PublisherName.IsUnknown() && !publishersItem.PublisherName.IsNull() {
			*publisherName = publishersItem.PublisherName.ValueString()
		} else {
			publisherName = nil
		}
		publishers = append(publishers, operations.PutSteeringAppsPrivatePrivateAppIDPublishers{
			PublisherID:   publisherID,
			PublisherName: publisherName,
		})
	}
	realHost := new(string)
	if !r.RealHost.IsUnknown() && !r.RealHost.IsNull() {
		*realHost = r.RealHost.ValueString()
	} else {
		realHost = nil
	}
	var tags []operations.PutSteeringAppsPrivatePrivateAppIDTags = nil
	for _, tagsItem := range r.Tags {
		tagName1 := new(string)
		if !tagsItem.TagName.IsUnknown() && !tagsItem.TagName.IsNull() {
			*tagName1 = tagsItem.TagName.ValueString()
		} else {
			tagName1 = nil
		}
		tags = append(tags, operations.PutSteeringAppsPrivatePrivateAppIDTags{
			TagName: tagName1,
		})
	}
	trustSelfSignedCerts := new(bool)
	if !r.TrustSelfSignedCerts.IsUnknown() && !r.TrustSelfSignedCerts.IsNull() {
		*trustSelfSignedCerts = r.TrustSelfSignedCerts.ValueBool()
	} else {
		trustSelfSignedCerts = nil
	}
	usePublisherDNS := new(bool)
	if !r.UsePublisherDNS.IsUnknown() && !r.UsePublisherDNS.IsNull() {
		*usePublisherDNS = r.UsePublisherDNS.ValueBool()
	} else {
		usePublisherDNS = nil
	}
	out := operations.PutSteeringAppsPrivatePrivateAppIDRequestBody{
		AppName:              appName,
		ClientlessAccess:     clientlessAccess,
		Host:                 host,
		ID:                   id,
		Protocols:            protocols,
		PublisherTags:        publisherTags,
		Publishers:           publishers,
		RealHost:             realHost,
		Tags:                 tags,
		TrustSelfSignedCerts: trustSelfSignedCerts,
		UsePublisherDNS:      usePublisherDNS,
	}
	return &out
}

func (r *PrivateAppResourceModel) ToDeleteSDKType() *operations.PostSteeringAppsPrivateRequestBody {
	out := r.ToCreateSDKType()
	return out
}

func (r *PrivateAppResourceModel) RefreshFromCreateResponse(resp *operations.PostSteeringAppsPrivateData) {
	if resp.ClientlessAccess != nil {
		r.ClientlessAccess = types.BoolValue(*resp.ClientlessAccess)
	} else {
		r.ClientlessAccess = types.BoolNull()
	}
	if resp.Host != nil {
		r.Host = types.StringValue(*resp.Host)
	} else {
		r.Host = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.Int64Value(int64(*resp.ID))
	} else {
		r.ID = types.Int64Null()
	}
	if resp.Name != nil {
		r.Name = types.StringValue(*resp.Name)
	} else {
		r.Name = types.StringNull()
	}
	r.Protocols = nil
	for _, protocolsItem := range resp.Protocols {
		var protocols1 PostSteeringAppsPrivateProtocols
		if protocolsItem.Port != nil {
			protocols1.Port = types.StringValue(*protocolsItem.Port)
		} else {
			protocols1.Port = types.StringNull()
		}
		r.Protocols = append(r.Protocols, protocols1)
	}
	if resp.RealHost != nil {
		r.RealHost = types.StringValue(*resp.RealHost)
	} else {
		r.RealHost = types.StringNull()
	}
	r.ServicePublisherAssignments = nil
	for _, servicePublisherAssignmentsItem := range resp.ServicePublisherAssignments {
		var servicePublisherAssignments1 PostSteeringAppsPrivateServicePublisherAssignments
		if servicePublisherAssignmentsItem.Primary != nil {
			servicePublisherAssignments1.Primary = types.BoolValue(*servicePublisherAssignmentsItem.Primary)
		} else {
			servicePublisherAssignments1.Primary = types.BoolNull()
		}
		if servicePublisherAssignmentsItem.PublisherID != nil {
			servicePublisherAssignments1.PublisherID = types.Int64Value(int64(*servicePublisherAssignmentsItem.PublisherID))
		} else {
			servicePublisherAssignments1.PublisherID = types.Int64Null()
		}
		if servicePublisherAssignmentsItem.Reachability == nil {
			servicePublisherAssignments1.Reachability = nil
		} else {
			servicePublisherAssignments1.Reachability = &PostSteeringAppsPrivateReachability{}
			if servicePublisherAssignmentsItem.Reachability.ErrorCode != nil {
				servicePublisherAssignments1.Reachability.ErrorCode = types.Int64Value(int64(*servicePublisherAssignmentsItem.Reachability.ErrorCode))
			} else {
				servicePublisherAssignments1.Reachability.ErrorCode = types.Int64Null()
			}
			if servicePublisherAssignmentsItem.Reachability.ErrorString != nil {
				servicePublisherAssignments1.Reachability.ErrorString = types.StringValue(*servicePublisherAssignmentsItem.Reachability.ErrorString)
			} else {
				servicePublisherAssignments1.Reachability.ErrorString = types.StringNull()
			}
			if servicePublisherAssignmentsItem.Reachability.Reachable != nil {
				servicePublisherAssignments1.Reachability.Reachable = types.BoolValue(*servicePublisherAssignmentsItem.Reachability.Reachable)
			} else {
				servicePublisherAssignments1.Reachability.Reachable = types.BoolNull()
			}
		}
		if servicePublisherAssignmentsItem.ServiceID != nil {
			servicePublisherAssignments1.ServiceID = types.Int64Value(int64(*servicePublisherAssignmentsItem.ServiceID))
		} else {
			servicePublisherAssignments1.ServiceID = types.Int64Null()
		}
		r.ServicePublisherAssignments = append(r.ServicePublisherAssignments, servicePublisherAssignments1)
	}
	r.Tags = nil
	for _, tagsItem := range resp.Tags {
		var tags1 PostInfrastructurePublishersTags
		if tagsItem.TagID != nil {
			tags1.TagID = types.Int64Value(int64(*tagsItem.TagID))
		} else {
			tags1.TagID = types.Int64Null()
		}
		if tagsItem.TagName != nil {
			tags1.TagName = types.StringValue(*tagsItem.TagName)
		} else {
			tags1.TagName = types.StringNull()
		}
		r.Tags = append(r.Tags, tags1)
	}
	if resp.TrustSelfSignedCerts != nil {
		r.TrustSelfSignedCerts = types.BoolValue(*resp.TrustSelfSignedCerts)
	} else {
		r.TrustSelfSignedCerts = types.BoolNull()
	}
	if resp.UsePublisherDNS != nil {
		r.UsePublisherDNS = types.BoolValue(*resp.UsePublisherDNS)
	} else {
		r.UsePublisherDNS = types.BoolNull()
	}
}

func (r *PrivateAppResourceModel) RefreshFromUpdateResponse(resp *operations.PutSteeringAppsPrivatePrivateAppIDData) {
	if resp.ClientlessAccess != nil {
		r.ClientlessAccess = types.BoolValue(*resp.ClientlessAccess)
	} else {
		r.ClientlessAccess = types.BoolNull()
	}
	if resp.Host != nil {
		r.Host = types.StringValue(*resp.Host)
	} else {
		r.Host = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.Int64Value(int64(*resp.ID))
	} else {
		r.ID = types.Int64Null()
	}
	if resp.Name != nil {
		r.Name = types.StringValue(*resp.Name)
	} else {
		r.Name = types.StringNull()
	}
	r.Protocols = nil
	for _, protocolsItem := range resp.Protocols {
		var protocols1 PostSteeringAppsPrivateProtocols
		if protocolsItem.Port != nil {
			protocols1.Port = types.StringValue(*protocolsItem.Port)
		} else {
			protocols1.Port = types.StringNull()
		}
		r.Protocols = append(r.Protocols, protocols1)
	}
	if resp.RealHost != nil {
		r.RealHost = types.StringValue(*resp.RealHost)
	} else {
		r.RealHost = types.StringNull()
	}
	r.ServicePublisherAssignments = nil
	for _, servicePublisherAssignmentsItem := range resp.ServicePublisherAssignments {
		var servicePublisherAssignments1 PostSteeringAppsPrivateServicePublisherAssignments
		if servicePublisherAssignmentsItem.Primary != nil {
			servicePublisherAssignments1.Primary = types.BoolValue(*servicePublisherAssignmentsItem.Primary)
		} else {
			servicePublisherAssignments1.Primary = types.BoolNull()
		}
		if servicePublisherAssignmentsItem.PublisherID != nil {
			servicePublisherAssignments1.PublisherID = types.Int64Value(int64(*servicePublisherAssignmentsItem.PublisherID))
		} else {
			servicePublisherAssignments1.PublisherID = types.Int64Null()
		}
		if servicePublisherAssignmentsItem.Reachability == nil {
			servicePublisherAssignments1.Reachability = nil
		} else {
			servicePublisherAssignments1.Reachability = &PostSteeringAppsPrivateReachability{}
			if servicePublisherAssignmentsItem.Reachability.ErrorCode != nil {
				servicePublisherAssignments1.Reachability.ErrorCode = types.Int64Value(int64(*servicePublisherAssignmentsItem.Reachability.ErrorCode))
			} else {
				servicePublisherAssignments1.Reachability.ErrorCode = types.Int64Null()
			}
			if servicePublisherAssignmentsItem.Reachability.ErrorString != nil {
				servicePublisherAssignments1.Reachability.ErrorString = types.StringValue(*servicePublisherAssignmentsItem.Reachability.ErrorString)
			} else {
				servicePublisherAssignments1.Reachability.ErrorString = types.StringNull()
			}
			if servicePublisherAssignmentsItem.Reachability.Reachable != nil {
				servicePublisherAssignments1.Reachability.Reachable = types.BoolValue(*servicePublisherAssignmentsItem.Reachability.Reachable)
			} else {
				servicePublisherAssignments1.Reachability.Reachable = types.BoolNull()
			}
		}
		if servicePublisherAssignmentsItem.ServiceID != nil {
			servicePublisherAssignments1.ServiceID = types.Int64Value(int64(*servicePublisherAssignmentsItem.ServiceID))
		} else {
			servicePublisherAssignments1.ServiceID = types.Int64Null()
		}
		r.ServicePublisherAssignments = append(r.ServicePublisherAssignments, servicePublisherAssignments1)
	}
	r.Tags = nil
	for _, tagsItem := range resp.Tags {
		var tags1 PostInfrastructurePublishersTags
		if tagsItem.TagID != nil {
			tags1.TagID = types.Int64Value(int64(*tagsItem.TagID))
		} else {
			tags1.TagID = types.Int64Null()
		}
		if tagsItem.TagName != nil {
			tags1.TagName = types.StringValue(*tagsItem.TagName)
		} else {
			tags1.TagName = types.StringNull()
		}
		r.Tags = append(r.Tags, tags1)
	}
	if resp.TrustSelfSignedCerts != nil {
		r.TrustSelfSignedCerts = types.BoolValue(*resp.TrustSelfSignedCerts)
	} else {
		r.TrustSelfSignedCerts = types.BoolNull()
	}
	if resp.UsePublisherDNS != nil {
		r.UsePublisherDNS = types.BoolValue(*resp.UsePublisherDNS)
	} else {
		r.UsePublisherDNS = types.BoolNull()
	}
}
