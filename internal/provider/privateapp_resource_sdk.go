// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/pkg/models/shared"
)

func (r *PrivateAppResourceModel) ToSharedPrivateAppsRequest() *shared.PrivateAppsRequest {
	appName := new(string)
	if !r.AppName.IsUnknown() && !r.AppName.IsNull() {
		*appName = r.AppName.ValueString()
	} else {
		appName = nil
	}
	host := new(string)
	if !r.Host.IsUnknown() && !r.Host.IsNull() {
		*host = r.Host.ValueString()
	} else {
		host = nil
	}
	realHost := new(string)
	if !r.RealHost.IsUnknown() && !r.RealHost.IsNull() {
		*realHost = r.RealHost.ValueString()
	} else {
		realHost = nil
	}
	var protocols []shared.ProtocolItem = nil
	for _, protocolsItem := range r.Protocols {
		typeVar := new(string)
		if !protocolsItem.Type.IsUnknown() && !protocolsItem.Type.IsNull() {
			*typeVar = protocolsItem.Type.ValueString()
		} else {
			typeVar = nil
		}
		port := new(string)
		if !protocolsItem.Port.IsUnknown() && !protocolsItem.Port.IsNull() {
			*port = protocolsItem.Port.ValueString()
		} else {
			port = nil
		}
		protocols = append(protocols, shared.ProtocolItem{
			Type: typeVar,
			Port: port,
		})
	}
	var publishers []shared.PublisherItem = nil
	for _, publishersItem := range r.Publishers {
		publisherID := new(string)
		if !publishersItem.PublisherID.IsUnknown() && !publishersItem.PublisherID.IsNull() {
			*publisherID = publishersItem.PublisherID.ValueString()
		} else {
			publisherID = nil
		}
		publisherName := new(string)
		if !publishersItem.PublisherName.IsUnknown() && !publishersItem.PublisherName.IsNull() {
			*publisherName = publishersItem.PublisherName.ValueString()
		} else {
			publisherName = nil
		}
		publishers = append(publishers, shared.PublisherItem{
			PublisherID:   publisherID,
			PublisherName: publisherName,
		})
	}
	var publisherTags []shared.TagItemNoID = nil
	for _, publisherTagsItem := range r.PublisherTags {
		tagName := new(string)
		if !publisherTagsItem.TagName.IsUnknown() && !publisherTagsItem.TagName.IsNull() {
			*tagName = publisherTagsItem.TagName.ValueString()
		} else {
			tagName = nil
		}
		publisherTags = append(publisherTags, shared.TagItemNoID{
			TagName: tagName,
		})
	}
	var tags []shared.TagItemNoID = nil
	for _, tagsItem := range r.Tags {
		tagName1 := new(string)
		if !tagsItem.TagName.IsUnknown() && !tagsItem.TagName.IsNull() {
			*tagName1 = tagsItem.TagName.ValueString()
		} else {
			tagName1 = nil
		}
		tags = append(tags, shared.TagItemNoID{
			TagName: tagName1,
		})
	}
	usePublisherDNS := new(bool)
	if !r.UsePublisherDNS.IsUnknown() && !r.UsePublisherDNS.IsNull() {
		*usePublisherDNS = r.UsePublisherDNS.ValueBool()
	} else {
		usePublisherDNS = nil
	}
	clientlessAccess := new(bool)
	if !r.ClientlessAccess.IsUnknown() && !r.ClientlessAccess.IsNull() {
		*clientlessAccess = r.ClientlessAccess.ValueBool()
	} else {
		clientlessAccess = nil
	}
	trustSelfSignedCerts := new(bool)
	if !r.TrustSelfSignedCerts.IsUnknown() && !r.TrustSelfSignedCerts.IsNull() {
		*trustSelfSignedCerts = r.TrustSelfSignedCerts.ValueBool()
	} else {
		trustSelfSignedCerts = nil
	}
	out := shared.PrivateAppsRequest{
		AppName:              appName,
		Host:                 host,
		RealHost:             realHost,
		Protocols:            protocols,
		Publishers:           publishers,
		PublisherTags:        publisherTags,
		Tags:                 tags,
		UsePublisherDNS:      usePublisherDNS,
		ClientlessAccess:     clientlessAccess,
		TrustSelfSignedCerts: trustSelfSignedCerts,
	}
	return &out
}

func (r *PrivateAppResourceModel) RefreshFromSharedPrivateAppsResponseData(resp *shared.PrivateAppsResponseData) {
	if resp != nil {
		r.ClientlessAccess = types.BoolPointerValue(resp.ClientlessAccess)
		r.Host = types.StringPointerValue(resp.Host)
		if resp.ID != nil {
			r.ID = types.Int64Value(int64(*resp.ID))
		} else {
			r.ID = types.Int64Null()
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.RealHost = types.StringPointerValue(resp.RealHost)
		if len(r.ResolvedProtocols) > len(resp.ResolvedProtocols) {
			r.ResolvedProtocols = r.ResolvedProtocols[:len(resp.ResolvedProtocols)]
		}
		for resolvedProtocolsCount, resolvedProtocolsItem := range resp.ResolvedProtocols {
			var resolvedProtocols1 ProtocolResponseItem
			resolvedProtocols1.Port = types.StringPointerValue(resolvedProtocolsItem.Port)
			resolvedProtocols1.Transport = types.StringPointerValue(resolvedProtocolsItem.Transport)
			if resolvedProtocolsCount+1 > len(r.ResolvedProtocols) {
				r.ResolvedProtocols = append(r.ResolvedProtocols, resolvedProtocols1)
			} else {
				r.ResolvedProtocols[resolvedProtocolsCount].Port = resolvedProtocols1.Port
				r.ResolvedProtocols[resolvedProtocolsCount].Transport = resolvedProtocols1.Transport
			}
		}
		if len(r.ServicePublisherAssignments) > len(resp.ServicePublisherAssignments) {
			r.ServicePublisherAssignments = r.ServicePublisherAssignments[:len(resp.ServicePublisherAssignments)]
		}
		for servicePublisherAssignmentsCount, servicePublisherAssignmentsItem := range resp.ServicePublisherAssignments {
			var servicePublisherAssignments1 ServicePublisherAssignmentItem
			servicePublisherAssignments1.Primary = types.BoolPointerValue(servicePublisherAssignmentsItem.Primary)
			if servicePublisherAssignmentsItem.PublisherID != nil {
				servicePublisherAssignments1.PublisherID = types.Int64Value(int64(*servicePublisherAssignmentsItem.PublisherID))
			} else {
				servicePublisherAssignments1.PublisherID = types.Int64Null()
			}
			if servicePublisherAssignmentsItem.Reachability == nil {
				servicePublisherAssignments1.Reachability = nil
			} else {
				servicePublisherAssignments1.Reachability = &Reachability{}
				if servicePublisherAssignmentsItem.Reachability.ErrorCode != nil {
					servicePublisherAssignments1.Reachability.ErrorCode = types.Int64Value(int64(*servicePublisherAssignmentsItem.Reachability.ErrorCode))
				} else {
					servicePublisherAssignments1.Reachability.ErrorCode = types.Int64Null()
				}
				servicePublisherAssignments1.Reachability.ErrorString = types.StringPointerValue(servicePublisherAssignmentsItem.Reachability.ErrorString)
				servicePublisherAssignments1.Reachability.Reachable = types.BoolPointerValue(servicePublisherAssignmentsItem.Reachability.Reachable)
			}
			if servicePublisherAssignmentsItem.ServiceID != nil {
				servicePublisherAssignments1.ServiceID = types.Int64Value(int64(*servicePublisherAssignmentsItem.ServiceID))
			} else {
				servicePublisherAssignments1.ServiceID = types.Int64Null()
			}
			if servicePublisherAssignmentsCount+1 > len(r.ServicePublisherAssignments) {
				r.ServicePublisherAssignments = append(r.ServicePublisherAssignments, servicePublisherAssignments1)
			} else {
				r.ServicePublisherAssignments[servicePublisherAssignmentsCount].Primary = servicePublisherAssignments1.Primary
				r.ServicePublisherAssignments[servicePublisherAssignmentsCount].PublisherID = servicePublisherAssignments1.PublisherID
				r.ServicePublisherAssignments[servicePublisherAssignmentsCount].Reachability = servicePublisherAssignments1.Reachability
				r.ServicePublisherAssignments[servicePublisherAssignmentsCount].ServiceID = servicePublisherAssignments1.ServiceID
			}
		}
		if len(r.Tags) > len(resp.Tags) {
			r.Tags = r.Tags[:len(resp.Tags)]
		}
		for tagsCount, tagsItem := range resp.Tags {
			var tags1 TagItem
			if tagsItem.TagID != nil {
				tags1.TagID = types.Int64Value(int64(*tagsItem.TagID))
			} else {
				tags1.TagID = types.Int64Null()
			}
			tags1.TagName = types.StringPointerValue(tagsItem.TagName)
			if tagsCount+1 > len(r.Tags) {
				r.Tags = append(r.Tags, tags1)
			} else {
				r.Tags[tagsCount].TagID = tags1.TagID
				r.Tags[tagsCount].TagName = tags1.TagName
			}
		}
		r.TrustSelfSignedCerts = types.BoolPointerValue(resp.TrustSelfSignedCerts)
		r.UsePublisherDNS = types.BoolPointerValue(resp.UsePublisherDNS)
	}
}

func (r *PrivateAppResourceModel) ToSharedPrivateAppsPutRequest() *shared.PrivateAppsPutRequest {
	id := new(int)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = int(r.ID.ValueInt64())
	} else {
		id = nil
	}
	appName := new(string)
	if !r.AppName.IsUnknown() && !r.AppName.IsNull() {
		*appName = r.AppName.ValueString()
	} else {
		appName = nil
	}
	host := new(string)
	if !r.Host.IsUnknown() && !r.Host.IsNull() {
		*host = r.Host.ValueString()
	} else {
		host = nil
	}
	realHost := new(string)
	if !r.RealHost.IsUnknown() && !r.RealHost.IsNull() {
		*realHost = r.RealHost.ValueString()
	} else {
		realHost = nil
	}
	var protocols []shared.ProtocolItem = nil
	for _, protocolsItem := range r.Protocols {
		typeVar := new(string)
		if !protocolsItem.Type.IsUnknown() && !protocolsItem.Type.IsNull() {
			*typeVar = protocolsItem.Type.ValueString()
		} else {
			typeVar = nil
		}
		port := new(string)
		if !protocolsItem.Port.IsUnknown() && !protocolsItem.Port.IsNull() {
			*port = protocolsItem.Port.ValueString()
		} else {
			port = nil
		}
		protocols = append(protocols, shared.ProtocolItem{
			Type: typeVar,
			Port: port,
		})
	}
	var publishers []shared.PublisherItem = nil
	for _, publishersItem := range r.Publishers {
		publisherID := new(string)
		if !publishersItem.PublisherID.IsUnknown() && !publishersItem.PublisherID.IsNull() {
			*publisherID = publishersItem.PublisherID.ValueString()
		} else {
			publisherID = nil
		}
		publisherName := new(string)
		if !publishersItem.PublisherName.IsUnknown() && !publishersItem.PublisherName.IsNull() {
			*publisherName = publishersItem.PublisherName.ValueString()
		} else {
			publisherName = nil
		}
		publishers = append(publishers, shared.PublisherItem{
			PublisherID:   publisherID,
			PublisherName: publisherName,
		})
	}
	var publisherTags []shared.TagItemNoID = nil
	for _, publisherTagsItem := range r.PublisherTags {
		tagName := new(string)
		if !publisherTagsItem.TagName.IsUnknown() && !publisherTagsItem.TagName.IsNull() {
			*tagName = publisherTagsItem.TagName.ValueString()
		} else {
			tagName = nil
		}
		publisherTags = append(publisherTags, shared.TagItemNoID{
			TagName: tagName,
		})
	}
	var tags []shared.TagItemNoID = nil
	for _, tagsItem := range r.Tags {
		tagName1 := new(string)
		if !tagsItem.TagName.IsUnknown() && !tagsItem.TagName.IsNull() {
			*tagName1 = tagsItem.TagName.ValueString()
		} else {
			tagName1 = nil
		}
		tags = append(tags, shared.TagItemNoID{
			TagName: tagName1,
		})
	}
	usePublisherDNS := new(bool)
	if !r.UsePublisherDNS.IsUnknown() && !r.UsePublisherDNS.IsNull() {
		*usePublisherDNS = r.UsePublisherDNS.ValueBool()
	} else {
		usePublisherDNS = nil
	}
	clientlessAccess := new(bool)
	if !r.ClientlessAccess.IsUnknown() && !r.ClientlessAccess.IsNull() {
		*clientlessAccess = r.ClientlessAccess.ValueBool()
	} else {
		clientlessAccess = nil
	}
	trustSelfSignedCerts := new(bool)
	if !r.TrustSelfSignedCerts.IsUnknown() && !r.TrustSelfSignedCerts.IsNull() {
		*trustSelfSignedCerts = r.TrustSelfSignedCerts.ValueBool()
	} else {
		trustSelfSignedCerts = nil
	}
	out := shared.PrivateAppsPutRequest{
		ID:                   id,
		AppName:              appName,
		Host:                 host,
		RealHost:             realHost,
		Protocols:            protocols,
		Publishers:           publishers,
		PublisherTags:        publisherTags,
		Tags:                 tags,
		UsePublisherDNS:      usePublisherDNS,
		ClientlessAccess:     clientlessAccess,
		TrustSelfSignedCerts: trustSelfSignedCerts,
	}
	return &out
}
