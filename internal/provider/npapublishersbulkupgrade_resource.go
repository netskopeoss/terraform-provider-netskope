// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &NPAPublishersBulkUpgradeResource{}
var _ resource.ResourceWithImportState = &NPAPublishersBulkUpgradeResource{}

func NewNPAPublishersBulkUpgradeResource() resource.Resource {
	return &NPAPublishersBulkUpgradeResource{}
}

// NPAPublishersBulkUpgradeResource defines the resource implementation.
type NPAPublishersBulkUpgradeResource struct {
	client *sdk.TerraformProviderNs
}

// NPAPublishersBulkUpgradeResourceModel describes the resource data model.
type NPAPublishersBulkUpgradeResourceModel struct {
	Data       []tfTypes.PublisherBulkItem `tfsdk:"data"`
	Publishers *tfTypes.Publishers         `tfsdk:"publishers"`
	Status     types.String                `tfsdk:"status"`
}

func (r *NPAPublishersBulkUpgradeResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_publishers_bulk_upgrade"
}

func (r *NPAPublishersBulkUpgradeResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "NPAPublishersBulkUpgrade Resource",
		Attributes: map[string]schema.Attribute{
			"data": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"assessment": schema.SingleNestedAttribute{
							Computed:   true,
							Attributes: map[string]schema.Attribute{},
						},
						"common_name": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.Int64Attribute{
							Computed: true,
						},
						"lbrokerconnect": schema.BoolAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"publisher_upgrade_profile_id": schema.Int64Attribute{
							Computed: true,
						},
						"registered": schema.BoolAttribute{
							Computed: true,
						},
						"status": schema.StringAttribute{
							Computed:    true,
							Description: `must be one of ["connected", "not registered"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"connected",
									"not registered",
								),
							},
						},
						"stitcher_id": schema.Int64Attribute{
							Computed: true,
						},
						"tags": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"tag_id": schema.Int64Attribute{
										Computed: true,
									},
									"tag_name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"upgrade_failed_reason": schema.SingleNestedAttribute{
							Computed:   true,
							Attributes: map[string]schema.Attribute{},
						},
						"upgrade_request": schema.BoolAttribute{
							Computed: true,
						},
						"upgrade_status": schema.SingleNestedAttribute{
							Computed:   true,
							Attributes: map[string]schema.Attribute{},
						},
					},
				},
			},
			"publishers": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"apply": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"upgrade_request": schema.BoolAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Optional:    true,
								Default:     booldefault.StaticBool(true),
								Description: `Requires replacement if changed. ; Default: true`,
							},
						},
						Description: `Requires replacement if changed. `,
					},
					"id": schema.ListAttribute{
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						ElementType: types.StringType,
						Description: `Requires replacement if changed. `,
					},
				},
				Description: `Requires replacement if changed. `,
			},
			"status": schema.StringAttribute{
				Computed:    true,
				Description: `must be one of ["success", "not found"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"success",
						"not found",
					),
				},
			},
		},
	}
}

func (r *NPAPublishersBulkUpgradeResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderNs)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderNs, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPAPublishersBulkUpgradeResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *NPAPublishersBulkUpgradeResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToSharedPublisherBulkRequest()
	res, err := r.client.TriggerNPAPublisherUpdate(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PublishersBulkResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPublishersBulkResponse(res.PublishersBulkResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPublishersBulkUpgradeResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *NPAPublishersBulkUpgradeResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPublishersBulkUpgradeResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *NPAPublishersBulkUpgradeResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPublishersBulkUpgradeResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *NPAPublishersBulkUpgradeResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *NPAPublishersBulkUpgradeResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource npa_publishers_bulk_upgrade.")
}
