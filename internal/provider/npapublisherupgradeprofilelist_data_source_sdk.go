// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/pkg/models/shared"
)

func (r *NPAPublisherUpgradeProfileListDataSourceModel) RefreshFromSharedPublisherUpgradeProfileGetResponse(resp *shared.PublisherUpgradeProfileGetResponse) {
	if resp != nil {
		if resp.Data == nil {
			r.Data = nil
		} else {
			r.Data = &PublisherUpgradeProfileGetResponseData{}
			if len(r.Data.UpgradeProfiles) > len(resp.Data.UpgradeProfiles) {
				r.Data.UpgradeProfiles = r.Data.UpgradeProfiles[:len(resp.Data.UpgradeProfiles)]
			}
			for upgradeProfilesCount, upgradeProfilesItem := range resp.Data.UpgradeProfiles {
				var upgradeProfiles1 UpgradeProfiles
				upgradeProfiles1.CreatedAt = types.StringPointerValue(upgradeProfilesItem.CreatedAt)
				upgradeProfiles1.DockerTag = types.StringPointerValue(upgradeProfilesItem.DockerTag)
				upgradeProfiles1.Enabled = types.BoolPointerValue(upgradeProfilesItem.Enabled)
				if upgradeProfilesItem.ExternalID != nil {
					upgradeProfiles1.ExternalID = types.Int64Value(int64(*upgradeProfilesItem.ExternalID))
				} else {
					upgradeProfiles1.ExternalID = types.Int64Null()
				}
				upgradeProfiles1.Frequency = types.StringPointerValue(upgradeProfilesItem.Frequency)
				if upgradeProfilesItem.ID != nil {
					upgradeProfiles1.ID = types.Int64Value(int64(*upgradeProfilesItem.ID))
				} else {
					upgradeProfiles1.ID = types.Int64Null()
				}
				upgradeProfiles1.Name = types.StringPointerValue(upgradeProfilesItem.Name)
				if upgradeProfilesItem.NextUpdateTime != nil {
					upgradeProfiles1.NextUpdateTime = types.Int64Value(int64(*upgradeProfilesItem.NextUpdateTime))
				} else {
					upgradeProfiles1.NextUpdateTime = types.Int64Null()
				}
				upgradeProfiles1.NumAssociatedPublisher = types.Int64PointerValue(upgradeProfilesItem.NumAssociatedPublisher)
				upgradeProfiles1.ReleaseType = types.StringPointerValue(upgradeProfilesItem.ReleaseType)
				upgradeProfiles1.Timezone = types.StringPointerValue(upgradeProfilesItem.Timezone)
				upgradeProfiles1.UpdatedAt = types.StringPointerValue(upgradeProfilesItem.UpdatedAt)
				if upgradeProfilesItem.UpgradingStage != nil {
					upgradeProfiles1.UpgradingStage = types.Int64Value(int64(*upgradeProfilesItem.UpgradingStage))
				} else {
					upgradeProfiles1.UpgradingStage = types.Int64Null()
				}
				upgradeProfiles1.WillStart = types.BoolPointerValue(upgradeProfilesItem.WillStart)
				if upgradeProfilesCount+1 > len(r.Data.UpgradeProfiles) {
					r.Data.UpgradeProfiles = append(r.Data.UpgradeProfiles, upgradeProfiles1)
				} else {
					r.Data.UpgradeProfiles[upgradeProfilesCount].CreatedAt = upgradeProfiles1.CreatedAt
					r.Data.UpgradeProfiles[upgradeProfilesCount].DockerTag = upgradeProfiles1.DockerTag
					r.Data.UpgradeProfiles[upgradeProfilesCount].Enabled = upgradeProfiles1.Enabled
					r.Data.UpgradeProfiles[upgradeProfilesCount].ExternalID = upgradeProfiles1.ExternalID
					r.Data.UpgradeProfiles[upgradeProfilesCount].Frequency = upgradeProfiles1.Frequency
					r.Data.UpgradeProfiles[upgradeProfilesCount].ID = upgradeProfiles1.ID
					r.Data.UpgradeProfiles[upgradeProfilesCount].Name = upgradeProfiles1.Name
					r.Data.UpgradeProfiles[upgradeProfilesCount].NextUpdateTime = upgradeProfiles1.NextUpdateTime
					r.Data.UpgradeProfiles[upgradeProfilesCount].NumAssociatedPublisher = upgradeProfiles1.NumAssociatedPublisher
					r.Data.UpgradeProfiles[upgradeProfilesCount].ReleaseType = upgradeProfiles1.ReleaseType
					r.Data.UpgradeProfiles[upgradeProfilesCount].Timezone = upgradeProfiles1.Timezone
					r.Data.UpgradeProfiles[upgradeProfilesCount].UpdatedAt = upgradeProfiles1.UpdatedAt
					r.Data.UpgradeProfiles[upgradeProfilesCount].UpgradingStage = upgradeProfiles1.UpgradingStage
					r.Data.UpgradeProfiles[upgradeProfilesCount].WillStart = upgradeProfiles1.WillStart
				}
			}
		}
		if resp.Total != nil {
			r.Total = types.Int64Value(int64(*resp.Total))
		} else {
			r.Total = types.Int64Null()
		}
	}
}
