// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk/pkg/models/shared"
)

func (r *NPAPublisherUpgradeProfileListDataSourceModel) RefreshFromGetResponse(resp *shared.PublisherUpgradeProfileGetResponse) {
	if resp.Data == nil {
		r.Data = nil
	} else {
		r.Data = &PublisherUpgradeProfileGetResponseData{}
		if len(r.Data.UpgradeProfiles) > len(resp.Data.UpgradeProfiles) {
			r.Data.UpgradeProfiles = r.Data.UpgradeProfiles[:len(resp.Data.UpgradeProfiles)]
		}
		for upgradeProfilesCount, upgradeProfilesItem := range resp.Data.UpgradeProfiles {
			var upgradeProfiles1 UpgradeProfiles
			if upgradeProfilesItem.CreatedAt != nil {
				upgradeProfiles1.CreatedAt = types.StringValue(*upgradeProfilesItem.CreatedAt)
			} else {
				upgradeProfiles1.CreatedAt = types.StringNull()
			}
			if upgradeProfilesItem.DockerTag != nil {
				upgradeProfiles1.DockerTag = types.StringValue(*upgradeProfilesItem.DockerTag)
			} else {
				upgradeProfiles1.DockerTag = types.StringNull()
			}
			if upgradeProfilesItem.Enabled != nil {
				upgradeProfiles1.Enabled = types.BoolValue(*upgradeProfilesItem.Enabled)
			} else {
				upgradeProfiles1.Enabled = types.BoolNull()
			}
			if upgradeProfilesItem.ExternalID != nil {
				upgradeProfiles1.ExternalID = types.Int64Value(int64(*upgradeProfilesItem.ExternalID))
			} else {
				upgradeProfiles1.ExternalID = types.Int64Null()
			}
			if upgradeProfilesItem.Frequency != nil {
				upgradeProfiles1.Frequency = types.StringValue(*upgradeProfilesItem.Frequency)
			} else {
				upgradeProfiles1.Frequency = types.StringNull()
			}
			if upgradeProfilesItem.ID != nil {
				upgradeProfiles1.ID = types.Int64Value(int64(*upgradeProfilesItem.ID))
			} else {
				upgradeProfiles1.ID = types.Int64Null()
			}
			if upgradeProfilesItem.Name != nil {
				upgradeProfiles1.Name = types.StringValue(*upgradeProfilesItem.Name)
			} else {
				upgradeProfiles1.Name = types.StringNull()
			}
			if upgradeProfilesItem.NextUpdateTime != nil {
				upgradeProfiles1.NextUpdateTime = types.Int64Value(int64(*upgradeProfilesItem.NextUpdateTime))
			} else {
				upgradeProfiles1.NextUpdateTime = types.Int64Null()
			}
			if upgradeProfilesItem.NumAssociatedPublisher != nil {
				upgradeProfiles1.NumAssociatedPublisher = types.Int64Value(*upgradeProfilesItem.NumAssociatedPublisher)
			} else {
				upgradeProfiles1.NumAssociatedPublisher = types.Int64Null()
			}
			if upgradeProfilesItem.ReleaseType != nil {
				upgradeProfiles1.ReleaseType = types.StringValue(*upgradeProfilesItem.ReleaseType)
			} else {
				upgradeProfiles1.ReleaseType = types.StringNull()
			}
			if upgradeProfilesItem.Timezone != nil {
				upgradeProfiles1.Timezone = types.StringValue(*upgradeProfilesItem.Timezone)
			} else {
				upgradeProfiles1.Timezone = types.StringNull()
			}
			if upgradeProfilesItem.UpdatedAt != nil {
				upgradeProfiles1.UpdatedAt = types.StringValue(*upgradeProfilesItem.UpdatedAt)
			} else {
				upgradeProfiles1.UpdatedAt = types.StringNull()
			}
			if upgradeProfilesItem.UpgradingStage != nil {
				upgradeProfiles1.UpgradingStage = types.Int64Value(int64(*upgradeProfilesItem.UpgradingStage))
			} else {
				upgradeProfiles1.UpgradingStage = types.Int64Null()
			}
			if upgradeProfilesItem.WillStart != nil {
				upgradeProfiles1.WillStart = types.BoolValue(*upgradeProfilesItem.WillStart)
			} else {
				upgradeProfiles1.WillStart = types.BoolNull()
			}
			if upgradeProfilesCount+1 > len(r.Data.UpgradeProfiles) {
				r.Data.UpgradeProfiles = append(r.Data.UpgradeProfiles, upgradeProfiles1)
			} else {
				r.Data.UpgradeProfiles[upgradeProfilesCount].CreatedAt = upgradeProfiles1.CreatedAt
				r.Data.UpgradeProfiles[upgradeProfilesCount].DockerTag = upgradeProfiles1.DockerTag
				r.Data.UpgradeProfiles[upgradeProfilesCount].Enabled = upgradeProfiles1.Enabled
				r.Data.UpgradeProfiles[upgradeProfilesCount].ExternalID = upgradeProfiles1.ExternalID
				r.Data.UpgradeProfiles[upgradeProfilesCount].Frequency = upgradeProfiles1.Frequency
				r.Data.UpgradeProfiles[upgradeProfilesCount].ID = upgradeProfiles1.ID
				r.Data.UpgradeProfiles[upgradeProfilesCount].Name = upgradeProfiles1.Name
				r.Data.UpgradeProfiles[upgradeProfilesCount].NextUpdateTime = upgradeProfiles1.NextUpdateTime
				r.Data.UpgradeProfiles[upgradeProfilesCount].NumAssociatedPublisher = upgradeProfiles1.NumAssociatedPublisher
				r.Data.UpgradeProfiles[upgradeProfilesCount].ReleaseType = upgradeProfiles1.ReleaseType
				r.Data.UpgradeProfiles[upgradeProfilesCount].Timezone = upgradeProfiles1.Timezone
				r.Data.UpgradeProfiles[upgradeProfilesCount].UpdatedAt = upgradeProfiles1.UpdatedAt
				r.Data.UpgradeProfiles[upgradeProfilesCount].UpgradingStage = upgradeProfiles1.UpgradingStage
				r.Data.UpgradeProfiles[upgradeProfilesCount].WillStart = upgradeProfiles1.WillStart
			}
		}
	}
	if resp.Total != nil {
		r.Total = types.Int64Value(int64(*resp.Total))
	} else {
		r.Total = types.Int64Null()
	}
}
