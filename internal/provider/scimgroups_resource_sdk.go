// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-terraform/internal/provider/types"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/models/operations"
)

func (r *SCIMGroupsResourceModel) ToOperationsCreateSCIMGroupsRequestBody() *operations.CreateSCIMGroupsRequestBody {
	var schemas []operations.CreateSCIMGroupsSchemas = nil
	for _, schemasItem := range r.Schemas {
		schemas = append(schemas, operations.CreateSCIMGroupsSchemas(schemasItem.ValueString()))
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var members []operations.Members = nil
	for _, membersItem := range r.Members {
		value := new(string)
		if !membersItem.Value.IsUnknown() && !membersItem.Value.IsNull() {
			*value = membersItem.Value.ValueString()
		} else {
			value = nil
		}
		members = append(members, operations.Members{
			Value: value,
		})
	}
	externalID := new(string)
	if !r.ExternalID.IsUnknown() && !r.ExternalID.IsNull() {
		*externalID = r.ExternalID.ValueString()
	} else {
		externalID = nil
	}
	var meta *operations.CreateSCIMGroupsMeta
	if r.Meta != nil {
		resourceType := new(string)
		if !r.Meta.ResourceType.IsUnknown() && !r.Meta.ResourceType.IsNull() {
			*resourceType = r.Meta.ResourceType.ValueString()
		} else {
			resourceType = nil
		}
		meta = &operations.CreateSCIMGroupsMeta{
			ResourceType: resourceType,
		}
	}
	out := operations.CreateSCIMGroupsRequestBody{
		Schemas:     schemas,
		DisplayName: displayName,
		Members:     members,
		ExternalID:  externalID,
		Meta:        meta,
	}
	return &out
}

func (r *SCIMGroupsResourceModel) RefreshFromOperationsCreateSCIMGroupsResponseBody(resp *operations.CreateSCIMGroupsResponseBody) {
	if resp != nil {
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.ExternalID = types.StringPointerValue(resp.ExternalID)
		r.ID = types.StringPointerValue(resp.ID)
		if len(r.Members) > len(resp.Members) {
			r.Members = r.Members[:len(resp.Members)]
		}
		for membersCount, membersItem := range resp.Members {
			var members1 tfTypes.Members
			members1.Value = types.StringPointerValue(membersItem.Value)
			if membersCount+1 > len(r.Members) {
				r.Members = append(r.Members, members1)
			} else {
				r.Members[membersCount].Value = members1.Value
			}
		}
		if resp.Meta == nil {
			r.Meta = nil
		} else {
			r.Meta = &tfTypes.CreateSCIMGroupsMeta{}
			r.Meta.ResourceType = types.StringPointerValue(resp.Meta.ResourceType)
		}
		r.Schemas = []types.String{}
		for _, v := range resp.Schemas {
			r.Schemas = append(r.Schemas, types.StringValue(string(v)))
		}
		if resp.Status != nil {
			r.Status = types.Int64Value(int64(*resp.Status))
		} else {
			r.Status = types.Int64Null()
		}
	}
}

func (r *SCIMGroupsResourceModel) RefreshFromOperationsGetSCIMGroupsResponseBody(resp *operations.GetSCIMGroupsResponseBody) {
	if resp != nil {
		r.ItemsPerPage = types.Int64PointerValue(resp.ItemsPerPage)
		if len(r.Resources) > len(resp.Resources) {
			r.Resources = r.Resources[:len(resp.Resources)]
		}
		for resourcesCount, resourcesItem := range resp.Resources {
			var resources1 tfTypes.GetSCIMGroupsResources
			resources1.ID = types.StringPointerValue(resourcesItem.ID)
			resources1.DisplayName = types.StringPointerValue(resourcesItem.DisplayName)
			resources1.ExternalID = types.StringPointerValue(resourcesItem.ExternalID)
			if resourcesCount+1 > len(r.Resources) {
				r.Resources = append(r.Resources, resources1)
			} else {
				r.Resources[resourcesCount].ID = resources1.ID
				r.Resources[resourcesCount].DisplayName = resources1.DisplayName
				r.Resources[resourcesCount].ExternalID = resources1.ExternalID
			}
		}
		r.Schemas = []types.String{}
		for _, v := range resp.Schemas {
			r.Schemas = append(r.Schemas, types.StringValue(string(v)))
		}
		r.StartIndex = types.Int64PointerValue(resp.StartIndex)
		r.TotalResults = types.Int64PointerValue(resp.TotalResults)
	}
}
