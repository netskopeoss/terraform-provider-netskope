// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &NPAPublisherUpgradeProfilesListDataSource{}
var _ datasource.DataSourceWithConfigure = &NPAPublisherUpgradeProfilesListDataSource{}

func NewNPAPublisherUpgradeProfilesListDataSource() datasource.DataSource {
	return &NPAPublisherUpgradeProfilesListDataSource{}
}

// NPAPublisherUpgradeProfilesListDataSource is the data source implementation.
type NPAPublisherUpgradeProfilesListDataSource struct {
	// Provider configured SDK client.
	client *sdk.TerraformProviderNs
}

// NPAPublisherUpgradeProfilesListDataSourceModel describes the data model.
type NPAPublisherUpgradeProfilesListDataSourceModel struct {
	Data  *tfTypes.PublisherUpgradeProfileListResponseData `tfsdk:"data"`
	Total types.Int32                                      `tfsdk:"total"`
}

// Metadata returns the data source type name.
func (r *NPAPublisherUpgradeProfilesListDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_publisher_upgrade_profiles_list"
}

// Schema defines the schema for the data source.
func (r *NPAPublisherUpgradeProfilesListDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "The NPA Publisher is a software package that enables private application\nconnectivity between your data center and the Netskope cloud. It is a crucial\ncomponent of Netskopeâ€™s Private Access (NPA) solution, which provides zero-trust\nnetwork access (ZTNA) to private applications and data in hybrid IT environments.\n\nThis data object queries and returns all publisher upgrade profiles.\n",

		Attributes: map[string]schema.Attribute{
			"data": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"upgrade_profiles": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"docker_tag": schema.StringAttribute{
									Computed: true,
								},
								"enabled": schema.BoolAttribute{
									Computed: true,
								},
								"frequency": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"next_update_time": schema.Int32Attribute{
									Computed: true,
								},
								"num_associated_publisher": schema.Int32Attribute{
									Computed: true,
								},
								"publisher_upgrade_profile_id": schema.Int32Attribute{
									Computed: true,
								},
								"release_type": schema.StringAttribute{
									Computed: true,
								},
								"timezone": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
								"upgrading_stage": schema.Int32Attribute{
									Computed: true,
								},
								"will_start": schema.BoolAttribute{
									Computed: true,
								},
							},
						},
					},
				},
			},
			"total": schema.Int32Attribute{
				Computed: true,
			},
		},
	}
}

func (r *NPAPublisherUpgradeProfilesListDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderNs)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderNs, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPAPublisherUpgradeProfilesListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *NPAPublisherUpgradeProfilesListDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	res, err := r.client.NPAPublisherUpgradeProfiles.ListObjects(ctx)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PublisherUpgradeProfileListResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPublisherUpgradeProfileListResponse(ctx, res.PublisherUpgradeProfileListResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
