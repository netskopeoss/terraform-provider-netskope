// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/shared"
)

func (r *NPAPublisherUpgradeProfilesResourceModel) ToSharedPublisherUpgradeProfilePostRequest() *shared.PublisherUpgradeProfilePostRequest {
	dockerTag := r.DockerTag.ValueString()
	enabled := r.Enabled.ValueBool()
	frequency := r.Frequency.ValueString()
	name := r.Name.ValueString()
	releaseType := shared.ReleaseType(r.ReleaseType.ValueString())
	timezone := shared.Timezone(r.Timezone.ValueString())
	out := shared.PublisherUpgradeProfilePostRequest{
		DockerTag:   dockerTag,
		Enabled:     enabled,
		Frequency:   frequency,
		Name:        name,
		ReleaseType: releaseType,
		Timezone:    timezone,
	}
	return &out
}

func (r *NPAPublisherUpgradeProfilesResourceModel) RefreshFromSharedPublisherUpgradeProfileResponseData(resp *shared.PublisherUpgradeProfileResponseData) {
	if resp != nil {
		r.CreatedAt = types.StringPointerValue(resp.CreatedAt)
		r.DockerTag = types.StringPointerValue(resp.DockerTag)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		if resp.ExternalID != nil {
			r.ExternalID = types.Int64Value(int64(*resp.ExternalID))
		} else {
			r.ExternalID = types.Int64Null()
		}
		r.Frequency = types.StringPointerValue(resp.Frequency)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.NextUpdateTime != nil {
			r.NextUpdateTime = types.Int64Value(int64(*resp.NextUpdateTime))
		} else {
			r.NextUpdateTime = types.Int64Null()
		}
		if resp.NumAssociatedPublisher != nil {
			r.NumAssociatedPublisher = types.Int64Value(int64(*resp.NumAssociatedPublisher))
		} else {
			r.NumAssociatedPublisher = types.Int64Null()
		}
		if resp.ReleaseType != nil {
			r.ReleaseType = types.StringValue(string(*resp.ReleaseType))
		} else {
			r.ReleaseType = types.StringNull()
		}
		if resp.Timezone != nil {
			r.Timezone = types.StringValue(string(*resp.Timezone))
		} else {
			r.Timezone = types.StringNull()
		}
		r.UpdatedAt = types.StringPointerValue(resp.UpdatedAt)
		if resp.UpgradingStage != nil {
			r.UpgradingStage = types.Int64Value(int64(*resp.UpgradingStage))
		} else {
			r.UpgradingStage = types.Int64Null()
		}
		r.WillStart = types.BoolPointerValue(resp.WillStart)
	}
}

func (r *NPAPublisherUpgradeProfilesResourceModel) RefreshFromSharedPublisherUpgradeProfileGetResponseData(resp *shared.PublisherUpgradeProfileGetResponseData) {
	if resp != nil {
		r.CreatedAt = types.StringPointerValue(resp.CreatedAt)
		r.DockerTag = types.StringPointerValue(resp.DockerTag)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		if resp.ExternalID != nil {
			r.ExternalID = types.Int64Value(int64(*resp.ExternalID))
		} else {
			r.ExternalID = types.Int64Null()
		}
		r.Frequency = types.StringPointerValue(resp.Frequency)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.NextUpdateTime != nil {
			r.NextUpdateTime = types.Int64Value(int64(*resp.NextUpdateTime))
		} else {
			r.NextUpdateTime = types.Int64Null()
		}
		if resp.NumAssociatedPublisher != nil {
			r.NumAssociatedPublisher = types.Int64Value(int64(*resp.NumAssociatedPublisher))
		} else {
			r.NumAssociatedPublisher = types.Int64Null()
		}
		if resp.ReleaseType != nil {
			r.ReleaseType = types.StringValue(string(*resp.ReleaseType))
		} else {
			r.ReleaseType = types.StringNull()
		}
		if resp.Timezone != nil {
			r.Timezone = types.StringValue(string(*resp.Timezone))
		} else {
			r.Timezone = types.StringNull()
		}
		r.UpdatedAt = types.StringPointerValue(resp.UpdatedAt)
		if resp.UpgradingStage != nil {
			r.UpgradingStage = types.Int64Value(int64(*resp.UpgradingStage))
		} else {
			r.UpgradingStage = types.Int64Null()
		}
		r.WillStart = types.BoolPointerValue(resp.WillStart)
	}
}

func (r *NPAPublisherUpgradeProfilesResourceModel) ToSharedPublisherUpgradeProfilePutRequest() *shared.PublisherUpgradeProfilePutRequest {
	dockerTag := r.DockerTag.ValueString()
	enabled := r.Enabled.ValueBool()
	frequency := r.Frequency.ValueString()
	externalID := int(r.ExternalID.ValueInt64())
	name := r.Name.ValueString()
	releaseType := shared.PublisherUpgradeProfilePutRequestReleaseType(r.ReleaseType.ValueString())
	timezone := shared.PublisherUpgradeProfilePutRequestTimezone(r.Timezone.ValueString())
	out := shared.PublisherUpgradeProfilePutRequest{
		DockerTag:   dockerTag,
		Enabled:     enabled,
		Frequency:   frequency,
		ExternalID:  externalID,
		Name:        name,
		ReleaseType: releaseType,
		Timezone:    timezone,
	}
	return &out
}
