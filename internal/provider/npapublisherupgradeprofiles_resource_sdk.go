// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"ns/internal/sdk/pkg/models/operations"
)

func (r *NPAPublisherUpgradeProfilesResourceModel) ToCreateSDKType() *operations.PostPublisherupgradeprofilesRequestBody {
	dockerTag := new(string)
	if !r.DockerTag.IsUnknown() && !r.DockerTag.IsNull() {
		*dockerTag = r.DockerTag.ValueString()
	} else {
		dockerTag = nil
	}
	enabled := new(int)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = int(r.Enabled.ValueInt64())
	} else {
		enabled = nil
	}
	frequency := new(string)
	if !r.Frequency.IsUnknown() && !r.Frequency.IsNull() {
		*frequency = r.Frequency.ValueString()
	} else {
		frequency = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	releaseType := new(string)
	if !r.ReleaseType.IsUnknown() && !r.ReleaseType.IsNull() {
		*releaseType = r.ReleaseType.ValueString()
	} else {
		releaseType = nil
	}
	timezone := new(string)
	if !r.Timezone.IsUnknown() && !r.Timezone.IsNull() {
		*timezone = r.Timezone.ValueString()
	} else {
		timezone = nil
	}
	out := operations.PostPublisherupgradeprofilesRequestBody{
		DockerTag:   dockerTag,
		Enabled:     enabled,
		Frequency:   frequency,
		Name:        name,
		ReleaseType: releaseType,
		Timezone:    timezone,
	}
	return &out
}

func (r *NPAPublisherUpgradeProfilesResourceModel) ToGetSDKType() *operations.PostPublisherupgradeprofilesRequestBody {
	out := r.ToCreateSDKType()
	return out
}

func (r *NPAPublisherUpgradeProfilesResourceModel) ToUpdateSDKType() *operations.PutPublisherupgradeprofilesUpgradeProfileIDRequestBody {
	dockerTag := new(string)
	if !r.DockerTag.IsUnknown() && !r.DockerTag.IsNull() {
		*dockerTag = r.DockerTag.ValueString()
	} else {
		dockerTag = nil
	}
	enabled := new(int)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = int(r.Enabled.ValueInt64())
	} else {
		enabled = nil
	}
	frequency := new(string)
	if !r.Frequency.IsUnknown() && !r.Frequency.IsNull() {
		*frequency = r.Frequency.ValueString()
	} else {
		frequency = nil
	}
	id := new(int)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = int(r.ID.ValueInt64())
	} else {
		id = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	releaseType := new(string)
	if !r.ReleaseType.IsUnknown() && !r.ReleaseType.IsNull() {
		*releaseType = r.ReleaseType.ValueString()
	} else {
		releaseType = nil
	}
	timezone := new(string)
	if !r.Timezone.IsUnknown() && !r.Timezone.IsNull() {
		*timezone = r.Timezone.ValueString()
	} else {
		timezone = nil
	}
	out := operations.PutPublisherupgradeprofilesUpgradeProfileIDRequestBody{
		DockerTag:   dockerTag,
		Enabled:     enabled,
		Frequency:   frequency,
		ID:          id,
		Name:        name,
		ReleaseType: releaseType,
		Timezone:    timezone,
	}
	return &out
}

func (r *NPAPublisherUpgradeProfilesResourceModel) ToDeleteSDKType() *operations.PostPublisherupgradeprofilesRequestBody {
	out := r.ToCreateSDKType()
	return out
}

func (r *NPAPublisherUpgradeProfilesResourceModel) RefreshFromGetResponse(resp *operations.GetPublisherupgradeprofilesResponseBody) {
	if resp.Data == nil {
		r.Data = nil
	} else {
		r.Data = &GetPublisherupgradeprofilesData{}
		if resp.Data.DockerTag != nil {
			r.Data.DockerTag = types.StringValue(*resp.Data.DockerTag)
		} else {
			r.Data.DockerTag = types.StringNull()
		}
		if resp.Data.Enabled != nil {
			r.Data.Enabled = types.Int64Value(int64(*resp.Data.Enabled))
		} else {
			r.Data.Enabled = types.Int64Null()
		}
		if resp.Data.Frequency != nil {
			r.Data.Frequency = types.StringValue(*resp.Data.Frequency)
		} else {
			r.Data.Frequency = types.StringNull()
		}
		if resp.Data.ID != nil {
			r.Data.ID = types.Int64Value(int64(*resp.Data.ID))
		} else {
			r.Data.ID = types.Int64Null()
		}
		if resp.Data.Name != nil {
			r.Data.Name = types.StringValue(*resp.Data.Name)
		} else {
			r.Data.Name = types.StringNull()
		}
		if resp.Data.ReleaseType != nil {
			r.Data.ReleaseType = types.StringValue(*resp.Data.ReleaseType)
		} else {
			r.Data.ReleaseType = types.StringNull()
		}
		if resp.Data.Timezone != nil {
			r.Data.Timezone = types.StringValue(*resp.Data.Timezone)
		} else {
			r.Data.Timezone = types.StringNull()
		}
	}
	if resp.Status != nil {
		r.Status = types.StringValue(string(*resp.Status))
	} else {
		r.Status = types.StringNull()
	}
	if resp.Total != nil {
		r.Total = types.Int64Value(int64(*resp.Total))
	} else {
		r.Total = types.Int64Null()
	}
}

func (r *NPAPublisherUpgradeProfilesResourceModel) RefreshFromCreateResponse(resp *operations.PostPublisherupgradeprofilesData) {
	if resp.DockerTag != nil {
		r.DockerTag = types.StringValue(*resp.DockerTag)
	} else {
		r.DockerTag = types.StringNull()
	}
	if resp.Enabled != nil {
		r.Enabled = types.Int64Value(int64(*resp.Enabled))
	} else {
		r.Enabled = types.Int64Null()
	}
	if resp.Frequency != nil {
		r.Frequency = types.StringValue(*resp.Frequency)
	} else {
		r.Frequency = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.Int64Value(int64(*resp.ID))
	} else {
		r.ID = types.Int64Null()
	}
	if resp.Name != nil {
		r.Name = types.StringValue(*resp.Name)
	} else {
		r.Name = types.StringNull()
	}
	if resp.ReleaseType != nil {
		r.ReleaseType = types.StringValue(*resp.ReleaseType)
	} else {
		r.ReleaseType = types.StringNull()
	}
	if resp.Timezone != nil {
		r.Timezone = types.StringValue(*resp.Timezone)
	} else {
		r.Timezone = types.StringNull()
	}
}

func (r *NPAPublisherUpgradeProfilesResourceModel) RefreshFromUpdateResponse(resp *operations.PutPublisherupgradeprofilesUpgradeProfileIDResponseBody) {

}
