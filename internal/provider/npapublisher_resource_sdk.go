// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk/pkg/models/operations"
)

func (r *NPAPublisherResourceModel) ToCreateSDKType() *operations.PostInfrastructurePublishersRequestBody {
	lbrokerconnect := new(bool)
	if !r.Lbrokerconnect.IsUnknown() && !r.Lbrokerconnect.IsNull() {
		*lbrokerconnect = r.Lbrokerconnect.ValueBool()
	} else {
		lbrokerconnect = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	publisherUpgradeProfilesID := new(int)
	if !r.PublisherUpgradeProfilesID.IsUnknown() && !r.PublisherUpgradeProfilesID.IsNull() {
		*publisherUpgradeProfilesID = int(r.PublisherUpgradeProfilesID.ValueInt64())
	} else {
		publisherUpgradeProfilesID = nil
	}
	var tags []operations.PostInfrastructurePublishersTags = nil
	for _, tagsItem := range r.Tags {
		tagName := new(string)
		if !tagsItem.TagName.IsUnknown() && !tagsItem.TagName.IsNull() {
			*tagName = tagsItem.TagName.ValueString()
		} else {
			tagName = nil
		}
		tags = append(tags, operations.PostInfrastructurePublishersTags{
			TagName: tagName,
		})
	}
	out := operations.PostInfrastructurePublishersRequestBody{
		Lbrokerconnect:             lbrokerconnect,
		Name:                       name,
		PublisherUpgradeProfilesID: publisherUpgradeProfilesID,
		Tags:                       tags,
	}
	return &out
}

func (r *NPAPublisherResourceModel) ToGetSDKType() *operations.PostInfrastructurePublishersRequestBody {
	out := r.ToCreateSDKType()
	return out
}

func (r *NPAPublisherResourceModel) ToUpdateSDKType() *operations.PutInfrastructurePublishersPublisherIDRequestBody {
	id := new(int)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = int(r.ID.ValueInt64())
	} else {
		id = nil
	}
	lbrokerconnect := new(bool)
	if !r.Lbrokerconnect.IsUnknown() && !r.Lbrokerconnect.IsNull() {
		*lbrokerconnect = r.Lbrokerconnect.ValueBool()
	} else {
		lbrokerconnect = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	var tags []operations.PutInfrastructurePublishersPublisherIDTags = nil
	for _, tagsItem := range r.Tags {
		tagID := new(int)
		if !tagsItem.TagID.IsUnknown() && !tagsItem.TagID.IsNull() {
			*tagID = int(tagsItem.TagID.ValueInt64())
		} else {
			tagID = nil
		}
		tagName := new(string)
		if !tagsItem.TagName.IsUnknown() && !tagsItem.TagName.IsNull() {
			*tagName = tagsItem.TagName.ValueString()
		} else {
			tagName = nil
		}
		tags = append(tags, operations.PutInfrastructurePublishersPublisherIDTags{
			TagID:   tagID,
			TagName: tagName,
		})
	}
	out := operations.PutInfrastructurePublishersPublisherIDRequestBody{
		ID:             id,
		Lbrokerconnect: lbrokerconnect,
		Name:           name,
		Tags:           tags,
	}
	return &out
}

func (r *NPAPublisherResourceModel) ToDeleteSDKType() *operations.PostInfrastructurePublishersRequestBody {
	out := r.ToCreateSDKType()
	return out
}

func (r *NPAPublisherResourceModel) RefreshFromGetResponse(resp *operations.GetInfrastructurePublishersPublisherIDData) {
	if resp.Assessment == nil {
		r.Assessment = types.StringNull()
	} else {
		assessmentResult, _ := json.Marshal(resp.Assessment)
		r.Assessment = types.StringValue(string(assessmentResult))
	}
	if resp.CommonName != nil {
		r.CommonName = types.StringValue(*resp.CommonName)
	} else {
		r.CommonName = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.Int64Value(int64(*resp.ID))
	} else {
		r.ID = types.Int64Null()
	}
	if resp.Lbrokerconnect != nil {
		r.Lbrokerconnect = types.BoolValue(*resp.Lbrokerconnect)
	} else {
		r.Lbrokerconnect = types.BoolNull()
	}
	if resp.Name != nil {
		r.Name = types.StringValue(*resp.Name)
	} else {
		r.Name = types.StringNull()
	}
	if resp.PublisherUpgradeProfileID != nil {
		r.PublisherUpgradeProfileID = types.Int64Value(int64(*resp.PublisherUpgradeProfileID))
	} else {
		r.PublisherUpgradeProfileID = types.Int64Null()
	}
	if resp.Registered != nil {
		r.Registered = types.BoolValue(*resp.Registered)
	} else {
		r.Registered = types.BoolNull()
	}
	if resp.Status != nil {
		r.Status = types.StringValue(string(*resp.Status))
	} else {
		r.Status = types.StringNull()
	}
	if resp.StitcherID != nil {
		r.StitcherID = types.Int64Value(int64(*resp.StitcherID))
	} else {
		r.StitcherID = types.Int64Null()
	}
	r.Tags = nil
	for _, tagsItem := range resp.Tags {
		var tags1 PostInfrastructurePublishersTags
		if tagsItem.TagID != nil {
			tags1.TagID = types.Int64Value(int64(*tagsItem.TagID))
		} else {
			tags1.TagID = types.Int64Null()
		}
		if tagsItem.TagName != nil {
			tags1.TagName = types.StringValue(*tagsItem.TagName)
		} else {
			tags1.TagName = types.StringNull()
		}
		r.Tags = append(r.Tags, tags1)
	}
}

func (r *NPAPublisherResourceModel) RefreshFromCreateResponse(resp *operations.PostInfrastructurePublishersData) {
	if resp.Assessment == nil {
		r.Assessment = types.StringNull()
	} else {
		assessmentResult, _ := json.Marshal(resp.Assessment)
		r.Assessment = types.StringValue(string(assessmentResult))
	}
	if resp.CommonName != nil {
		r.CommonName = types.StringValue(*resp.CommonName)
	} else {
		r.CommonName = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.Int64Value(int64(*resp.ID))
	} else {
		r.ID = types.Int64Null()
	}
	if resp.Lbrokerconnect != nil {
		r.Lbrokerconnect = types.BoolValue(*resp.Lbrokerconnect)
	} else {
		r.Lbrokerconnect = types.BoolNull()
	}
	if resp.Name != nil {
		r.Name = types.StringValue(*resp.Name)
	} else {
		r.Name = types.StringNull()
	}
	if resp.PublisherUpgradeProfileID != nil {
		r.PublisherUpgradeProfileID = types.Int64Value(int64(*resp.PublisherUpgradeProfileID))
	} else {
		r.PublisherUpgradeProfileID = types.Int64Null()
	}
	if resp.Registered != nil {
		r.Registered = types.BoolValue(*resp.Registered)
	} else {
		r.Registered = types.BoolNull()
	}
	if resp.Status != nil {
		r.Status = types.StringValue(string(*resp.Status))
	} else {
		r.Status = types.StringNull()
	}
	if resp.StitcherID != nil {
		r.StitcherID = types.Int64Value(int64(*resp.StitcherID))
	} else {
		r.StitcherID = types.Int64Null()
	}
	r.Tags = nil
	for _, tagsItem := range resp.Tags {
		var tags1 PostInfrastructurePublishersTags
		if tagsItem.TagID != nil {
			tags1.TagID = types.Int64Value(int64(*tagsItem.TagID))
		} else {
			tags1.TagID = types.Int64Null()
		}
		if tagsItem.TagName != nil {
			tags1.TagName = types.StringValue(*tagsItem.TagName)
		} else {
			tags1.TagName = types.StringNull()
		}
		r.Tags = append(r.Tags, tags1)
	}
}

func (r *NPAPublisherResourceModel) RefreshFromUpdateResponse(resp *operations.PutInfrastructurePublishersPublisherIDData) {
	if resp.Assessment == nil {
		r.Assessment = types.StringNull()
	} else {
		assessmentResult, _ := json.Marshal(resp.Assessment)
		r.Assessment = types.StringValue(string(assessmentResult))
	}
	if resp.CommonName != nil {
		r.CommonName = types.StringValue(*resp.CommonName)
	} else {
		r.CommonName = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.Int64Value(int64(*resp.ID))
	} else {
		r.ID = types.Int64Null()
	}
	if resp.Lbrokerconnect != nil {
		r.Lbrokerconnect = types.BoolValue(*resp.Lbrokerconnect)
	} else {
		r.Lbrokerconnect = types.BoolNull()
	}
	if resp.Name != nil {
		r.Name = types.StringValue(*resp.Name)
	} else {
		r.Name = types.StringNull()
	}
	if resp.PublisherUpgradeProfileID != nil {
		r.PublisherUpgradeProfileID = types.Int64Value(int64(*resp.PublisherUpgradeProfileID))
	} else {
		r.PublisherUpgradeProfileID = types.Int64Null()
	}
	if resp.Registered != nil {
		r.Registered = types.BoolValue(*resp.Registered)
	} else {
		r.Registered = types.BoolNull()
	}
	if resp.Status != nil {
		r.Status = types.StringValue(string(*resp.Status))
	} else {
		r.Status = types.StringNull()
	}
	if resp.StitcherID != nil {
		r.StitcherID = types.Int64Value(int64(*resp.StitcherID))
	} else {
		r.StitcherID = types.Int64Null()
	}
	r.Tags = nil
	for _, tagsItem := range resp.Tags {
		var tags1 PostInfrastructurePublishersTags
		if tagsItem.TagID != nil {
			tags1.TagID = types.Int64Value(int64(*tagsItem.TagID))
		} else {
			tags1.TagID = types.Int64Null()
		}
		if tagsItem.TagName != nil {
			tags1.TagName = types.StringValue(*tagsItem.TagName)
		} else {
			tags1.TagName = types.StringNull()
		}
		r.Tags = append(r.Tags, tags1)
	}
}
