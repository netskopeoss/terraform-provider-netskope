// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &NPAPrivateAppsTagsListDataSource{}
var _ datasource.DataSourceWithConfigure = &NPAPrivateAppsTagsListDataSource{}

func NewNPAPrivateAppsTagsListDataSource() datasource.DataSource {
	return &NPAPrivateAppsTagsListDataSource{}
}

// NPAPrivateAppsTagsListDataSource is the data source implementation.
type NPAPrivateAppsTagsListDataSource struct {
	client *sdk.TerraformProviderNs
}

// NPAPrivateAppsTagsListDataSourceModel describes the data model.
type NPAPrivateAppsTagsListDataSourceModel struct {
	Limit  types.Int32    `queryParam:"style=form,explode=true,name=limit" tfsdk:"limit"`
	Offset types.Int32    `queryParam:"style=form,explode=true,name=offset" tfsdk:"offset"`
	Query  types.String   `queryParam:"style=form,explode=true,name=query" tfsdk:"query"`
	Tags   []tfTypes.Tags `tfsdk:"tags"`
}

// Metadata returns the data source type name.
func (r *NPAPrivateAppsTagsListDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_private_apps_tags_list"
}

// Schema defines the schema for the data source.
func (r *NPAPrivateAppsTagsListDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "NPAPrivateAppsTagsList DataSource",

		Attributes: map[string]schema.Attribute{
			"limit": schema.Int32Attribute{
				Optional:    true,
				Description: `Number of results to limit the output by`,
			},
			"offset": schema.Int32Attribute{
				Optional:    true,
				Description: `Query offset`,
			},
			"query": schema.StringAttribute{
				Optional:    true,
				Description: `Return filtered result based on query`,
			},
			"tags": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"private_apps": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"allow_unauthenticated_cors": schema.BoolAttribute{
										Computed: true,
									},
									"allow_uri_bypass": schema.BoolAttribute{
										Computed: true,
									},
									"app_id": schema.Int32Attribute{
										Computed: true,
									},
									"app_name": schema.StringAttribute{
										Computed: true,
									},
									"app_option": schema.SingleNestedAttribute{
										Computed: true,
									},
									"clientless_access": schema.BoolAttribute{
										Computed: true,
									},
									"created_at": schema.StringAttribute{
										Computed: true,
									},
									"host": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.Int32Attribute{
										Computed: true,
									},
									"is_user_portal_app": schema.BoolAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"private_app_protocol": schema.StringAttribute{
										Computed: true,
									},
									"public_host": schema.StringAttribute{
										Computed: true,
									},
									"real_host": schema.StringAttribute{
										Computed: true,
									},
									"supplement_dns_for_osx": schema.BoolAttribute{
										Computed: true,
									},
									"trust_self_signed_certs": schema.BoolAttribute{
										Computed: true,
									},
									"updated_at": schema.StringAttribute{
										Computed: true,
									},
									"uribypass_header_value": schema.StringAttribute{
										Computed: true,
									},
									"use_publisher_dns": schema.BoolAttribute{
										Computed: true,
									},
								},
							},
						},
						"tag_id": schema.Int32Attribute{
							Computed: true,
						},
						"tag_name": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
		},
	}
}

func (r *NPAPrivateAppsTagsListDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderNs)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderNs, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPAPrivateAppsTagsListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *NPAPrivateAppsTagsListDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	query := new(string)
	if !data.Query.IsUnknown() && !data.Query.IsNull() {
		*query = data.Query.ValueString()
	} else {
		query = nil
	}
	offset := new(int)
	if !data.Offset.IsUnknown() && !data.Offset.IsNull() {
		*offset = int(data.Offset.ValueInt32())
	} else {
		offset = nil
	}
	limit := new(int)
	if !data.Limit.IsUnknown() && !data.Limit.IsNull() {
		*limit = int(data.Limit.ValueInt32())
	} else {
		limit = nil
	}
	request := operations.ListNPAPrivateTagsRequest{
		Query:  query,
		Offset: offset,
		Limit:  limit,
	}
	res, err := r.client.ListObjects(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Data != nil && res.Object.Data.Tags != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
