// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"ns/internal/sdk/pkg/models/operations"
)

func (r *NPAPolicyListDataSourceModel) RefreshFromGetResponse(resp *operations.GetPolicyNpaRulesResponseBody) {
	r.Data = nil
	for _, dataItem := range resp.Data {
		var data1 GetPolicyNpaRulesData
		if dataItem.RuleData == nil {
			data1.RuleData = nil
		} else {
			data1.RuleData = &PostPolicyNpaRulesRuleData{}
			if dataItem.RuleData.AccessMethod != nil {
				data1.RuleData.AccessMethod = types.StringValue(string(*dataItem.RuleData.AccessMethod))
			} else {
				data1.RuleData.AccessMethod = types.StringNull()
			}
			if dataItem.RuleData.BNegateNetLocation != nil {
				data1.RuleData.BNegateNetLocation = types.BoolValue(*dataItem.RuleData.BNegateNetLocation)
			} else {
				data1.RuleData.BNegateNetLocation = types.BoolNull()
			}
			if dataItem.RuleData.BNegateSrcCountries != nil {
				data1.RuleData.BNegateSrcCountries = types.BoolValue(*dataItem.RuleData.BNegateSrcCountries)
			} else {
				data1.RuleData.BNegateSrcCountries = types.BoolNull()
			}
			if dataItem.RuleData.Classification != nil {
				data1.RuleData.Classification = types.StringValue(*dataItem.RuleData.Classification)
			} else {
				data1.RuleData.Classification = types.StringNull()
			}
			data1.RuleData.DlpActions = nil
			for _, dlpActionsItem := range dataItem.RuleData.DlpActions {
				var dlpActions1 DlpActions
				dlpActions1.Actions = nil
				for _, v := range dlpActionsItem.Actions {
					dlpActions1.Actions = append(dlpActions1.Actions, types.StringValue(string(v)))
				}
				if dlpActionsItem.DlpProfile != nil {
					dlpActions1.DlpProfile = types.StringValue(*dlpActionsItem.DlpProfile)
				} else {
					dlpActions1.DlpProfile = types.StringNull()
				}
				data1.RuleData.DlpActions = append(data1.RuleData.DlpActions, dlpActions1)
			}
			if dataItem.RuleData.ExternalDlp != nil {
				data1.RuleData.ExternalDlp = types.BoolValue(*dataItem.RuleData.ExternalDlp)
			} else {
				data1.RuleData.ExternalDlp = types.BoolNull()
			}
			if dataItem.RuleData.JSONVersion != nil {
				data1.RuleData.JSONVersion = types.Int64Value(*dataItem.RuleData.JSONVersion)
			} else {
				data1.RuleData.JSONVersion = types.Int64Null()
			}
			if dataItem.RuleData.MatchCriteriaAction == nil {
				data1.RuleData.MatchCriteriaAction = nil
			} else {
				data1.RuleData.MatchCriteriaAction = &PostPolicyNpaRulesMatchCriteriaAction{}
				if dataItem.RuleData.MatchCriteriaAction.ActionName != nil {
					data1.RuleData.MatchCriteriaAction.ActionName = types.StringValue(string(*dataItem.RuleData.MatchCriteriaAction.ActionName))
				} else {
					data1.RuleData.MatchCriteriaAction.ActionName = types.StringNull()
				}
			}
			data1.RuleData.NetLocationObj = nil
			for _, v := range dataItem.RuleData.NetLocationObj {
				data1.RuleData.NetLocationObj = append(data1.RuleData.NetLocationObj, types.StringValue(v))
			}
			data1.RuleData.OrganizationUnits = nil
			for _, v := range dataItem.RuleData.OrganizationUnits {
				data1.RuleData.OrganizationUnits = append(data1.RuleData.OrganizationUnits, types.StringValue(v))
			}
			if dataItem.RuleData.PolicyType != nil {
				data1.RuleData.PolicyType = types.StringValue(string(*dataItem.RuleData.PolicyType))
			} else {
				data1.RuleData.PolicyType = types.StringNull()
			}
			data1.RuleData.PrivateAppIds = nil
			for _, v := range dataItem.RuleData.PrivateAppIds {
				data1.RuleData.PrivateAppIds = append(data1.RuleData.PrivateAppIds, types.StringValue(v))
			}
			data1.RuleData.PrivateApps = nil
			for _, v := range dataItem.RuleData.PrivateApps {
				data1.RuleData.PrivateApps = append(data1.RuleData.PrivateApps, types.StringValue(v))
			}
			data1.RuleData.PrivateAppsWithActivities = nil
			for _, privateAppsWithActivitiesItem := range dataItem.RuleData.PrivateAppsWithActivities {
				var privateAppsWithActivities1 PrivateAppsWithActivities
				privateAppsWithActivities1.Activities = nil
				for _, activitiesItem := range privateAppsWithActivitiesItem.Activities {
					var activities1 Activities
					if activitiesItem.Activity != nil {
						activities1.Activity = types.StringValue(string(*activitiesItem.Activity))
					} else {
						activities1.Activity = types.StringNull()
					}
					activities1.ListOfConstraints = nil
					for _, v := range activitiesItem.ListOfConstraints {
						activities1.ListOfConstraints = append(activities1.ListOfConstraints, types.StringValue(v))
					}
					privateAppsWithActivities1.Activities = append(privateAppsWithActivities1.Activities, activities1)
				}
				if privateAppsWithActivitiesItem.AppName != nil {
					privateAppsWithActivities1.AppName = types.StringValue(*privateAppsWithActivitiesItem.AppName)
				} else {
					privateAppsWithActivities1.AppName = types.StringNull()
				}
				data1.RuleData.PrivateAppsWithActivities = append(data1.RuleData.PrivateAppsWithActivities, privateAppsWithActivities1)
			}
			data1.RuleData.PrivateAppTagIds = nil
			for _, v := range dataItem.RuleData.PrivateAppTagIds {
				data1.RuleData.PrivateAppTagIds = append(data1.RuleData.PrivateAppTagIds, types.StringValue(v))
			}
			data1.RuleData.PrivateAppTags = nil
			for _, v := range dataItem.RuleData.PrivateAppTags {
				data1.RuleData.PrivateAppTags = append(data1.RuleData.PrivateAppTags, types.StringValue(v))
			}
			if dataItem.RuleData.ShowDlpProfileActionTable != nil {
				data1.RuleData.ShowDlpProfileActionTable = types.BoolValue(*dataItem.RuleData.ShowDlpProfileActionTable)
			} else {
				data1.RuleData.ShowDlpProfileActionTable = types.BoolNull()
			}
			data1.RuleData.SrcCountries = nil
			for _, v := range dataItem.RuleData.SrcCountries {
				data1.RuleData.SrcCountries = append(data1.RuleData.SrcCountries, types.StringValue(v))
			}
			data1.RuleData.UserGroups = nil
			for _, v := range dataItem.RuleData.UserGroups {
				data1.RuleData.UserGroups = append(data1.RuleData.UserGroups, types.StringValue(v))
			}
			data1.RuleData.Users = nil
			for _, v := range dataItem.RuleData.Users {
				data1.RuleData.Users = append(data1.RuleData.Users, types.StringValue(v))
			}
			if dataItem.RuleData.UserType != nil {
				data1.RuleData.UserType = types.StringValue(string(*dataItem.RuleData.UserType))
			} else {
				data1.RuleData.UserType = types.StringNull()
			}
			if dataItem.RuleData.Version != nil {
				data1.RuleData.Version = types.Int64Value(*dataItem.RuleData.Version)
			} else {
				data1.RuleData.Version = types.Int64Null()
			}
		}
		if dataItem.RuleID != nil {
			data1.RuleID = types.Int64Value(*dataItem.RuleID)
		} else {
			data1.RuleID = types.Int64Null()
		}
		if dataItem.RuleName != nil {
			data1.RuleName = types.StringValue(*dataItem.RuleName)
		} else {
			data1.RuleName = types.StringNull()
		}
		r.Data = append(r.Data, data1)
	}
}
