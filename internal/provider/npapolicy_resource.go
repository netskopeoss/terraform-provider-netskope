// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"ns/internal/sdk"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"ns/internal/sdk/pkg/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &NPAPolicyResource{}
var _ resource.ResourceWithImportState = &NPAPolicyResource{}

func NewNPAPolicyResource() resource.Resource {
	return &NPAPolicyResource{}
}

// NPAPolicyResource defines the resource implementation.
type NPAPolicyResource struct {
	client *sdk.SDK
}

// NPAPolicyResourceModel describes the resource data model.
type NPAPolicyResourceModel struct {
	Description types.String                 `tfsdk:"description"`
	Enabled     types.String                 `tfsdk:"enabled"`
	GroupName   types.String                 `tfsdk:"group_name"`
	RuleData    *PostPolicyNpaRulesRuleData  `tfsdk:"rule_data"`
	RuleID      types.Int64                  `tfsdk:"rule_id"`
	RuleName    types.String                 `tfsdk:"rule_name"`
	RuleOrder   *PostPolicyNpaRulesRuleOrder `tfsdk:"rule_order"`
}

func (r *NPAPolicyResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_policy"
}

func (r *NPAPolicyResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "NPAPolicy Resource",

		Attributes: map[string]schema.Attribute{
			"description": schema.StringAttribute{
				Optional: true,
			},
			"enabled": schema.StringAttribute{
				Optional: true,
			},
			"group_name": schema.StringAttribute{
				Optional: true,
			},
			"rule_data": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"access_method": schema.StringAttribute{
						Computed: true,
						Optional: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"Client",
								"Clientless",
							),
						},
						Description: `must be one of ["Client", "Clientless"]`,
					},
					"b_negate_net_location": schema.BoolAttribute{
						Computed: true,
						Optional: true,
					},
					"b_negate_src_countries": schema.BoolAttribute{
						Computed: true,
						Optional: true,
					},
					"classification": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"dlp_actions": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"actions": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"dlp_profile": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
						},
					},
					"external_dlp": schema.BoolAttribute{
						Computed: true,
						Optional: true,
					},
					"json_version": schema.Int64Attribute{
						Computed: true,
						Optional: true,
					},
					"match_criteria_action": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"action_name": schema.StringAttribute{
								Computed: true,
								Optional: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"allow",
										"block",
									),
								},
								Description: `must be one of ["allow", "block"]`,
							},
						},
					},
					"net_location_obj": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"organization_units": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"policy_type": schema.StringAttribute{
						Computed: true,
						Optional: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"private-app",
							),
						},
						Description: `must be one of ["private-app"]`,
					},
					"private_app_ids": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"private_apps": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"private_apps_with_activities": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"activities": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"activity": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"any",
													),
												},
												Description: `must be one of ["any"]`,
											},
											"list_of_constraints": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
										},
									},
								},
								"app_name": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
						},
					},
					"private_app_tag_ids": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"private_app_tags": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"show_dlp_profile_action_table": schema.BoolAttribute{
						Computed: true,
						Optional: true,
					},
					"src_countries": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"user_groups": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"users": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"user_type": schema.StringAttribute{
						Computed: true,
						Optional: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"user",
							),
						},
						Description: `must be one of ["user"]`,
					},
					"version": schema.Int64Attribute{
						Computed: true,
						Optional: true,
					},
				},
			},
			"rule_id": schema.Int64Attribute{
				Computed: true,
			},
			"rule_name": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"rule_order": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"order": schema.StringAttribute{
						Optional: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"top",
								"bottom",
								"before",
								"after",
							),
						},
						Description: `must be one of ["top", "bottom", "before", "after"]`,
					},
					"position": schema.Int64Attribute{
						Optional: true,
					},
					"rule_id": schema.Int64Attribute{
						Optional: true,
					},
					"rule_name": schema.StringAttribute{
						Optional: true,
					},
				},
			},
		},
	}
}

func (r *NPAPolicyResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPAPolicyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *NPAPolicyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToCreateSDKType()
	res, err := r.client.PostPolicyNpaRules(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.TwoHundredApplicationJSONObject == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.TwoHundredApplicationJSONObject)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPolicyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *NPAPolicyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.RuleID.ValueInt64()
	request := operations.GetPolicyNpaRulesIDRequest{
		ID: id,
	}
	res, err := r.client.GetPolicyNpaRulesID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.TwoHundredApplicationJSONObject == nil || res.TwoHundredApplicationJSONObject.Data == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.TwoHundredApplicationJSONObject.Data)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPolicyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *NPAPolicyResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	requestBody := *data.ToUpdateSDKType()
	id := data.RuleID.ValueInt64()
	request := operations.PatchPolicyNpaRulesIDRequest{
		RequestBody: requestBody,
		ID:          id,
	}
	res, err := r.client.PatchPolicyNpaRulesID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.TwoHundredApplicationJSONObject == nil || res.TwoHundredApplicationJSONObject.Data == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromUpdateResponse(res.TwoHundredApplicationJSONObject.Data)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPolicyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *NPAPolicyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.RuleID.ValueInt64()
	request := operations.DeletePolicyNpaRulesIDRequest{
		ID: id,
	}
	res, err := r.client.DeletePolicyNpaRulesID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *NPAPolicyResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("rule_id"), req, resp)
}
