// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &NPAPolicyGroupsListDataSource{}
var _ datasource.DataSourceWithConfigure = &NPAPolicyGroupsListDataSource{}

func NewNPAPolicyGroupsListDataSource() datasource.DataSource {
	return &NPAPolicyGroupsListDataSource{}
}

// NPAPolicyGroupsListDataSource is the data source implementation.
type NPAPolicyGroupsListDataSource struct {
	client *sdk.TerraformProviderNs
}

// NPAPolicyGroupsListDataSourceModel describes the data model.
type NPAPolicyGroupsListDataSourceModel struct {
	Data      []tfTypes.NpaPolicygroupResponseItem `tfsdk:"data"`
	Fields    types.String                         `tfsdk:"fields"`
	Filter    types.String                         `tfsdk:"filter"`
	Limit     types.Int64                          `tfsdk:"limit"`
	Offset    types.Int64                          `tfsdk:"offset"`
	Sortby    types.String                         `tfsdk:"sortby"`
	Sortorder types.String                         `tfsdk:"sortorder"`
	Status    types.String                         `tfsdk:"status"`
}

// Metadata returns the data source type name.
func (r *NPAPolicyGroupsListDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_policy_groups_list"
}

// Schema defines the schema for the data source.
func (r *NPAPolicyGroupsListDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "NPAPolicyGroupsList DataSource",

		Attributes: map[string]schema.Attribute{
			"data": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"can_be_edited_deleted": schema.StringAttribute{
							Computed: true,
						},
						"group_id": schema.StringAttribute{
							Computed: true,
						},
						"group_name": schema.StringAttribute{
							Computed: true,
						},
						"group_pinned_id": schema.StringAttribute{
							Computed: true,
						},
						"group_prod_id": schema.StringAttribute{
							Computed: true,
						},
						"group_type": schema.StringAttribute{
							Computed: true,
						},
						"modify_time": schema.StringAttribute{
							Computed: true,
						},
						"modify_type": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"fields": schema.StringAttribute{
				Optional:    true,
				Description: `Return values only from specified fields`,
			},
			"filter": schema.StringAttribute{
				Optional:    true,
				Description: `Query string based on query operaters`,
			},
			"limit": schema.Int64Attribute{
				Optional:    true,
				Description: `Max number of policy groups to retrieve. Default will be all policy groups.`,
			},
			"offset": schema.Int64Attribute{
				Optional:    true,
				Description: `The offset of the first policy group in the list to retrieve.`,
			},
			"sortby": schema.StringAttribute{
				Optional:    true,
				Description: `Sort retrieved policy group by specified field. Default is policy group id`,
			},
			"sortorder": schema.StringAttribute{
				Optional:    true,
				Description: `Sort in either asc or desc order. The default is asc order`,
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *NPAPolicyGroupsListDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderNs)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderNs, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPAPolicyGroupsListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *NPAPolicyGroupsListDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	fields := new(string)
	if !data.Fields.IsUnknown() && !data.Fields.IsNull() {
		*fields = data.Fields.ValueString()
	} else {
		fields = nil
	}
	filter := new(string)
	if !data.Filter.IsUnknown() && !data.Filter.IsNull() {
		*filter = data.Filter.ValueString()
	} else {
		filter = nil
	}
	limit := new(int64)
	if !data.Limit.IsUnknown() && !data.Limit.IsNull() {
		*limit = data.Limit.ValueInt64()
	} else {
		limit = nil
	}
	offset := new(int64)
	if !data.Offset.IsUnknown() && !data.Offset.IsNull() {
		*offset = data.Offset.ValueInt64()
	} else {
		offset = nil
	}
	sortby := new(string)
	if !data.Sortby.IsUnknown() && !data.Sortby.IsNull() {
		*sortby = data.Sortby.ValueString()
	} else {
		sortby = nil
	}
	sortorder := new(string)
	if !data.Sortorder.IsUnknown() && !data.Sortorder.IsNull() {
		*sortorder = data.Sortorder.ValueString()
	} else {
		sortorder = nil
	}
	request := operations.GetNPAPolicyGroupsRequest{
		Fields:    fields,
		Filter:    filter,
		Limit:     limit,
		Offset:    offset,
		Sortby:    sortby,
		Sortorder: sortorder,
	}
	res, err := r.client.NPAPolicyGroups.ListObjects(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromOperationsGetNPAPolicyGroupsResponseBody(res.Object)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
