// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int32default"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/netskopeoss/terraform-provider-netskope/internal/provider/types"
	"github.com/netskopeoss/terraform-provider-netskope/internal/sdk"
	"math"
	"strconv"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &NPAPublisherResource{}
var _ resource.ResourceWithImportState = &NPAPublisherResource{}

func NewNPAPublisherResource() resource.Resource {
	return &NPAPublisherResource{}
}

// NPAPublisherResource defines the resource implementation.
type NPAPublisherResource struct {
	// Provider configured SDK client.
	client *sdk.TerraformProviderNs
}

// NPAPublisherResourceModel describes the resource data model.
type NPAPublisherResourceModel struct {
	AppsCount                  types.Int32                                   `tfsdk:"apps_count"`
	Assessment                 *tfTypes.PublisherResponseAssessment          `tfsdk:"assessment"`
	Capabilities               *tfTypes.PublisherResponseCapabilities        `tfsdk:"capabilities"`
	CommonName                 types.String                                  `tfsdk:"common_name"`
	ConnectedApps              []types.String                                `tfsdk:"connected_apps"`
	Lbrokerconnect             types.Bool                                    `tfsdk:"lbrokerconnect"`
	PublisherID                types.Int32                                   `tfsdk:"publisher_id"`
	PublisherName              types.String                                  `tfsdk:"publisher_name"`
	PublisherUpgradeProfilesID types.Int32                                   `tfsdk:"publisher_upgrade_profiles_id"`
	Registered                 types.Bool                                    `tfsdk:"registered"`
	Status                     types.String                                  `tfsdk:"status"`
	SticherPop                 types.String                                  `tfsdk:"sticher_pop"`
	StitcherID                 types.Int32                                   `tfsdk:"stitcher_id"`
	UpgradeFailedReason        *tfTypes.PublisherResponseUpgradeFailedReason `tfsdk:"upgrade_failed_reason"`
	UpgradeRequest             types.Bool                                    `tfsdk:"upgrade_request"`
	UpgradeStatus              *tfTypes.PublisherResponseUpgradeStatus       `tfsdk:"upgrade_status"`
}

func (r *NPAPublisherResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_publisher"
}

func (r *NPAPublisherResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "The NPA Publisher is a software package that enables private application\nconnectivity between your data center and the Netskope cloud. It is a crucial \ncomponent of Netskopeâ€™s Private Access (NPA) solution, which provides zero-trust \nnetwork access (ZTNA) to private applications and data in hybrid IT environments.\n\nThis resource supports the creation of the Publisher objects.\n\nFeatures may require additional licensing, please work with account team to enable.\n",
		Attributes: map[string]schema.Attribute{
			"apps_count": schema.Int32Attribute{
				Computed: true,
			},
			"assessment": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"ca_certs_status": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"hashes": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"last_modified": schema.Float64Attribute{
								Computed: true,
							},
						},
					},
					"eee_support": schema.BoolAttribute{
						Computed: true,
					},
					"hdd_free": schema.StringAttribute{
						Computed: true,
					},
					"hdd_total": schema.StringAttribute{
						Computed: true,
					},
					"ip_address": schema.StringAttribute{
						Computed: true,
					},
					"latency": schema.Float64Attribute{
						Computed: true,
					},
					"version": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"capabilities": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"auto_upgrade": schema.BoolAttribute{
						Computed: true,
					},
					"dtls": schema.BoolAttribute{
						Computed: true,
					},
					"eee": schema.BoolAttribute{
						Computed: true,
					},
					"nwa_ba": schema.BoolAttribute{
						Computed: true,
					},
					"pull_nsconfig": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"orgkey_exist": schema.BoolAttribute{
								Computed: true,
							},
							"orguri_exist": schema.BoolAttribute{
								Computed: true,
							},
						},
					},
				},
			},
			"common_name": schema.StringAttribute{
				Computed: true,
			},
			"connected_apps": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"lbrokerconnect": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(false),
				Description: `Allow this publisher to be stitched to Local Broker. Default: false`,
			},
			"publisher_id": schema.Int32Attribute{
				Computed:    true,
				Description: `publisher id`,
			},
			"publisher_name": schema.StringAttribute{
				Required:    true,
				Description: `The name of the Publisher as seen in the UI`,
			},
			"publisher_upgrade_profiles_id": schema.Int32Attribute{
				Computed:    true,
				Optional:    true,
				Default:     int32default.StaticInt32(1),
				Description: `The ID of the upgrade profile to manage this publisher. Default: 1`,
			},
			"registered": schema.BoolAttribute{
				Computed: true,
			},
			"status": schema.StringAttribute{
				Computed:    true,
				Description: `must be one of ["connected", "not registered"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"connected",
						"not registered",
					),
				},
			},
			"sticher_pop": schema.StringAttribute{
				Computed: true,
			},
			"stitcher_id": schema.Int32Attribute{
				Computed: true,
			},
			"upgrade_failed_reason": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"detail": schema.StringAttribute{
						Computed: true,
					},
					"error_code": schema.Float64Attribute{
						Computed: true,
					},
					"timestamp": schema.Float64Attribute{
						Computed: true,
					},
					"version": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"upgrade_request": schema.BoolAttribute{
				Computed: true,
			},
			"upgrade_status": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"upstat": schema.StringAttribute{
						Computed: true,
					},
				},
			},
		},
	}
}

func (r *NPAPublisherResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderNs)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderNs, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPAPublisherResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *NPAPublisherResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedPublisherPostRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.NPAPublisher.Create(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PublisherResponse != nil && res.PublisherResponse.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPublisherResponseData(ctx, res.PublisherResponse.Data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPublisherResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *NPAPublisherResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetNPAPublisherByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.NPAPublisher.Read(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PublisherResponse != nil && res.PublisherResponse.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPublisherResponseData(ctx, res.PublisherResponse.Data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPublisherResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *NPAPublisherResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateNPAPublisherByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.NPAPublisher.Update(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PublisherResponse != nil && res.PublisherResponse.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPublisherResponseData(ctx, res.PublisherResponse.Data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetNPAPublisherByIDRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.NPAPublisher.Read(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.PublisherResponse != nil && res1.PublisherResponse.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPublisherResponseData(ctx, res1.PublisherResponse.Data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPublisherResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *NPAPublisherResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteNPAPublishersRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.NPAPublisher.Delete(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *NPAPublisherResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	publisherID, err := strconv.Atoi(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Invalid ID", fmt.Sprintf("ID must be an integer but was %s", req.ID))
		return
	}

	if publisherID < math.MinInt32 || publisherID > math.MaxInt32 {
		resp.Diagnostics.AddError("Invalid ID", fmt.Sprintf("ID must be an int32 but was %d", publisherID))
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("publisher_id"), publisherID)...)
}
