// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &NPAPublishersListDataSource{}
var _ datasource.DataSourceWithConfigure = &NPAPublishersListDataSource{}

func NewNPAPublishersListDataSource() datasource.DataSource {
	return &NPAPublishersListDataSource{}
}

// NPAPublishersListDataSource is the data source implementation.
type NPAPublishersListDataSource struct {
	client *sdk.TerraformProviderNs
}

// NPAPublishersListDataSourceModel describes the data model.
type NPAPublishersListDataSourceModel struct {
	Data  *tfTypes.PublishersGetResponseData `tfsdk:"data"`
	Total types.Int32                        `tfsdk:"total"`
}

// Metadata returns the data source type name.
func (r *NPAPublishersListDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_publishers_list"
}

// Schema defines the schema for the data source.
func (r *NPAPublishersListDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "The NPA Publisher is a software package that enables private application\nconnectivity between your data center and the Netskope cloud. It is a crucial \ncomponent of Netskopeâ€™s Private Access (NPA) solution, which provides zero-trust \nnetwork access (ZTNA) to private applications and data in hybrid IT environments.\n\nThis data source supports the list of all Publisher objects.\n\nFeatures may require additional licensing, please work with account team to enable.\n",

		Attributes: map[string]schema.Attribute{
			"data": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"publishers": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"apps_count": schema.Int32Attribute{
									Computed: true,
								},
								"assessment": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"ca_certs_status": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"hashes": schema.ListAttribute{
													Computed:    true,
													ElementType: types.StringType,
												},
												"last_modified": schema.Int32Attribute{
													Computed: true,
												},
											},
										},
										"eee_support": schema.BoolAttribute{
											Computed: true,
										},
										"hdd_free": schema.StringAttribute{
											Computed: true,
										},
										"hdd_total": schema.StringAttribute{
											Computed: true,
										},
										"ip_address": schema.StringAttribute{
											Computed: true,
										},
										"latency": schema.Int32Attribute{
											Computed: true,
										},
										"version": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"capabilities": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"auto_upgrade": schema.BoolAttribute{
											Computed: true,
										},
										"dtls": schema.BoolAttribute{
											Computed: true,
										},
										"eee": schema.BoolAttribute{
											Computed: true,
										},
										"nwa_ba": schema.BoolAttribute{
											Computed: true,
										},
										"pull_nsconfig": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"orgkey_exist": schema.BoolAttribute{
													Computed: true,
												},
												"orguri_exist": schema.BoolAttribute{
													Computed: true,
												},
											},
										},
									},
								},
								"common_name": schema.StringAttribute{
									Computed: true,
								},
								"connected_apps": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"lbrokerconnect": schema.BoolAttribute{
									Computed: true,
								},
								"publisher_id": schema.Int32Attribute{
									Computed: true,
								},
								"publisher_name": schema.StringAttribute{
									Computed: true,
								},
								"publisher_upgrade_profile_id": schema.Int32Attribute{
									Computed: true,
								},
								"registered": schema.BoolAttribute{
									Computed: true,
								},
								"status": schema.StringAttribute{
									Computed: true,
								},
								"stitcher_id": schema.Int32Attribute{
									Computed: true,
								},
								"stitcher_pop": schema.StringAttribute{
									Computed: true,
								},
								"upgrade_failed_reason": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"detail": schema.StringAttribute{
											Computed: true,
										},
										"error_code": schema.Int32Attribute{
											Computed: true,
										},
										"timestamp": schema.Int32Attribute{
											Computed: true,
										},
										"version": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"upgrade_request": schema.BoolAttribute{
									Computed: true,
								},
								"upgrade_status": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"upstat": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
					},
				},
			},
			"total": schema.Int32Attribute{
				Computed: true,
			},
		},
	}
}

func (r *NPAPublishersListDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderNs)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderNs, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPAPublishersListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *NPAPublishersListDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	res, err := r.client.NPAPublishers.ListObjects(ctx)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PublishersGetResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPublishersGetResponse(res.PublishersGetResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
