// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"ns/internal/sdk"
	"ns/internal/sdk/pkg/models/operations"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &NPAPolicyDataSource{}
var _ datasource.DataSourceWithConfigure = &NPAPolicyDataSource{}

func NewNPAPolicyDataSource() datasource.DataSource {
	return &NPAPolicyDataSource{}
}

// NPAPolicyDataSource is the data source implementation.
type NPAPolicyDataSource struct {
	client *sdk.SDK
}

// NPAPolicyDataSourceModel describes the data model.
type NPAPolicyDataSourceModel struct {
	RuleData *PostNpaRulesRuleData `tfsdk:"rule_data"`
	RuleID   types.Int64           `tfsdk:"rule_id"`
	RuleName types.String          `tfsdk:"rule_name"`
}

// Metadata returns the data source type name.
func (r *NPAPolicyDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_policy"
}

// Schema defines the schema for the data source.
func (r *NPAPolicyDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "NPAPolicy DataSource",

		Attributes: map[string]schema.Attribute{
			"rule_data": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"access_method": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"Client",
								"Clientless",
							),
						},
						Description: `must be one of ["Client", "Clientless"]`,
					},
					"b_negate_net_location": schema.BoolAttribute{
						Computed: true,
					},
					"b_negate_src_countries": schema.BoolAttribute{
						Computed: true,
					},
					"classification": schema.StringAttribute{
						Computed: true,
					},
					"dlp_actions": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"actions": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"dlp_profile": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"external_dlp": schema.BoolAttribute{
						Computed: true,
					},
					"json_version": schema.Int64Attribute{
						Computed: true,
					},
					"match_criteria_action": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"action_name": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"allow",
										"block",
									),
								},
								Description: `must be one of ["allow", "block"]`,
							},
						},
					},
					"net_location_obj": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"organization_units": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"policy_type": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"private-app",
							),
						},
						Description: `must be one of ["private-app"]`,
					},
					"private_app_ids": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"private_apps": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"private_apps_with_activities": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"activities": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"activity": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"any",
													),
												},
												Description: `must be one of ["any"]`,
											},
											"list_of_constraints": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
								},
								"app_name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"private_app_tag_ids": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"private_app_tags": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"show_dlp_profile_action_table": schema.BoolAttribute{
						Computed: true,
					},
					"src_countries": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"user_groups": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"users": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"user_type": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"user",
							),
						},
						Description: `must be one of ["user"]`,
					},
					"version": schema.Int64Attribute{
						Computed: true,
					},
				},
			},
			"rule_id": schema.Int64Attribute{
				Required:    true,
				Description: `npa policy id`,
			},
			"rule_name": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *NPAPolicyDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPAPolicyDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *NPAPolicyDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.RuleID.ValueInt64()
	request := operations.GetNpaRulesIDRequest{
		ID: id,
	}
	res, err := r.client.GetNpaRulesID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.TwoHundredApplicationJSONObject == nil || res.TwoHundredApplicationJSONObject.Data == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.TwoHundredApplicationJSONObject.Data)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
