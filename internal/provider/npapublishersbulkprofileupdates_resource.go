// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &NPAPublishersBulkProfileUpdatesResource{}
var _ resource.ResourceWithImportState = &NPAPublishersBulkProfileUpdatesResource{}

func NewNPAPublishersBulkProfileUpdatesResource() resource.Resource {
	return &NPAPublishersBulkProfileUpdatesResource{}
}

// NPAPublishersBulkProfileUpdatesResource defines the resource implementation.
type NPAPublishersBulkProfileUpdatesResource struct {
	// Provider configured SDK client.
	client *sdk.TerraformProviderNs
}

// NPAPublishersBulkProfileUpdatesResourceModel describes the resource data model.
type NPAPublishersBulkProfileUpdatesResourceModel struct {
	Data       *tfTypes.PublisherUpgradeProfileBulkResponseData      `tfsdk:"data"`
	Publishers *tfTypes.PublisherUpgradeProfileBulkRequestPublishers `tfsdk:"publishers"`
	Total      types.Int32                                           `tfsdk:"total"`
}

func (r *NPAPublishersBulkProfileUpdatesResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_publishers_bulk_profile_updates"
}

func (r *NPAPublishersBulkProfileUpdatesResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "The NPA Publisher is a software package that enables private application\nconnectivity between your data center and the Netskope cloud. It is a crucial\ncomponent of Netskopeâ€™s Private Access (NPA) solution, which provides zero-trust\nnetwork access (ZTNA) to private applications and data in hybrid IT environments.\n\nThis resource updates bulk updates publishers to an upgrade profile.\n",
		Attributes: map[string]schema.Attribute{
			"data": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"publishers": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"apps_count": schema.Int32Attribute{
									Computed: true,
								},
								"assessment": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"ca_certs_status": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"hashes": schema.ListAttribute{
													Computed:    true,
													ElementType: types.StringType,
												},
												"last_modified": schema.Int32Attribute{
													Computed: true,
												},
											},
										},
										"eee_support": schema.BoolAttribute{
											Computed: true,
										},
										"hdd_free": schema.StringAttribute{
											Computed: true,
										},
										"hdd_total": schema.StringAttribute{
											Computed: true,
										},
										"ip_address": schema.StringAttribute{
											Computed: true,
										},
										"latency": schema.Int32Attribute{
											Computed: true,
										},
										"version": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"capabilities": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"auto_upgrade": schema.BoolAttribute{
											Computed: true,
										},
										"dtls": schema.BoolAttribute{
											Computed: true,
										},
										"eee": schema.BoolAttribute{
											Computed: true,
										},
										"nwa_ba": schema.BoolAttribute{
											Computed: true,
										},
										"pull_nsconfig": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"orgkey_exist": schema.BoolAttribute{
													Computed: true,
												},
												"orguri_exist": schema.BoolAttribute{
													Computed: true,
												},
											},
										},
									},
								},
								"common_name": schema.StringAttribute{
									Computed: true,
								},
								"connected_apps": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"lbrokerconnect": schema.BoolAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"publisher_id": schema.Int32Attribute{
									Computed: true,
								},
								"publisher_upgrade_profiles_id": schema.Int32Attribute{
									Computed: true,
								},
								"registered": schema.BoolAttribute{
									Computed: true,
								},
								"status": schema.StringAttribute{
									Computed: true,
								},
								"sticher_pop": schema.StringAttribute{
									Computed: true,
								},
								"stitcher_id": schema.Int32Attribute{
									Computed: true,
								},
								"upgrade_failed_reason": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"detail": schema.StringAttribute{
											Computed: true,
										},
										"error_code": schema.Int32Attribute{
											Computed: true,
										},
										"timestamp": schema.Int32Attribute{
											Computed: true,
										},
										"version": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"upgrade_request": schema.BoolAttribute{
									Computed: true,
								},
								"upgrade_status": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"upstat": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
					},
				},
			},
			"publishers": schema.SingleNestedAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Attributes: map[string]schema.Attribute{
					"apply": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"publisher_upgrade_profiles_id": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Please use the ` + "`" + `external_id` + "`" + ` of the upgrade profile for this value. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
					},
					"publisher_id": schema.ListAttribute{
						Required: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
						},
						ElementType: types.StringType,
						Description: `This is an array of publisher ` + "`" + `id` + "`" + ` values. Requires replacement if changed.`,
					},
				},
				Description: `Requires replacement if changed.`,
			},
			"total": schema.Int32Attribute{
				Computed: true,
			},
		},
	}
}

func (r *NPAPublishersBulkProfileUpdatesResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderNs)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderNs, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPAPublishersBulkProfileUpdatesResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *NPAPublishersBulkProfileUpdatesResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedPublisherUpgradeProfileBulkRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.BulkupdateNPAPublishers(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PublisherUpgradeProfileBulkResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPublisherUpgradeProfileBulkResponse(ctx, res.PublisherUpgradeProfileBulkResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPublishersBulkProfileUpdatesResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *NPAPublishersBulkProfileUpdatesResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPublishersBulkProfileUpdatesResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *NPAPublishersBulkProfileUpdatesResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPublishersBulkProfileUpdatesResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *NPAPublishersBulkProfileUpdatesResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *NPAPublishersBulkProfileUpdatesResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource npa_publishers_bulk_profile_updates.")
}
