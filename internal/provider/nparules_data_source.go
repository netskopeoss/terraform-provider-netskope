// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &NPARulesDataSource{}
var _ datasource.DataSourceWithConfigure = &NPARulesDataSource{}

func NewNPARulesDataSource() datasource.DataSource {
	return &NPARulesDataSource{}
}

// NPARulesDataSource is the data source implementation.
type NPARulesDataSource struct {
	client *sdk.TerraformProviderNs
}

// NPARulesDataSourceModel describes the data model.
type NPARulesDataSourceModel struct {
	Data   *tfTypes.NpaPolicyResponseItem `tfsdk:"data"`
	Fields types.String                   `tfsdk:"fields"`
	RuleID types.Int64                    `tfsdk:"rule_id"`
	Status types.String                   `tfsdk:"status"`
}

// Metadata returns the data source type name.
func (r *NPARulesDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_rules"
}

// Schema defines the schema for the data source.
func (r *NPARulesDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "NPARules DataSource",

		Attributes: map[string]schema.Attribute{
			"data": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"group_id": schema.StringAttribute{
						Computed: true,
					},
					"rule_data": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"access_method": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"b_negate_net_location": schema.BoolAttribute{
								Computed: true,
							},
							"b_negate_src_countries": schema.BoolAttribute{
								Computed: true,
							},
							"classification": schema.StringAttribute{
								Computed: true,
							},
							"device_classification_id": schema.ListAttribute{
								Computed:    true,
								ElementType: types.Int64Type,
							},
							"dlp_actions": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"actions": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
										},
										"dlp_profile": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"external_dlp": schema.BoolAttribute{
								Computed: true,
							},
							"json_version": schema.Int64Attribute{
								Computed: true,
							},
							"match_criteria_action": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"action_name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"net_location_obj": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"organization_units": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"policy_type": schema.StringAttribute{
								Computed: true,
							},
							"private_app_tag_ids": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"private_app_tags": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"private_apps": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"private_apps_with_activities": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"activities": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"activity": schema.StringAttribute{
														Computed: true,
													},
													"list_of_constraints": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
													},
												},
											},
										},
										"app_name": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"show_dlp_profile_action_table": schema.BoolAttribute{
								Computed: true,
							},
							"src_countries": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"tss_actions": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"actions": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"action_name": schema.StringAttribute{
														Computed: true,
													},
													"remediation_profile": schema.StringAttribute{
														Computed: true,
													},
													"severity": schema.StringAttribute{
														Computed: true,
													},
													"template": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
										"tss_profile": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
										},
									},
								},
							},
							"tss_profile": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"user_groups": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"user_type": schema.StringAttribute{
								Computed: true,
							},
							"users": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"version": schema.Int64Attribute{
								Computed: true,
							},
						},
					},
					"rule_id": schema.Int64Attribute{
						Computed: true,
					},
					"rule_name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"fields": schema.StringAttribute{
				Optional:    true,
				Description: `Return values only from specified fields`,
			},
			"rule_id": schema.Int64Attribute{
				Required:    true,
				Description: `npa policy id`,
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *NPARulesDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderNs)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderNs, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPARulesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *NPARulesDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var ruleID int
	ruleID = int(data.RuleID.ValueInt64())

	fields := new(string)
	if !data.Fields.IsUnknown() && !data.Fields.IsNull() {
		*fields = data.Fields.ValueString()
	} else {
		fields = nil
	}
	request := operations.GetNPARulesByIDRequest{
		RuleID: ruleID,
		Fields: fields,
	}
	res, err := r.client.NPARules.GetNPARulesByID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromOperationsGetNPARulesByIDResponseBody(res.Object)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
