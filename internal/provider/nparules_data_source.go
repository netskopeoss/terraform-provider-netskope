// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &NPARulesDataSource{}
var _ datasource.DataSourceWithConfigure = &NPARulesDataSource{}

func NewNPARulesDataSource() datasource.DataSource {
	return &NPARulesDataSource{}
}

// NPARulesDataSource is the data source implementation.
type NPARulesDataSource struct {
	client *sdk.TerraformProviderNs
}

// NPARulesDataSourceModel describes the data model.
type NPARulesDataSourceModel struct {
	Enabled    types.String      `tfsdk:"enabled"`
	Fields     types.String      `tfsdk:"fields"`
	ModifyBy   types.String      `tfsdk:"modify_by"`
	ModifyTime types.String      `tfsdk:"modify_time"`
	ModifyType types.String      `tfsdk:"modify_type"`
	PolicyType types.String      `tfsdk:"policy_type"`
	RuleData   *tfTypes.RuleData `tfsdk:"rule_data"`
	RuleID     types.String      `tfsdk:"rule_id"`
	RuleName   types.String      `tfsdk:"rule_name"`
	Status     types.String      `tfsdk:"status"`
}

// Metadata returns the data source type name.
func (r *NPARulesDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_rules"
}

// Schema defines the schema for the data source.
func (r *NPARulesDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "NPARules DataSource",

		Attributes: map[string]schema.Attribute{
			"enabled": schema.StringAttribute{
				Computed: true,
			},
			"fields": schema.StringAttribute{
				Optional:    true,
				Description: `Return values only from specified fields`,
			},
			"modify_by": schema.StringAttribute{
				Computed: true,
			},
			"modify_time": schema.StringAttribute{
				Computed: true,
			},
			"modify_type": schema.StringAttribute{
				Computed: true,
			},
			"policy_type": schema.StringAttribute{
				Computed: true,
			},
			"rule_data": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"access_method": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"external_dlp": schema.BoolAttribute{
						Computed: true,
					},
					"json_version": schema.NumberAttribute{
						Computed: true,
					},
					"match_criteria_action": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"action_name": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"policy_type": schema.StringAttribute{
						Computed: true,
					},
					"private_apps": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"private_apps_with_activities": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"activities": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"activity": schema.StringAttribute{
												Computed: true,
											},
											"list_of_constraints": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
								},
								"app_id": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"app_name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"show_dlp_profile_action_table": schema.BoolAttribute{
						Computed: true,
					},
					"user_type": schema.StringAttribute{
						Computed: true,
					},
					"version": schema.NumberAttribute{
						Computed: true,
					},
				},
			},
			"rule_id": schema.StringAttribute{
				Computed: true,
			},
			"rule_name": schema.StringAttribute{
				Computed: true,
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *NPARulesDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderNs)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderNs, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPARulesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *NPARulesDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var id string
	id = data.RuleID.ValueString()

	fields := new(string)
	if !data.Fields.IsUnknown() && !data.Fields.IsNull() {
		*fields = data.Fields.ValueString()
	} else {
		fields = nil
	}
	request := operations.NPARulesRequest{
		ID:     id,
		Fields: fields,
	}
	res, err := r.client.NPARules.NPARules(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedNpaPolicyResponseItemTest(res.Object.Data)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
