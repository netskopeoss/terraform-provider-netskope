// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/shared"
)

func (r *NPARulesResourceModel) ToSharedNpaPolicyRequest() *shared.NpaPolicyRequest {
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	enabled := new(string)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueString()
	} else {
		enabled = nil
	}
	groupID := new(string)
	if !r.GroupID.IsUnknown() && !r.GroupID.IsNull() {
		*groupID = r.GroupID.ValueString()
	} else {
		groupID = nil
	}
	groupName := new(string)
	if !r.GroupName.IsUnknown() && !r.GroupName.IsNull() {
		*groupName = r.GroupName.ValueString()
	} else {
		groupName = nil
	}
	var ruleData *shared.NpaPolicyRuleData
	if r.RuleData != nil {
		var accessMethod []shared.AccessMethod = []shared.AccessMethod{}
		for _, accessMethodItem := range r.RuleData.AccessMethod {
			accessMethod = append(accessMethod, shared.AccessMethod(accessMethodItem.ValueString()))
		}
		bNegateNetLocation := new(bool)
		if !r.RuleData.BNegateNetLocation.IsUnknown() && !r.RuleData.BNegateNetLocation.IsNull() {
			*bNegateNetLocation = r.RuleData.BNegateNetLocation.ValueBool()
		} else {
			bNegateNetLocation = nil
		}
		bNegateSrcCountries := new(bool)
		if !r.RuleData.BNegateSrcCountries.IsUnknown() && !r.RuleData.BNegateSrcCountries.IsNull() {
			*bNegateSrcCountries = r.RuleData.BNegateSrcCountries.ValueBool()
		} else {
			bNegateSrcCountries = nil
		}
		classification := new(string)
		if !r.RuleData.Classification.IsUnknown() && !r.RuleData.Classification.IsNull() {
			*classification = r.RuleData.Classification.ValueString()
		} else {
			classification = nil
		}
		var dlpActions []shared.NpaPolicyRuleDlp = []shared.NpaPolicyRuleDlp{}
		for _, dlpActionsItem := range r.RuleData.DlpActions {
			var actions []shared.Actions = []shared.Actions{}
			for _, actionsItem := range dlpActionsItem.Actions {
				actions = append(actions, shared.Actions(actionsItem.ValueString()))
			}
			dlpProfile := new(string)
			if !dlpActionsItem.DlpProfile.IsUnknown() && !dlpActionsItem.DlpProfile.IsNull() {
				*dlpProfile = dlpActionsItem.DlpProfile.ValueString()
			} else {
				dlpProfile = nil
			}
			dlpActions = append(dlpActions, shared.NpaPolicyRuleDlp{
				Actions:    actions,
				DlpProfile: dlpProfile,
			})
		}
		var tssActions []shared.NpaPolicyRuleTss = []shared.NpaPolicyRuleTss{}
		for _, tssActionsItem := range r.RuleData.TssActions {
			var tssProfile []string = []string{}
			for _, tssProfileItem := range tssActionsItem.TssProfile {
				tssProfile = append(tssProfile, tssProfileItem.ValueString())
			}
			var actions1 []shared.NpaPolicyRuleTssActions = []shared.NpaPolicyRuleTssActions{}
			for _, actionsItem1 := range tssActionsItem.Actions {
				actionName := new(shared.ActionName)
				if !actionsItem1.ActionName.IsUnknown() && !actionsItem1.ActionName.IsNull() {
					*actionName = shared.ActionName(actionsItem1.ActionName.ValueString())
				} else {
					actionName = nil
				}
				remediationProfile := new(string)
				if !actionsItem1.RemediationProfile.IsUnknown() && !actionsItem1.RemediationProfile.IsNull() {
					*remediationProfile = actionsItem1.RemediationProfile.ValueString()
				} else {
					remediationProfile = nil
				}
				severity := new(shared.Severity)
				if !actionsItem1.Severity.IsUnknown() && !actionsItem1.Severity.IsNull() {
					*severity = shared.Severity(actionsItem1.Severity.ValueString())
				} else {
					severity = nil
				}
				template := new(string)
				if !actionsItem1.Template.IsUnknown() && !actionsItem1.Template.IsNull() {
					*template = actionsItem1.Template.ValueString()
				} else {
					template = nil
				}
				actions1 = append(actions1, shared.NpaPolicyRuleTssActions{
					ActionName:         actionName,
					RemediationProfile: remediationProfile,
					Severity:           severity,
					Template:           template,
				})
			}
			tssActions = append(tssActions, shared.NpaPolicyRuleTss{
				TssProfile: tssProfile,
				Actions:    actions1,
			})
		}
		var tssProfile1 []string = []string{}
		for _, tssProfileItem1 := range r.RuleData.TssProfile {
			tssProfile1 = append(tssProfile1, tssProfileItem1.ValueString())
		}
		externalDlp := new(bool)
		if !r.RuleData.ExternalDlp.IsUnknown() && !r.RuleData.ExternalDlp.IsNull() {
			*externalDlp = r.RuleData.ExternalDlp.ValueBool()
		} else {
			externalDlp = nil
		}
		jsonVersion := new(int64)
		if !r.RuleData.JSONVersion.IsUnknown() && !r.RuleData.JSONVersion.IsNull() {
			*jsonVersion = r.RuleData.JSONVersion.ValueInt64()
		} else {
			jsonVersion = nil
		}
		var deviceClassificationID []int64 = []int64{}
		for _, deviceClassificationIDItem := range r.RuleData.DeviceClassificationID {
			deviceClassificationID = append(deviceClassificationID, deviceClassificationIDItem.ValueInt64())
		}
		var matchCriteriaAction *shared.MatchCriteriaAction
		if r.RuleData.MatchCriteriaAction != nil {
			actionName1 := new(shared.NpaPolicyRuleDataActionName)
			if !r.RuleData.MatchCriteriaAction.ActionName.IsUnknown() && !r.RuleData.MatchCriteriaAction.ActionName.IsNull() {
				*actionName1 = shared.NpaPolicyRuleDataActionName(r.RuleData.MatchCriteriaAction.ActionName.ValueString())
			} else {
				actionName1 = nil
			}
			matchCriteriaAction = &shared.MatchCriteriaAction{
				ActionName: actionName1,
			}
		}
		var netLocationObj []string = []string{}
		for _, netLocationObjItem := range r.RuleData.NetLocationObj {
			netLocationObj = append(netLocationObj, netLocationObjItem.ValueString())
		}
		var organizationUnits []string = []string{}
		for _, organizationUnitsItem := range r.RuleData.OrganizationUnits {
			organizationUnits = append(organizationUnits, organizationUnitsItem.ValueString())
		}
		policyType := new(shared.PolicyType)
		if !r.RuleData.PolicyType.IsUnknown() && !r.RuleData.PolicyType.IsNull() {
			*policyType = shared.PolicyType(r.RuleData.PolicyType.ValueString())
		} else {
			policyType = nil
		}
		var privateAppTagIds []string = []string{}
		for _, privateAppTagIdsItem := range r.RuleData.PrivateAppTagIds {
			privateAppTagIds = append(privateAppTagIds, privateAppTagIdsItem.ValueString())
		}
		var privateAppTags []string = []string{}
		for _, privateAppTagsItem := range r.RuleData.PrivateAppTags {
			privateAppTags = append(privateAppTags, privateAppTagsItem.ValueString())
		}
		var privateApps []string = []string{}
		for _, privateAppsItem := range r.RuleData.PrivateApps {
			privateApps = append(privateApps, privateAppsItem.ValueString())
		}
		var privateAppsWithActivities []shared.PrivateAppsWithActivities = []shared.PrivateAppsWithActivities{}
		for _, privateAppsWithActivitiesItem := range r.RuleData.PrivateAppsWithActivities {
			var activities []shared.Activities = []shared.Activities{}
			for _, activitiesItem := range privateAppsWithActivitiesItem.Activities {
				activity := new(shared.Activity)
				if !activitiesItem.Activity.IsUnknown() && !activitiesItem.Activity.IsNull() {
					*activity = shared.Activity(activitiesItem.Activity.ValueString())
				} else {
					activity = nil
				}
				var listOfConstraints []string = []string{}
				for _, listOfConstraintsItem := range activitiesItem.ListOfConstraints {
					listOfConstraints = append(listOfConstraints, listOfConstraintsItem.ValueString())
				}
				activities = append(activities, shared.Activities{
					Activity:          activity,
					ListOfConstraints: listOfConstraints,
				})
			}
			var appID []string = []string{}
			for _, appIDItem := range privateAppsWithActivitiesItem.AppID {
				appID = append(appID, appIDItem.ValueString())
			}
			appName := new(string)
			if !privateAppsWithActivitiesItem.AppName.IsUnknown() && !privateAppsWithActivitiesItem.AppName.IsNull() {
				*appName = privateAppsWithActivitiesItem.AppName.ValueString()
			} else {
				appName = nil
			}
			privateAppsWithActivities = append(privateAppsWithActivities, shared.PrivateAppsWithActivities{
				Activities: activities,
				AppID:      appID,
				AppName:    appName,
			})
		}
		showDlpProfileActionTable := new(bool)
		if !r.RuleData.ShowDlpProfileActionTable.IsUnknown() && !r.RuleData.ShowDlpProfileActionTable.IsNull() {
			*showDlpProfileActionTable = r.RuleData.ShowDlpProfileActionTable.ValueBool()
		} else {
			showDlpProfileActionTable = nil
		}
		var srcCountries []string = []string{}
		for _, srcCountriesItem := range r.RuleData.SrcCountries {
			srcCountries = append(srcCountries, srcCountriesItem.ValueString())
		}
		var userGroups []string = []string{}
		for _, userGroupsItem := range r.RuleData.UserGroups {
			userGroups = append(userGroups, userGroupsItem.ValueString())
		}
		userType := new(shared.UserType)
		if !r.RuleData.UserType.IsUnknown() && !r.RuleData.UserType.IsNull() {
			*userType = shared.UserType(r.RuleData.UserType.ValueString())
		} else {
			userType = nil
		}
		var users []string = []string{}
		for _, usersItem := range r.RuleData.Users {
			users = append(users, usersItem.ValueString())
		}
		version := new(int64)
		if !r.RuleData.Version.IsUnknown() && !r.RuleData.Version.IsNull() {
			*version = r.RuleData.Version.ValueInt64()
		} else {
			version = nil
		}
		ruleData = &shared.NpaPolicyRuleData{
			AccessMethod:              accessMethod,
			BNegateNetLocation:        bNegateNetLocation,
			BNegateSrcCountries:       bNegateSrcCountries,
			Classification:            classification,
			DlpActions:                dlpActions,
			TssActions:                tssActions,
			TssProfile:                tssProfile1,
			ExternalDlp:               externalDlp,
			JSONVersion:               jsonVersion,
			DeviceClassificationID:    deviceClassificationID,
			MatchCriteriaAction:       matchCriteriaAction,
			NetLocationObj:            netLocationObj,
			OrganizationUnits:         organizationUnits,
			PolicyType:                policyType,
			PrivateAppTagIds:          privateAppTagIds,
			PrivateAppTags:            privateAppTags,
			PrivateApps:               privateApps,
			PrivateAppsWithActivities: privateAppsWithActivities,
			ShowDlpProfileActionTable: showDlpProfileActionTable,
			SrcCountries:              srcCountries,
			UserGroups:                userGroups,
			UserType:                  userType,
			Users:                     users,
			Version:                   version,
		}
	}
	ruleName := new(string)
	if !r.RuleName.IsUnknown() && !r.RuleName.IsNull() {
		*ruleName = r.RuleName.ValueString()
	} else {
		ruleName = nil
	}
	var ruleOrder *shared.RuleOrder
	if r.RuleOrder != nil {
		order := new(shared.Order)
		if !r.RuleOrder.Order.IsUnknown() && !r.RuleOrder.Order.IsNull() {
			*order = shared.Order(r.RuleOrder.Order.ValueString())
		} else {
			order = nil
		}
		position := new(int64)
		if !r.RuleOrder.Position.IsUnknown() && !r.RuleOrder.Position.IsNull() {
			*position = r.RuleOrder.Position.ValueInt64()
		} else {
			position = nil
		}
		ruleID := new(string)
		if !r.RuleOrder.RuleID.IsUnknown() && !r.RuleOrder.RuleID.IsNull() {
			*ruleID = r.RuleOrder.RuleID.ValueString()
		} else {
			ruleID = nil
		}
		ruleName1 := new(string)
		if !r.RuleOrder.RuleName.IsUnknown() && !r.RuleOrder.RuleName.IsNull() {
			*ruleName1 = r.RuleOrder.RuleName.ValueString()
		} else {
			ruleName1 = nil
		}
		ruleOrder = &shared.RuleOrder{
			Order:    order,
			Position: position,
			RuleID:   ruleID,
			RuleName: ruleName1,
		}
	}
	out := shared.NpaPolicyRequest{
		Description: description,
		Enabled:     enabled,
		GroupID:     groupID,
		GroupName:   groupName,
		RuleData:    ruleData,
		RuleName:    ruleName,
		RuleOrder:   ruleOrder,
	}
	return &out
}

func (r *NPARulesResourceModel) RefreshFromSharedNpaPolicyResponseItem(resp *shared.NpaPolicyResponseItem) {
	if resp != nil {
		r.Enabled = types.StringPointerValue(resp.Enabled)
		r.GroupID = types.StringPointerValue(resp.GroupID)
		r.ModifyBy = types.StringPointerValue(resp.ModifyBy)
		r.ModifyTime = types.StringPointerValue(resp.ModifyTime)
		r.ModifyType = types.StringPointerValue(resp.ModifyType)
		r.PolicyType = types.StringPointerValue(resp.PolicyType)
		if resp.RuleData == nil {
			r.RuleData = nil
		} else {
			r.RuleData = &tfTypes.NpaPolicyRuleData{}
			r.RuleData.AccessMethod = make([]types.String, 0, len(resp.RuleData.AccessMethod))
			for _, v := range resp.RuleData.AccessMethod {
				r.RuleData.AccessMethod = append(r.RuleData.AccessMethod, types.StringValue(string(v)))
			}
			r.RuleData.BNegateNetLocation = types.BoolPointerValue(resp.RuleData.BNegateNetLocation)
			r.RuleData.BNegateSrcCountries = types.BoolPointerValue(resp.RuleData.BNegateSrcCountries)
			r.RuleData.Classification = types.StringPointerValue(resp.RuleData.Classification)
			r.RuleData.DeviceClassificationID = make([]types.Int64, 0, len(resp.RuleData.DeviceClassificationID))
			for _, v := range resp.RuleData.DeviceClassificationID {
				r.RuleData.DeviceClassificationID = append(r.RuleData.DeviceClassificationID, types.Int64Value(v))
			}
			r.RuleData.DlpActions = []tfTypes.NpaPolicyRuleDlp{}
			if len(r.RuleData.DlpActions) > len(resp.RuleData.DlpActions) {
				r.RuleData.DlpActions = r.RuleData.DlpActions[:len(resp.RuleData.DlpActions)]
			}
			for dlpActionsCount, dlpActionsItem := range resp.RuleData.DlpActions {
				var dlpActions1 tfTypes.NpaPolicyRuleDlp
				dlpActions1.Actions = make([]types.String, 0, len(dlpActionsItem.Actions))
				for _, v := range dlpActionsItem.Actions {
					dlpActions1.Actions = append(dlpActions1.Actions, types.StringValue(string(v)))
				}
				dlpActions1.DlpProfile = types.StringPointerValue(dlpActionsItem.DlpProfile)
				if dlpActionsCount+1 > len(r.RuleData.DlpActions) {
					r.RuleData.DlpActions = append(r.RuleData.DlpActions, dlpActions1)
				} else {
					r.RuleData.DlpActions[dlpActionsCount].Actions = dlpActions1.Actions
					r.RuleData.DlpActions[dlpActionsCount].DlpProfile = dlpActions1.DlpProfile
				}
			}
			r.RuleData.ExternalDlp = types.BoolPointerValue(resp.RuleData.ExternalDlp)
			r.RuleData.JSONVersion = types.Int64PointerValue(resp.RuleData.JSONVersion)
			if resp.RuleData.MatchCriteriaAction == nil {
				r.RuleData.MatchCriteriaAction = nil
			} else {
				r.RuleData.MatchCriteriaAction = &tfTypes.MatchCriteriaAction{}
				if resp.RuleData.MatchCriteriaAction.ActionName != nil {
					r.RuleData.MatchCriteriaAction.ActionName = types.StringValue(string(*resp.RuleData.MatchCriteriaAction.ActionName))
				} else {
					r.RuleData.MatchCriteriaAction.ActionName = types.StringNull()
				}
			}
			r.RuleData.NetLocationObj = make([]types.String, 0, len(resp.RuleData.NetLocationObj))
			for _, v := range resp.RuleData.NetLocationObj {
				r.RuleData.NetLocationObj = append(r.RuleData.NetLocationObj, types.StringValue(v))
			}
			r.RuleData.OrganizationUnits = make([]types.String, 0, len(resp.RuleData.OrganizationUnits))
			for _, v := range resp.RuleData.OrganizationUnits {
				r.RuleData.OrganizationUnits = append(r.RuleData.OrganizationUnits, types.StringValue(v))
			}
			if resp.RuleData.PolicyType != nil {
				r.RuleData.PolicyType = types.StringValue(string(*resp.RuleData.PolicyType))
			} else {
				r.RuleData.PolicyType = types.StringNull()
			}
			r.RuleData.PrivateApps = make([]types.String, 0, len(resp.RuleData.PrivateApps))
			for _, v := range resp.RuleData.PrivateApps {
				r.RuleData.PrivateApps = append(r.RuleData.PrivateApps, types.StringValue(v))
			}
			r.RuleData.PrivateAppsWithActivities = []tfTypes.PrivateAppsWithActivities{}
			if len(r.RuleData.PrivateAppsWithActivities) > len(resp.RuleData.PrivateAppsWithActivities) {
				r.RuleData.PrivateAppsWithActivities = r.RuleData.PrivateAppsWithActivities[:len(resp.RuleData.PrivateAppsWithActivities)]
			}
			for privateAppsWithActivitiesCount, privateAppsWithActivitiesItem := range resp.RuleData.PrivateAppsWithActivities {
				var privateAppsWithActivities1 tfTypes.PrivateAppsWithActivities
				privateAppsWithActivities1.Activities = []tfTypes.Activities{}
				for activitiesCount, activitiesItem := range privateAppsWithActivitiesItem.Activities {
					var activities1 tfTypes.Activities
					if activitiesItem.Activity != nil {
						activities1.Activity = types.StringValue(string(*activitiesItem.Activity))
					} else {
						activities1.Activity = types.StringNull()
					}
					activities1.ListOfConstraints = make([]types.String, 0, len(activitiesItem.ListOfConstraints))
					for _, v := range activitiesItem.ListOfConstraints {
						activities1.ListOfConstraints = append(activities1.ListOfConstraints, types.StringValue(v))
					}
					if activitiesCount+1 > len(privateAppsWithActivities1.Activities) {
						privateAppsWithActivities1.Activities = append(privateAppsWithActivities1.Activities, activities1)
					} else {
						privateAppsWithActivities1.Activities[activitiesCount].Activity = activities1.Activity
						privateAppsWithActivities1.Activities[activitiesCount].ListOfConstraints = activities1.ListOfConstraints
					}
				}
				privateAppsWithActivities1.AppID = make([]types.String, 0, len(privateAppsWithActivitiesItem.AppID))
				for _, v := range privateAppsWithActivitiesItem.AppID {
					privateAppsWithActivities1.AppID = append(privateAppsWithActivities1.AppID, types.StringValue(v))
				}
				privateAppsWithActivities1.AppName = types.StringPointerValue(privateAppsWithActivitiesItem.AppName)
				if privateAppsWithActivitiesCount+1 > len(r.RuleData.PrivateAppsWithActivities) {
					r.RuleData.PrivateAppsWithActivities = append(r.RuleData.PrivateAppsWithActivities, privateAppsWithActivities1)
				} else {
					r.RuleData.PrivateAppsWithActivities[privateAppsWithActivitiesCount].Activities = privateAppsWithActivities1.Activities
					r.RuleData.PrivateAppsWithActivities[privateAppsWithActivitiesCount].AppID = privateAppsWithActivities1.AppID
					r.RuleData.PrivateAppsWithActivities[privateAppsWithActivitiesCount].AppName = privateAppsWithActivities1.AppName
				}
			}
			r.RuleData.PrivateAppTagIds = make([]types.String, 0, len(resp.RuleData.PrivateAppTagIds))
			for _, v := range resp.RuleData.PrivateAppTagIds {
				r.RuleData.PrivateAppTagIds = append(r.RuleData.PrivateAppTagIds, types.StringValue(v))
			}
			r.RuleData.PrivateAppTags = make([]types.String, 0, len(resp.RuleData.PrivateAppTags))
			for _, v := range resp.RuleData.PrivateAppTags {
				r.RuleData.PrivateAppTags = append(r.RuleData.PrivateAppTags, types.StringValue(v))
			}
			r.RuleData.ShowDlpProfileActionTable = types.BoolPointerValue(resp.RuleData.ShowDlpProfileActionTable)
			r.RuleData.SrcCountries = make([]types.String, 0, len(resp.RuleData.SrcCountries))
			for _, v := range resp.RuleData.SrcCountries {
				r.RuleData.SrcCountries = append(r.RuleData.SrcCountries, types.StringValue(v))
			}
			r.RuleData.TssActions = []tfTypes.NpaPolicyRuleTss{}
			if len(r.RuleData.TssActions) > len(resp.RuleData.TssActions) {
				r.RuleData.TssActions = r.RuleData.TssActions[:len(resp.RuleData.TssActions)]
			}
			for tssActionsCount, tssActionsItem := range resp.RuleData.TssActions {
				var tssActions1 tfTypes.NpaPolicyRuleTss
				tssActions1.Actions = []tfTypes.NpaPolicyRuleTssActions{}
				for actionsCount, actionsItem := range tssActionsItem.Actions {
					var actions2 tfTypes.NpaPolicyRuleTssActions
					if actionsItem.ActionName != nil {
						actions2.ActionName = types.StringValue(string(*actionsItem.ActionName))
					} else {
						actions2.ActionName = types.StringNull()
					}
					actions2.RemediationProfile = types.StringPointerValue(actionsItem.RemediationProfile)
					if actionsItem.Severity != nil {
						actions2.Severity = types.StringValue(string(*actionsItem.Severity))
					} else {
						actions2.Severity = types.StringNull()
					}
					actions2.Template = types.StringPointerValue(actionsItem.Template)
					if actionsCount+1 > len(tssActions1.Actions) {
						tssActions1.Actions = append(tssActions1.Actions, actions2)
					} else {
						tssActions1.Actions[actionsCount].ActionName = actions2.ActionName
						tssActions1.Actions[actionsCount].RemediationProfile = actions2.RemediationProfile
						tssActions1.Actions[actionsCount].Severity = actions2.Severity
						tssActions1.Actions[actionsCount].Template = actions2.Template
					}
				}
				tssActions1.TssProfile = make([]types.String, 0, len(tssActionsItem.TssProfile))
				for _, v := range tssActionsItem.TssProfile {
					tssActions1.TssProfile = append(tssActions1.TssProfile, types.StringValue(v))
				}
				if tssActionsCount+1 > len(r.RuleData.TssActions) {
					r.RuleData.TssActions = append(r.RuleData.TssActions, tssActions1)
				} else {
					r.RuleData.TssActions[tssActionsCount].Actions = tssActions1.Actions
					r.RuleData.TssActions[tssActionsCount].TssProfile = tssActions1.TssProfile
				}
			}
			r.RuleData.TssProfile = make([]types.String, 0, len(resp.RuleData.TssProfile))
			for _, v := range resp.RuleData.TssProfile {
				r.RuleData.TssProfile = append(r.RuleData.TssProfile, types.StringValue(v))
			}
			r.RuleData.UserGroups = make([]types.String, 0, len(resp.RuleData.UserGroups))
			for _, v := range resp.RuleData.UserGroups {
				r.RuleData.UserGroups = append(r.RuleData.UserGroups, types.StringValue(v))
			}
			r.RuleData.Users = make([]types.String, 0, len(resp.RuleData.Users))
			for _, v := range resp.RuleData.Users {
				r.RuleData.Users = append(r.RuleData.Users, types.StringValue(v))
			}
			if resp.RuleData.UserType != nil {
				r.RuleData.UserType = types.StringValue(string(*resp.RuleData.UserType))
			} else {
				r.RuleData.UserType = types.StringNull()
			}
			r.RuleData.Version = types.Int64PointerValue(resp.RuleData.Version)
		}
		r.RuleID = types.StringPointerValue(resp.RuleID)
		r.RuleName = types.StringPointerValue(resp.RuleName)
	}
}
