// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-terraform/internal/provider/types"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/models/operations"
)

func (r *SCIMUserResourceModel) ToOperationsCreateSCIMUsersRequestBody() *operations.CreateSCIMUsersRequestBody {
	var schemas []operations.Schemas = nil
	for _, schemasItem := range r.Schemas {
		schemas = append(schemas, operations.Schemas(schemasItem.ValueString()))
	}
	userName := new(string)
	if !r.UserName.IsUnknown() && !r.UserName.IsNull() {
		*userName = r.UserName.ValueString()
	} else {
		userName = nil
	}
	var name *operations.Name
	if r.Name != nil {
		familyName := new(string)
		if !r.Name.FamilyName.IsUnknown() && !r.Name.FamilyName.IsNull() {
			*familyName = r.Name.FamilyName.ValueString()
		} else {
			familyName = nil
		}
		givenName := new(string)
		if !r.Name.GivenName.IsUnknown() && !r.Name.GivenName.IsNull() {
			*givenName = r.Name.GivenName.ValueString()
		} else {
			givenName = nil
		}
		name = &operations.Name{
			FamilyName: familyName,
			GivenName:  givenName,
		}
	}
	active := new(bool)
	if !r.Active.IsUnknown() && !r.Active.IsNull() {
		*active = r.Active.ValueBool()
	} else {
		active = nil
	}
	var emails []operations.Emails = nil
	for _, emailsItem := range r.Emails {
		value := new(string)
		if !emailsItem.Value.IsUnknown() && !emailsItem.Value.IsNull() {
			*value = emailsItem.Value.ValueString()
		} else {
			value = nil
		}
		primary := new(bool)
		if !emailsItem.Primary.IsUnknown() && !emailsItem.Primary.IsNull() {
			*primary = emailsItem.Primary.ValueBool()
		} else {
			primary = nil
		}
		emails = append(emails, operations.Emails{
			Value:   value,
			Primary: primary,
		})
	}
	externalID := new(string)
	if !r.ExternalID.IsUnknown() && !r.ExternalID.IsNull() {
		*externalID = r.ExternalID.ValueString()
	} else {
		externalID = nil
	}
	var meta *operations.Meta
	if r.Meta != nil {
		resourceType := new(string)
		if !r.Meta.ResourceType.IsUnknown() && !r.Meta.ResourceType.IsNull() {
			*resourceType = r.Meta.ResourceType.ValueString()
		} else {
			resourceType = nil
		}
		meta = &operations.Meta{
			ResourceType: resourceType,
		}
	}
	out := operations.CreateSCIMUsersRequestBody{
		Schemas:    schemas,
		UserName:   userName,
		Name:       name,
		Active:     active,
		Emails:     emails,
		ExternalID: externalID,
		Meta:       meta,
	}
	return &out
}

func (r *SCIMUserResourceModel) RefreshFromOperationsCreateSCIMUsersResponseBody(resp *operations.CreateSCIMUsersResponseBody) {
	if resp != nil {
		r.Active = types.BoolPointerValue(resp.Active)
		if len(r.Emails) > len(resp.Emails) {
			r.Emails = r.Emails[:len(resp.Emails)]
		}
		for emailsCount, emailsItem := range resp.Emails {
			var emails1 tfTypes.Emails
			emails1.Primary = types.BoolPointerValue(emailsItem.Primary)
			emails1.Value = types.StringPointerValue(emailsItem.Value)
			if emailsCount+1 > len(r.Emails) {
				r.Emails = append(r.Emails, emails1)
			} else {
				r.Emails[emailsCount].Primary = emails1.Primary
				r.Emails[emailsCount].Value = emails1.Value
			}
		}
		r.ExternalID = types.StringPointerValue(resp.ExternalID)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Name == nil {
			r.Name = nil
		} else {
			r.Name = &tfTypes.Name{}
			r.Name.FamilyName = types.StringPointerValue(resp.Name.FamilyName)
			r.Name.GivenName = types.StringPointerValue(resp.Name.GivenName)
		}
		r.Schemas = []types.String{}
		for _, v := range resp.Schemas {
			r.Schemas = append(r.Schemas, types.StringValue(string(v)))
		}
		if resp.Status != nil {
			r.Status = types.Int64Value(int64(*resp.Status))
		} else {
			r.Status = types.Int64Null()
		}
		r.UserName = types.StringPointerValue(resp.UserName)
	}
}

func (r *SCIMUserResourceModel) RefreshFromOperationsGetSCIMUsersByIDResponseBody(resp *operations.GetSCIMUsersByIDResponseBody) {
	if resp != nil {
		r.Active = types.BoolPointerValue(resp.Active)
		if len(r.Emails) > len(resp.Emails) {
			r.Emails = r.Emails[:len(resp.Emails)]
		}
		for emailsCount, emailsItem := range resp.Emails {
			var emails1 tfTypes.Emails
			emails1.Primary = types.BoolPointerValue(emailsItem.Primary)
			emails1.Value = types.StringPointerValue(emailsItem.Value)
			if emailsCount+1 > len(r.Emails) {
				r.Emails = append(r.Emails, emails1)
			} else {
				r.Emails[emailsCount].Primary = emails1.Primary
				r.Emails[emailsCount].Value = emails1.Value
			}
		}
		r.ExternalID = types.StringPointerValue(resp.ExternalID)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Meta == nil {
			r.Meta = nil
		} else {
			r.Meta = &tfTypes.CreateSCIMGroupsMeta{}
			r.Meta.ResourceType = types.StringPointerValue(resp.Meta.ResourceType)
		}
		if resp.Name == nil {
			r.Name = nil
		} else {
			r.Name = &tfTypes.Name{}
			r.Name.FamilyName = types.StringPointerValue(resp.Name.FamilyName)
			r.Name.GivenName = types.StringPointerValue(resp.Name.GivenName)
		}
		r.Schemas = []types.String{}
		for _, v := range resp.Schemas {
			r.Schemas = append(r.Schemas, types.StringValue(string(v)))
		}
		r.UserName = types.StringPointerValue(resp.UserName)
	}
}

func (r *SCIMUserResourceModel) ToOperationsPutSCIMUsersByIDRequestBody() *operations.PutSCIMUsersByIDRequestBody {
	var schemas []operations.PutSCIMUsersByIDSchemas = nil
	for _, schemasItem := range r.Schemas {
		schemas = append(schemas, operations.PutSCIMUsersByIDSchemas(schemasItem.ValueString()))
	}
	userName := new(string)
	if !r.UserName.IsUnknown() && !r.UserName.IsNull() {
		*userName = r.UserName.ValueString()
	} else {
		userName = nil
	}
	var name *operations.PutSCIMUsersByIDName
	if r.Name != nil {
		familyName := new(string)
		if !r.Name.FamilyName.IsUnknown() && !r.Name.FamilyName.IsNull() {
			*familyName = r.Name.FamilyName.ValueString()
		} else {
			familyName = nil
		}
		givenName := new(string)
		if !r.Name.GivenName.IsUnknown() && !r.Name.GivenName.IsNull() {
			*givenName = r.Name.GivenName.ValueString()
		} else {
			givenName = nil
		}
		name = &operations.PutSCIMUsersByIDName{
			FamilyName: familyName,
			GivenName:  givenName,
		}
	}
	active := new(bool)
	if !r.Active.IsUnknown() && !r.Active.IsNull() {
		*active = r.Active.ValueBool()
	} else {
		active = nil
	}
	var emails []operations.PutSCIMUsersByIDEmails = nil
	for _, emailsItem := range r.Emails {
		value := new(string)
		if !emailsItem.Value.IsUnknown() && !emailsItem.Value.IsNull() {
			*value = emailsItem.Value.ValueString()
		} else {
			value = nil
		}
		primary := new(bool)
		if !emailsItem.Primary.IsUnknown() && !emailsItem.Primary.IsNull() {
			*primary = emailsItem.Primary.ValueBool()
		} else {
			primary = nil
		}
		emails = append(emails, operations.PutSCIMUsersByIDEmails{
			Value:   value,
			Primary: primary,
		})
	}
	externalID := new(string)
	if !r.ExternalID.IsUnknown() && !r.ExternalID.IsNull() {
		*externalID = r.ExternalID.ValueString()
	} else {
		externalID = nil
	}
	var meta *operations.PutSCIMUsersByIDMeta
	if r.Meta != nil {
		resourceType := new(string)
		if !r.Meta.ResourceType.IsUnknown() && !r.Meta.ResourceType.IsNull() {
			*resourceType = r.Meta.ResourceType.ValueString()
		} else {
			resourceType = nil
		}
		meta = &operations.PutSCIMUsersByIDMeta{
			ResourceType: resourceType,
		}
	}
	out := operations.PutSCIMUsersByIDRequestBody{
		Schemas:    schemas,
		UserName:   userName,
		Name:       name,
		Active:     active,
		Emails:     emails,
		ExternalID: externalID,
		Meta:       meta,
	}
	return &out
}

func (r *SCIMUserResourceModel) RefreshFromOperationsPutSCIMUsersByIDResponseBody(resp *operations.PutSCIMUsersByIDResponseBody) {
	if resp != nil {
		r.Active = types.BoolPointerValue(resp.Active)
		if len(r.Emails) > len(resp.Emails) {
			r.Emails = r.Emails[:len(resp.Emails)]
		}
		for emailsCount, emailsItem := range resp.Emails {
			var emails1 tfTypes.Emails
			emails1.Primary = types.BoolPointerValue(emailsItem.Primary)
			emails1.Value = types.StringPointerValue(emailsItem.Value)
			if emailsCount+1 > len(r.Emails) {
				r.Emails = append(r.Emails, emails1)
			} else {
				r.Emails[emailsCount].Primary = emails1.Primary
				r.Emails[emailsCount].Value = emails1.Value
			}
		}
		r.ExternalID = types.StringPointerValue(resp.ExternalID)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Name == nil {
			r.Name = nil
		} else {
			r.Name = &tfTypes.Name{}
			r.Name.FamilyName = types.StringPointerValue(resp.Name.FamilyName)
			r.Name.GivenName = types.StringPointerValue(resp.Name.GivenName)
		}
		r.Schemas = []types.String{}
		for _, v := range resp.Schemas {
			r.Schemas = append(r.Schemas, types.StringValue(string(v)))
		}
		if resp.Status != nil {
			r.Status = types.Int64Value(int64(*resp.Status))
		} else {
			r.Status = types.Int64Null()
		}
		r.UserName = types.StringPointerValue(resp.UserName)
	}
}
