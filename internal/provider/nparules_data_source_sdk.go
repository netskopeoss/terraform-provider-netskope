// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/shared"
	"math/big"
)

func (r *NPARulesDataSourceModel) RefreshFromSharedNpaPolicyResponseItemTest(resp *shared.NpaPolicyResponseItemTest) {
	if resp != nil {
		r.Enabled = types.StringPointerValue(resp.Enabled)
		r.ModifyBy = types.StringPointerValue(resp.ModifyBy)
		r.ModifyTime = types.StringPointerValue(resp.ModifyTime)
		r.ModifyType = types.StringPointerValue(resp.ModifyType)
		r.PolicyType = types.StringPointerValue(resp.PolicyType)
		if resp.RuleData == nil {
			r.RuleData = nil
		} else {
			r.RuleData = &tfTypes.RuleData{}
			r.RuleData.AccessMethod = []types.String{}
			for _, v := range resp.RuleData.AccessMethod {
				r.RuleData.AccessMethod = append(r.RuleData.AccessMethod, types.StringValue(v))
			}
			r.RuleData.ExternalDlp = types.BoolPointerValue(resp.RuleData.ExternalDlp)
			if resp.RuleData.JSONVersion != nil {
				r.RuleData.JSONVersion = types.NumberValue(big.NewFloat(float64(*resp.RuleData.JSONVersion)))
			} else {
				r.RuleData.JSONVersion = types.NumberNull()
			}
			if resp.RuleData.MatchCriteriaAction == nil {
				r.RuleData.MatchCriteriaAction = nil
			} else {
				r.RuleData.MatchCriteriaAction = &tfTypes.MatchCriteriaAction{}
				r.RuleData.MatchCriteriaAction.ActionName = types.StringPointerValue(resp.RuleData.MatchCriteriaAction.ActionName)
			}
			r.RuleData.PolicyType = types.StringPointerValue(resp.RuleData.PolicyType)
			r.RuleData.PrivateApps = []types.String{}
			for _, v := range resp.RuleData.PrivateApps {
				r.RuleData.PrivateApps = append(r.RuleData.PrivateApps, types.StringValue(v))
			}
			r.RuleData.PrivateAppsWithActivities = []tfTypes.PrivateAppsWithActivities{}
			if len(r.RuleData.PrivateAppsWithActivities) > len(resp.RuleData.PrivateAppsWithActivities) {
				r.RuleData.PrivateAppsWithActivities = r.RuleData.PrivateAppsWithActivities[:len(resp.RuleData.PrivateAppsWithActivities)]
			}
			for privateAppsWithActivitiesCount, privateAppsWithActivitiesItem := range resp.RuleData.PrivateAppsWithActivities {
				var privateAppsWithActivities1 tfTypes.PrivateAppsWithActivities
				privateAppsWithActivities1.Activities = []tfTypes.Activities{}
				for activitiesCount, activitiesItem := range privateAppsWithActivitiesItem.Activities {
					var activities1 tfTypes.Activities
					activities1.Activity = types.StringPointerValue(activitiesItem.Activity)
					activities1.ListOfConstraints = []types.String{}
					for _, v := range activitiesItem.ListOfConstraints {
						activities1.ListOfConstraints = append(activities1.ListOfConstraints, types.StringValue(v))
					}
					if activitiesCount+1 > len(privateAppsWithActivities1.Activities) {
						privateAppsWithActivities1.Activities = append(privateAppsWithActivities1.Activities, activities1)
					} else {
						privateAppsWithActivities1.Activities[activitiesCount].Activity = activities1.Activity
						privateAppsWithActivities1.Activities[activitiesCount].ListOfConstraints = activities1.ListOfConstraints
					}
				}
				privateAppsWithActivities1.AppID = []types.String{}
				for _, v := range privateAppsWithActivitiesItem.AppID {
					privateAppsWithActivities1.AppID = append(privateAppsWithActivities1.AppID, types.StringValue(v))
				}
				privateAppsWithActivities1.AppName = types.StringPointerValue(privateAppsWithActivitiesItem.AppName)
				if privateAppsWithActivitiesCount+1 > len(r.RuleData.PrivateAppsWithActivities) {
					r.RuleData.PrivateAppsWithActivities = append(r.RuleData.PrivateAppsWithActivities, privateAppsWithActivities1)
				} else {
					r.RuleData.PrivateAppsWithActivities[privateAppsWithActivitiesCount].Activities = privateAppsWithActivities1.Activities
					r.RuleData.PrivateAppsWithActivities[privateAppsWithActivitiesCount].AppID = privateAppsWithActivities1.AppID
					r.RuleData.PrivateAppsWithActivities[privateAppsWithActivitiesCount].AppName = privateAppsWithActivities1.AppName
				}
			}
			r.RuleData.ShowDlpProfileActionTable = types.BoolPointerValue(resp.RuleData.ShowDlpProfileActionTable)
			r.RuleData.UserType = types.StringPointerValue(resp.RuleData.UserType)
			if resp.RuleData.Version != nil {
				r.RuleData.Version = types.NumberValue(big.NewFloat(float64(*resp.RuleData.Version)))
			} else {
				r.RuleData.Version = types.NumberNull()
			}
		}
		r.RuleID = types.StringPointerValue(resp.RuleID)
		r.RuleName = types.StringPointerValue(resp.RuleName)
	}
}
