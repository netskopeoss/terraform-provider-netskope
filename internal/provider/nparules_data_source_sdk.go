// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/shared"
)

func (r *NPARulesDataSourceModel) RefreshFromSharedNpaPolicyResponseItem(resp *shared.NpaPolicyResponseItem) {
	if resp != nil {
		r.Enabled = types.StringPointerValue(resp.Enabled)
		r.GroupID = types.StringPointerValue(resp.GroupID)
		r.ModifyBy = types.StringPointerValue(resp.ModifyBy)
		r.ModifyTime = types.StringPointerValue(resp.ModifyTime)
		r.ModifyType = types.StringPointerValue(resp.ModifyType)
		r.PolicyType = types.StringPointerValue(resp.PolicyType)
		if resp.RuleData == nil {
			r.RuleData = nil
		} else {
			r.RuleData = &tfTypes.NpaPolicyRuleData{}
			r.RuleData.AccessMethod = []types.String{}
			for _, v := range resp.RuleData.AccessMethod {
				r.RuleData.AccessMethod = append(r.RuleData.AccessMethod, types.StringValue(string(v)))
			}
			r.RuleData.BNegateNetLocation = types.BoolPointerValue(resp.RuleData.BNegateNetLocation)
			r.RuleData.BNegateSrcCountries = types.BoolPointerValue(resp.RuleData.BNegateSrcCountries)
			r.RuleData.Classification = types.StringPointerValue(resp.RuleData.Classification)
			r.RuleData.DeviceClassificationID = []types.Int64{}
			for _, v := range resp.RuleData.DeviceClassificationID {
				r.RuleData.DeviceClassificationID = append(r.RuleData.DeviceClassificationID, types.Int64Value(v))
			}
			r.RuleData.DlpActions = []tfTypes.NpaPolicyRuleDlp{}
			if len(r.RuleData.DlpActions) > len(resp.RuleData.DlpActions) {
				r.RuleData.DlpActions = r.RuleData.DlpActions[:len(resp.RuleData.DlpActions)]
			}
			for dlpActionsCount, dlpActionsItem := range resp.RuleData.DlpActions {
				var dlpActions1 tfTypes.NpaPolicyRuleDlp
				dlpActions1.Actions = []types.String{}
				for _, v := range dlpActionsItem.Actions {
					dlpActions1.Actions = append(dlpActions1.Actions, types.StringValue(string(v)))
				}
				dlpActions1.DlpProfile = types.StringPointerValue(dlpActionsItem.DlpProfile)
				if dlpActionsCount+1 > len(r.RuleData.DlpActions) {
					r.RuleData.DlpActions = append(r.RuleData.DlpActions, dlpActions1)
				} else {
					r.RuleData.DlpActions[dlpActionsCount].Actions = dlpActions1.Actions
					r.RuleData.DlpActions[dlpActionsCount].DlpProfile = dlpActions1.DlpProfile
				}
			}
			r.RuleData.ExternalDlp = types.BoolPointerValue(resp.RuleData.ExternalDlp)
			r.RuleData.JSONVersion = types.Int64PointerValue(resp.RuleData.JSONVersion)
			if resp.RuleData.MatchCriteriaAction == nil {
				r.RuleData.MatchCriteriaAction = nil
			} else {
				r.RuleData.MatchCriteriaAction = &tfTypes.MatchCriteriaAction{}
				if resp.RuleData.MatchCriteriaAction.ActionName != nil {
					r.RuleData.MatchCriteriaAction.ActionName = types.StringValue(string(*resp.RuleData.MatchCriteriaAction.ActionName))
				} else {
					r.RuleData.MatchCriteriaAction.ActionName = types.StringNull()
				}
			}
			r.RuleData.NetLocationObj = []types.String{}
			for _, v := range resp.RuleData.NetLocationObj {
				r.RuleData.NetLocationObj = append(r.RuleData.NetLocationObj, types.StringValue(v))
			}
			r.RuleData.OrganizationUnits = []types.String{}
			for _, v := range resp.RuleData.OrganizationUnits {
				r.RuleData.OrganizationUnits = append(r.RuleData.OrganizationUnits, types.StringValue(v))
			}
			if resp.RuleData.PolicyType != nil {
				r.RuleData.PolicyType = types.StringValue(string(*resp.RuleData.PolicyType))
			} else {
				r.RuleData.PolicyType = types.StringNull()
			}
			r.RuleData.PrivateApps = []types.String{}
			for _, v := range resp.RuleData.PrivateApps {
				r.RuleData.PrivateApps = append(r.RuleData.PrivateApps, types.StringValue(v))
			}
			r.RuleData.PrivateAppsWithActivities = []tfTypes.PrivateAppsWithActivities{}
			if len(r.RuleData.PrivateAppsWithActivities) > len(resp.RuleData.PrivateAppsWithActivities) {
				r.RuleData.PrivateAppsWithActivities = r.RuleData.PrivateAppsWithActivities[:len(resp.RuleData.PrivateAppsWithActivities)]
			}
			for privateAppsWithActivitiesCount, privateAppsWithActivitiesItem := range resp.RuleData.PrivateAppsWithActivities {
				var privateAppsWithActivities1 tfTypes.PrivateAppsWithActivities
				privateAppsWithActivities1.Activities = []tfTypes.Activities{}
				for activitiesCount, activitiesItem := range privateAppsWithActivitiesItem.Activities {
					var activities1 tfTypes.Activities
					if activitiesItem.Activity != nil {
						activities1.Activity = types.StringValue(string(*activitiesItem.Activity))
					} else {
						activities1.Activity = types.StringNull()
					}
					activities1.ListOfConstraints = []types.String{}
					for _, v := range activitiesItem.ListOfConstraints {
						activities1.ListOfConstraints = append(activities1.ListOfConstraints, types.StringValue(v))
					}
					if activitiesCount+1 > len(privateAppsWithActivities1.Activities) {
						privateAppsWithActivities1.Activities = append(privateAppsWithActivities1.Activities, activities1)
					} else {
						privateAppsWithActivities1.Activities[activitiesCount].Activity = activities1.Activity
						privateAppsWithActivities1.Activities[activitiesCount].ListOfConstraints = activities1.ListOfConstraints
					}
				}
				privateAppsWithActivities1.AppID = []types.String{}
				for _, v := range privateAppsWithActivitiesItem.AppID {
					privateAppsWithActivities1.AppID = append(privateAppsWithActivities1.AppID, types.StringValue(v))
				}
				privateAppsWithActivities1.AppName = types.StringPointerValue(privateAppsWithActivitiesItem.AppName)
				if privateAppsWithActivitiesCount+1 > len(r.RuleData.PrivateAppsWithActivities) {
					r.RuleData.PrivateAppsWithActivities = append(r.RuleData.PrivateAppsWithActivities, privateAppsWithActivities1)
				} else {
					r.RuleData.PrivateAppsWithActivities[privateAppsWithActivitiesCount].Activities = privateAppsWithActivities1.Activities
					r.RuleData.PrivateAppsWithActivities[privateAppsWithActivitiesCount].AppID = privateAppsWithActivities1.AppID
					r.RuleData.PrivateAppsWithActivities[privateAppsWithActivitiesCount].AppName = privateAppsWithActivities1.AppName
				}
			}
			r.RuleData.PrivateAppTagIds = []types.String{}
			for _, v := range resp.RuleData.PrivateAppTagIds {
				r.RuleData.PrivateAppTagIds = append(r.RuleData.PrivateAppTagIds, types.StringValue(v))
			}
			r.RuleData.PrivateAppTags = []types.String{}
			for _, v := range resp.RuleData.PrivateAppTags {
				r.RuleData.PrivateAppTags = append(r.RuleData.PrivateAppTags, types.StringValue(v))
			}
			r.RuleData.ShowDlpProfileActionTable = types.BoolPointerValue(resp.RuleData.ShowDlpProfileActionTable)
			r.RuleData.SrcCountries = []types.String{}
			for _, v := range resp.RuleData.SrcCountries {
				r.RuleData.SrcCountries = append(r.RuleData.SrcCountries, types.StringValue(v))
			}
			r.RuleData.TssActions = []tfTypes.NpaPolicyRuleTss{}
			if len(r.RuleData.TssActions) > len(resp.RuleData.TssActions) {
				r.RuleData.TssActions = r.RuleData.TssActions[:len(resp.RuleData.TssActions)]
			}
			for tssActionsCount, tssActionsItem := range resp.RuleData.TssActions {
				var tssActions1 tfTypes.NpaPolicyRuleTss
				tssActions1.Actions = []tfTypes.NpaPolicyRuleTssActions{}
				for actionsCount, actionsItem := range tssActionsItem.Actions {
					var actions2 tfTypes.NpaPolicyRuleTssActions
					if actionsItem.ActionName != nil {
						actions2.ActionName = types.StringValue(string(*actionsItem.ActionName))
					} else {
						actions2.ActionName = types.StringNull()
					}
					actions2.RemediationProfile = types.StringPointerValue(actionsItem.RemediationProfile)
					if actionsItem.Severity != nil {
						actions2.Severity = types.StringValue(string(*actionsItem.Severity))
					} else {
						actions2.Severity = types.StringNull()
					}
					actions2.Template = types.StringPointerValue(actionsItem.Template)
					if actionsCount+1 > len(tssActions1.Actions) {
						tssActions1.Actions = append(tssActions1.Actions, actions2)
					} else {
						tssActions1.Actions[actionsCount].ActionName = actions2.ActionName
						tssActions1.Actions[actionsCount].RemediationProfile = actions2.RemediationProfile
						tssActions1.Actions[actionsCount].Severity = actions2.Severity
						tssActions1.Actions[actionsCount].Template = actions2.Template
					}
				}
				tssActions1.TssProfile = []types.String{}
				for _, v := range tssActionsItem.TssProfile {
					tssActions1.TssProfile = append(tssActions1.TssProfile, types.StringValue(v))
				}
				if tssActionsCount+1 > len(r.RuleData.TssActions) {
					r.RuleData.TssActions = append(r.RuleData.TssActions, tssActions1)
				} else {
					r.RuleData.TssActions[tssActionsCount].Actions = tssActions1.Actions
					r.RuleData.TssActions[tssActionsCount].TssProfile = tssActions1.TssProfile
				}
			}
			r.RuleData.TssProfile = []types.String{}
			for _, v := range resp.RuleData.TssProfile {
				r.RuleData.TssProfile = append(r.RuleData.TssProfile, types.StringValue(v))
			}
			r.RuleData.UserGroups = []types.String{}
			for _, v := range resp.RuleData.UserGroups {
				r.RuleData.UserGroups = append(r.RuleData.UserGroups, types.StringValue(v))
			}
			r.RuleData.Users = []types.String{}
			for _, v := range resp.RuleData.Users {
				r.RuleData.Users = append(r.RuleData.Users, types.StringValue(v))
			}
			if resp.RuleData.UserType != nil {
				r.RuleData.UserType = types.StringValue(string(*resp.RuleData.UserType))
			} else {
				r.RuleData.UserType = types.StringNull()
			}
			r.RuleData.Version = types.Int64PointerValue(resp.RuleData.Version)
		}
		r.RuleID = types.StringPointerValue(resp.RuleID)
		r.RuleName = types.StringPointerValue(resp.RuleName)
	}
}
