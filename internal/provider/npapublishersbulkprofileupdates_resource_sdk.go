// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netskope/terraform-provider-ns/internal/provider/typeconvert"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/shared"
)

func (r *NPAPublishersBulkProfileUpdatesResourceModel) RefreshFromSharedPublisherUpgradeProfileBulkResponse(ctx context.Context, resp *shared.PublisherUpgradeProfileBulkResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Data == nil {
			r.Data = nil
		} else {
			r.Data = &tfTypes.PublisherUpgradeProfileBulkResponseData{}
			r.Data.Publishers = []tfTypes.UpgradePublisherResponse{}
			if len(r.Data.Publishers) > len(resp.Data.Publishers) {
				r.Data.Publishers = r.Data.Publishers[:len(resp.Data.Publishers)]
			}
			for publishersCount, publishersItem := range resp.Data.Publishers {
				var publishers tfTypes.UpgradePublisherResponse
				publishers.AppsCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(publishersItem.AppsCount))
				if publishersItem.Assessment == nil {
					publishers.Assessment = nil
				} else {
					publishers.Assessment = &tfTypes.UpgradePublisherResponseAssessment{}
					if publishersItem.Assessment.CaCertsStatus == nil {
						publishers.Assessment.CaCertsStatus = nil
					} else {
						publishers.Assessment.CaCertsStatus = &tfTypes.UpgradePublisherResponseCaCertsStatus{}
						publishers.Assessment.CaCertsStatus.Hashes = make([]types.String, 0, len(publishersItem.Assessment.CaCertsStatus.Hashes))
						for _, v := range publishersItem.Assessment.CaCertsStatus.Hashes {
							publishers.Assessment.CaCertsStatus.Hashes = append(publishers.Assessment.CaCertsStatus.Hashes, types.StringValue(v))
						}
						publishers.Assessment.CaCertsStatus.LastModified = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(publishersItem.Assessment.CaCertsStatus.LastModified))
					}
					publishers.Assessment.EeeSupport = types.BoolPointerValue(publishersItem.Assessment.EeeSupport)
					publishers.Assessment.HddFree = types.StringPointerValue(publishersItem.Assessment.HddFree)
					publishers.Assessment.HddTotal = types.StringPointerValue(publishersItem.Assessment.HddTotal)
					publishers.Assessment.IPAddress = types.StringPointerValue(publishersItem.Assessment.IPAddress)
					publishers.Assessment.Latency = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(publishersItem.Assessment.Latency))
					publishers.Assessment.Version = types.StringPointerValue(publishersItem.Assessment.Version)
				}
				if publishersItem.Capabilities == nil {
					publishers.Capabilities = nil
				} else {
					publishers.Capabilities = &tfTypes.PublisherResponseCapabilities{}
					publishers.Capabilities.AutoUpgrade = types.BoolPointerValue(publishersItem.Capabilities.AutoUpgrade)
					publishers.Capabilities.Dtls = types.BoolPointerValue(publishersItem.Capabilities.Dtls)
					publishers.Capabilities.Eee = types.BoolPointerValue(publishersItem.Capabilities.Eee)
					publishers.Capabilities.NwaBa = types.BoolPointerValue(publishersItem.Capabilities.NwaBa)
					if publishersItem.Capabilities.PullNsconfig == nil {
						publishers.Capabilities.PullNsconfig = nil
					} else {
						publishers.Capabilities.PullNsconfig = &tfTypes.PublisherResponsePullNsconfig{}
						publishers.Capabilities.PullNsconfig.OrgkeyExist = types.BoolPointerValue(publishersItem.Capabilities.PullNsconfig.OrgkeyExist)
						publishers.Capabilities.PullNsconfig.OrguriExist = types.BoolPointerValue(publishersItem.Capabilities.PullNsconfig.OrguriExist)
					}
				}
				publishers.CommonName = types.StringPointerValue(publishersItem.CommonName)
				publishers.ConnectedApps = make([]types.String, 0, len(publishersItem.ConnectedApps))
				for _, v := range publishersItem.ConnectedApps {
					publishers.ConnectedApps = append(publishers.ConnectedApps, types.StringValue(v))
				}
				publishers.Lbrokerconnect = types.BoolPointerValue(publishersItem.Lbrokerconnect)
				publishers.Name = types.StringPointerValue(publishersItem.Name)
				publishers.PublisherID = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(publishersItem.PublisherID))
				publishers.PublisherUpgradeProfilesID = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(publishersItem.PublisherUpgradeProfilesID))
				publishers.Registered = types.BoolPointerValue(publishersItem.Registered)
				publishers.Status = types.StringPointerValue(publishersItem.Status)
				publishers.SticherPop = types.StringPointerValue(publishersItem.SticherPop)
				publishers.StitcherID = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(publishersItem.StitcherID))
				if publishersItem.UpgradeFailedReason == nil {
					publishers.UpgradeFailedReason = nil
				} else {
					publishers.UpgradeFailedReason = &tfTypes.UpgradePublisherResponseUpgradeFailedReason{}
					publishers.UpgradeFailedReason.Detail = types.StringPointerValue(publishersItem.UpgradeFailedReason.Detail)
					publishers.UpgradeFailedReason.ErrorCode = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(publishersItem.UpgradeFailedReason.ErrorCode))
					publishers.UpgradeFailedReason.Timestamp = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(publishersItem.UpgradeFailedReason.Timestamp))
					publishers.UpgradeFailedReason.Version = types.StringPointerValue(publishersItem.UpgradeFailedReason.Version)
				}
				publishers.UpgradeRequest = types.BoolPointerValue(publishersItem.UpgradeRequest)
				if publishersItem.UpgradeStatus == nil {
					publishers.UpgradeStatus = nil
				} else {
					publishers.UpgradeStatus = &tfTypes.PublisherResponseUpgradeStatus{}
					publishers.UpgradeStatus.Upstat = types.StringPointerValue(publishersItem.UpgradeStatus.Upstat)
				}
				if publishersCount+1 > len(r.Data.Publishers) {
					r.Data.Publishers = append(r.Data.Publishers, publishers)
				} else {
					r.Data.Publishers[publishersCount].AppsCount = publishers.AppsCount
					r.Data.Publishers[publishersCount].Assessment = publishers.Assessment
					r.Data.Publishers[publishersCount].Capabilities = publishers.Capabilities
					r.Data.Publishers[publishersCount].CommonName = publishers.CommonName
					r.Data.Publishers[publishersCount].ConnectedApps = publishers.ConnectedApps
					r.Data.Publishers[publishersCount].Lbrokerconnect = publishers.Lbrokerconnect
					r.Data.Publishers[publishersCount].Name = publishers.Name
					r.Data.Publishers[publishersCount].PublisherID = publishers.PublisherID
					r.Data.Publishers[publishersCount].PublisherUpgradeProfilesID = publishers.PublisherUpgradeProfilesID
					r.Data.Publishers[publishersCount].Registered = publishers.Registered
					r.Data.Publishers[publishersCount].Status = publishers.Status
					r.Data.Publishers[publishersCount].SticherPop = publishers.SticherPop
					r.Data.Publishers[publishersCount].StitcherID = publishers.StitcherID
					r.Data.Publishers[publishersCount].UpgradeFailedReason = publishers.UpgradeFailedReason
					r.Data.Publishers[publishersCount].UpgradeRequest = publishers.UpgradeRequest
					r.Data.Publishers[publishersCount].UpgradeStatus = publishers.UpgradeStatus
				}
			}
		}
		r.Total = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Total))
	}

	return diags
}

func (r *NPAPublishersBulkProfileUpdatesResourceModel) ToSharedPublisherUpgradeProfileBulkRequest(ctx context.Context) (*shared.PublisherUpgradeProfileBulkRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var publishers *shared.PublisherUpgradeProfileBulkRequestPublishers
	if r.Publishers != nil {
		var apply *shared.PublisherUpgradeProfileBulkRequestApply
		if r.Publishers.Apply != nil {
			var publisherUpgradeProfilesID string
			publisherUpgradeProfilesID = r.Publishers.Apply.PublisherUpgradeProfilesID.ValueString()

			apply = &shared.PublisherUpgradeProfileBulkRequestApply{
				PublisherUpgradeProfilesID: publisherUpgradeProfilesID,
			}
		}
		publisherID := make([]string, 0, len(r.Publishers.PublisherID))
		for _, publisherIDItem := range r.Publishers.PublisherID {
			publisherID = append(publisherID, publisherIDItem.ValueString())
		}
		publishers = &shared.PublisherUpgradeProfileBulkRequestPublishers{
			Apply:       apply,
			PublisherID: publisherID,
		}
	}
	out := shared.PublisherUpgradeProfileBulkRequest{
		Publishers: publishers,
	}

	return &out, diags
}
