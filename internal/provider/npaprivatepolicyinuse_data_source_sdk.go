// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/netskopeoss/terraform-provider-netskope/internal/provider/types"
	"github.com/netskopeoss/terraform-provider-netskope/internal/sdk/models/operations"
)

func (r *NPAPrivatePolicyInUseDataSourceModel) RefreshFromResponseBody(ctx context.Context, resp []operations.ResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Data = []tfTypes.ResponseBody{}
	if len(r.Data) > len(resp) {
		r.Data = r.Data[:len(resp)]
	}
	for dataCount, dataItem := range resp {
		var data tfTypes.ResponseBody
		if dataItem.Data == nil {
			data.Data = nil
		} else {
			data.Data = &tfTypes.Data{}
			data.Data.Token = types.StringPointerValue(dataItem.Data.Token)
		}
		if dataItem.Status != nil {
			data.Status = types.StringValue(string(*dataItem.Status))
		} else {
			data.Status = types.StringNull()
		}
		if dataCount+1 > len(r.Data) {
			r.Data = append(r.Data, data)
		} else {
			r.Data[dataCount].Data = data.Data
			r.Data[dataCount].Status = data.Status
		}
	}

	return diags
}

func (r *NPAPrivatePolicyInUseDataSourceModel) ToOperationsGetNPAPolicyInUseRequestBody(ctx context.Context) (*operations.GetNPAPolicyInUseRequestBody, diag.Diagnostics) {
	var diags diag.Diagnostics

	ids := make([]string, 0, len(r.Ids))
	for _, idsItem := range r.Ids {
		ids = append(ids, idsItem.ValueString())
	}
	out := operations.GetNPAPolicyInUseRequestBody{
		Ids: ids,
	}

	return &out, diags
}
