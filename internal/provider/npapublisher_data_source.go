// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &NPAPublisherDataSource{}
var _ datasource.DataSourceWithConfigure = &NPAPublisherDataSource{}

func NewNPAPublisherDataSource() datasource.DataSource {
	return &NPAPublisherDataSource{}
}

// NPAPublisherDataSource is the data source implementation.
type NPAPublisherDataSource struct {
	// Provider configured SDK client.
	client *sdk.TerraformProviderNs
}

// NPAPublisherDataSourceModel describes the data model.
type NPAPublisherDataSourceModel struct {
	AppsCount                  types.Int32                                   `tfsdk:"apps_count"`
	Assessment                 *tfTypes.PublisherResponseAssessment          `tfsdk:"assessment"`
	Capabilities               *tfTypes.PublisherResponseCapabilities        `tfsdk:"capabilities"`
	CommonName                 types.String                                  `tfsdk:"common_name"`
	ConnectedApps              []types.String                                `tfsdk:"connected_apps"`
	Lbrokerconnect             types.Bool                                    `tfsdk:"lbrokerconnect"`
	PublisherID                types.Int32                                   `tfsdk:"publisher_id"`
	PublisherName              types.String                                  `tfsdk:"publisher_name"`
	PublisherUpgradeProfilesID types.Int32                                   `tfsdk:"publisher_upgrade_profiles_id"`
	Registered                 types.Bool                                    `tfsdk:"registered"`
	Status                     types.String                                  `tfsdk:"status"`
	SticherPop                 types.String                                  `tfsdk:"sticher_pop"`
	StitcherID                 types.Int32                                   `tfsdk:"stitcher_id"`
	UpgradeFailedReason        *tfTypes.PublisherResponseUpgradeFailedReason `tfsdk:"upgrade_failed_reason"`
	UpgradeRequest             types.Bool                                    `tfsdk:"upgrade_request"`
	UpgradeStatus              *tfTypes.PublisherResponseUpgradeStatus       `tfsdk:"upgrade_status"`
}

// Metadata returns the data source type name.
func (r *NPAPublisherDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_publisher"
}

// Schema defines the schema for the data source.
func (r *NPAPublisherDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "The NPA Publisher is a software package that enables private application\nconnectivity between your data center and the Netskope cloud. It is a crucial \ncomponent of Netskopeâ€™s Private Access (NPA) solution, which provides zero-trust \nnetwork access (ZTNA) to private applications and data in hybrid IT environments.\n\nThis data source supports query of a specific Publisher object.\n",

		Attributes: map[string]schema.Attribute{
			"apps_count": schema.Int32Attribute{
				Computed: true,
			},
			"assessment": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"ca_certs_status": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"hashes": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"last_modified": schema.Float64Attribute{
								Computed: true,
							},
						},
					},
					"eee_support": schema.BoolAttribute{
						Computed: true,
					},
					"hdd_free": schema.StringAttribute{
						Computed: true,
					},
					"hdd_total": schema.StringAttribute{
						Computed: true,
					},
					"ip_address": schema.StringAttribute{
						Computed: true,
					},
					"latency": schema.Float64Attribute{
						Computed: true,
					},
					"version": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"capabilities": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"auto_upgrade": schema.BoolAttribute{
						Computed: true,
					},
					"dtls": schema.BoolAttribute{
						Computed: true,
					},
					"eee": schema.BoolAttribute{
						Computed: true,
					},
					"nwa_ba": schema.BoolAttribute{
						Computed: true,
					},
					"pull_nsconfig": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"orgkey_exist": schema.BoolAttribute{
								Computed: true,
							},
							"orguri_exist": schema.BoolAttribute{
								Computed: true,
							},
						},
					},
				},
			},
			"common_name": schema.StringAttribute{
				Computed: true,
			},
			"connected_apps": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"lbrokerconnect": schema.BoolAttribute{
				Computed: true,
			},
			"publisher_id": schema.Int32Attribute{
				Required:    true,
				Description: `publisher id`,
			},
			"publisher_name": schema.StringAttribute{
				Computed: true,
			},
			"publisher_upgrade_profiles_id": schema.Int32Attribute{
				Computed: true,
			},
			"registered": schema.BoolAttribute{
				Computed: true,
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
			"sticher_pop": schema.StringAttribute{
				Computed: true,
			},
			"stitcher_id": schema.Int32Attribute{
				Computed: true,
			},
			"upgrade_failed_reason": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"detail": schema.StringAttribute{
						Computed: true,
					},
					"error_code": schema.Float64Attribute{
						Computed: true,
					},
					"timestamp": schema.Float64Attribute{
						Computed: true,
					},
					"version": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"upgrade_request": schema.BoolAttribute{
				Computed: true,
			},
			"upgrade_status": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"upstat": schema.StringAttribute{
						Computed: true,
					},
				},
			},
		},
	}
}

func (r *NPAPublisherDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderNs)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderNs, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPAPublisherDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *NPAPublisherDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetNPAPublisherByIDRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.NPAPublisher.Read(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PublisherResponse != nil && res.PublisherResponse.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPublisherResponseData(ctx, res.PublisherResponse.Data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
