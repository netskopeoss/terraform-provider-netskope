// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_int32planmodifier "github.com/netskope/terraform-provider-ns/internal/planmodifiers/int32planmodifier"
	speakeasy_listplanmodifier "github.com/netskope/terraform-provider-ns/internal/planmodifiers/listplanmodifier"
	speakeasy_objectplanmodifier "github.com/netskope/terraform-provider-ns/internal/planmodifiers/objectplanmodifier"
	speakeasy_stringplanmodifier "github.com/netskope/terraform-provider-ns/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/operations"
	"github.com/netskope/terraform-provider-ns/internal/validators"
	speakeasy_objectvalidators "github.com/netskope/terraform-provider-ns/internal/validators/objectvalidators"
	"strconv"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &NPAPrivateAppTagsResource{}
var _ resource.ResourceWithImportState = &NPAPrivateAppTagsResource{}

func NewNPAPrivateAppTagsResource() resource.Resource {
	return &NPAPrivateAppTagsResource{}
}

// NPAPrivateAppTagsResource defines the resource implementation.
type NPAPrivateAppTagsResource struct {
	client *sdk.TerraformProviderNs
}

// NPAPrivateAppTagsResourceModel describes the resource data model.
type NPAPrivateAppTagsResourceModel struct {
	PrivateApps      []tfTypes.TagPrivateAppsResponse `tfsdk:"private_apps"`
	Status           types.String                     `tfsdk:"status"`
	TagID            types.Int32                      `tfsdk:"tag_id"`
	TagName          types.String                     `tfsdk:"tag_name"`
	Tags             []tfTypes.TagRequestItem         `tfsdk:"tags"`
	XSpeakeasyEntity types.String                     `tfsdk:"x_speakeasy_entity"`
}

func (r *NPAPrivateAppTagsResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_private_app_tags"
}

func (r *NPAPrivateAppTagsResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "NPAPrivateAppTags Resource",
		Attributes: map[string]schema.Attribute{
			"private_apps": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"allow_unauthenticated_cors": schema.BoolAttribute{
							Computed: true,
						},
						"allow_uri_bypass": schema.BoolAttribute{
							Computed: true,
						},
						"app_id": schema.Int32Attribute{
							Computed: true,
						},
						"app_name": schema.StringAttribute{
							Computed: true,
						},
						"app_option": schema.SingleNestedAttribute{
							Computed: true,
						},
						"clientless_access": schema.BoolAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"host": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.Int32Attribute{
							Computed: true,
						},
						"is_user_portal_app": schema.BoolAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"private_app_protocol": schema.StringAttribute{
							Computed: true,
						},
						"public_host": schema.StringAttribute{
							Computed: true,
						},
						"real_host": schema.StringAttribute{
							Computed: true,
						},
						"supplement_dns_for_osx": schema.BoolAttribute{
							Computed: true,
						},
						"trust_self_signed_certs": schema.BoolAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
						},
						"uribypass_header_value": schema.StringAttribute{
							Computed: true,
						},
						"use_publisher_dns": schema.BoolAttribute{
							Computed: true,
						},
					},
				},
			},
			"status": schema.StringAttribute{
				Computed:    true,
				Description: `must be one of ["success", "not found"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"success",
						"not found",
					),
				},
			},
			"tag_id": schema.Int32Attribute{
				Computed:    true,
				Optional:    true,
				Description: `this is the private app id.`,
			},
			"tag_name": schema.StringAttribute{
				Computed: true,
			},
			"tags": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					PlanModifiers: []planmodifier.Object{
						objectplanmodifier.RequiresReplaceIfConfigured(),
						speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
					},
					Attributes: map[string]schema.Attribute{
						"tag_id": schema.Int32Attribute{
							Computed: true,
							PlanModifiers: []planmodifier.Int32{
								speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
							},
						},
						"tag_name": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Requires replacement if changed.`,
						},
						"x_speakeasy_entity": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
					},
				},
				Description: `Requires replacement if changed.`,
			},
			"x_speakeasy_entity": schema.StringAttribute{
				Optional:    true,
				Description: `Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
		},
	}
}

func (r *NPAPrivateAppTagsResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderNs)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderNs, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPAPrivateAppTagsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *NPAPrivateAppTagsResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToSharedTagRequestWithID()
	res, err := r.client.CreateNPAPrivateAppTags(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.TagsResponseWithID != nil && res.TagsResponseWithID.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedTagsResponseWithIDData(res.TagsResponseWithID.Data)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var tagID int
	tagID = int(data.TagID.ValueInt32())

	request1 := operations.GetNPAPrivateAppTagRequest{
		TagID: tagID,
	}
	res1, err := r.client.GetNPAPrivateAppTag(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Object != nil && res1.Object.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromOperationsGetNPAPrivateAppTagData(res1.Object.Data)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPrivateAppTagsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *NPAPrivateAppTagsResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var tagID int
	tagID = int(data.TagID.ValueInt32())

	request := operations.GetNPAPrivateAppTagRequest{
		TagID: tagID,
	}
	res, err := r.client.GetNPAPrivateAppTag(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromOperationsGetNPAPrivateAppTagData(res.Object.Data)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPrivateAppTagsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *NPAPrivateAppTagsResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var tagID int
	tagID = int(data.TagID.ValueInt32())

	tagRequestItem := *data.ToSharedTagRequestItem()
	request := operations.UpdateNPAPrivateAppTagRequest{
		TagID:          tagID,
		TagRequestItem: tagRequestItem,
	}
	res, err := r.client.UpdateNPAPrivateAppTag(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.TagsResponseWithoutID != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedTagsResponseWithoutID(res.TagsResponseWithoutID)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var tagId1 int
	tagId1 = int(data.TagID.ValueInt32())

	request1 := operations.GetNPAPrivateAppTagRequest{
		TagID: tagId1,
	}
	res1, err := r.client.GetNPAPrivateAppTag(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Object != nil && res1.Object.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromOperationsGetNPAPrivateAppTagData(res1.Object.Data)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPrivateAppTagsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *NPAPrivateAppTagsResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var tagID int
	tagID = int(data.TagID.ValueInt32())

	request := operations.DeleteNPAPrivateAppTagRequest{
		TagID: tagID,
	}
	res, err := r.client.DeleteNPAPrivateAppTag(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *NPAPrivateAppTagsResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	tagID, err := strconv.Atoi(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Invalid ID", fmt.Sprintf("ID must be an integer but was %s", req.ID))
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("tag_id"), int32(tagID))...)
}
