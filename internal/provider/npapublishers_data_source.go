// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/netskope/terraform-provider-ns/internal/sdk"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &NPAPublishersDataSource{}
var _ datasource.DataSourceWithConfigure = &NPAPublishersDataSource{}

func NewNPAPublishersDataSource() datasource.DataSource {
	return &NPAPublishersDataSource{}
}

// NPAPublishersDataSource is the data source implementation.
type NPAPublishersDataSource struct {
	client *sdk.TerraformProviderNs
}

// NPAPublishersDataSourceModel describes the data model.
type NPAPublishersDataSourceModel struct {
	Assessment                types.String `tfsdk:"assessment"`
	CommonName                types.String `tfsdk:"common_name"`
	Lbrokerconnect            types.Bool   `tfsdk:"lbrokerconnect"`
	Name                      types.String `tfsdk:"name"`
	PublisherID               types.Int64  `tfsdk:"publisher_id"`
	PublisherUpgradeProfileID types.Int64  `tfsdk:"publisher_upgrade_profile_id"`
	Registered                types.Bool   `tfsdk:"registered"`
	Status                    types.String `tfsdk:"status"`
	StitcherID                types.Int64  `tfsdk:"stitcher_id"`
}

// Metadata returns the data source type name.
func (r *NPAPublishersDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_publishers"
}

// Schema defines the schema for the data source.
func (r *NPAPublishersDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "The NPA Publisher is a software package that enables private application\nconnectivity between your data center and the Netskope cloud. It is a crucial \ncomponent of Netskopeâ€™s Private Access (NPA) solution, which provides zero-trust \nnetwork access (ZTNA) to private applications and data in hybrid IT environments.\n\nThis data source supports query of a specific Publisher object. \n",

		Attributes: map[string]schema.Attribute{
			"assessment": schema.StringAttribute{
				Computed:    true,
				Description: `Parsed as JSON.`,
			},
			"common_name": schema.StringAttribute{
				Computed: true,
			},
			"lbrokerconnect": schema.BoolAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"publisher_id": schema.Int64Attribute{
				Required:    true,
				Description: `publisher id`,
			},
			"publisher_upgrade_profile_id": schema.Int64Attribute{
				Computed: true,
			},
			"registered": schema.BoolAttribute{
				Computed: true,
			},
			"status": schema.StringAttribute{
				Computed:    true,
				Description: `must be one of ["connected", "not registered"]`,
			},
			"stitcher_id": schema.Int64Attribute{
				Computed: true,
			},
		},
	}
}

func (r *NPAPublishersDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderNs)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderNs, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPAPublishersDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *NPAPublishersDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	publisherID := int(data.PublisherID.ValueInt64())
	request := operations.GetNPAPublisherByIDRequest{
		PublisherID: publisherID,
	}
	res, err := r.client.NPAPublishers.Read(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PublisherResponse != nil && res.PublisherResponse.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPublisherResponseData(res.PublisherResponse.Data)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
