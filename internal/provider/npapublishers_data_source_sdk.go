// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"ns/internal/sdk/pkg/models/operations"
)

func (r *NPAPublishersDataSourceModel) RefreshFromGetResponse(resp *operations.GetInfrastructurePublishersResponseBody) {
	if resp.Data == nil {
		r.Data = nil
	} else {
		r.Data = &GetInfrastructurePublishersData{}
		r.Data.Publishers = nil
		for _, publishersItem := range resp.Data.Publishers {
			var publishers1 Publisher
			publishers1.AppsCount = types.Int64Value(publishersItem.AppsCount)
			if publishersItem.Assessment.Two != nil {
				publishers1.Assessment.Two = &Assessment{}
			}
			if publishersItem.Assessment.GetInfrastructurePublishersNPAPublishersAssessment != nil {
				publishers1.Assessment.GetInfrastructurePublishersNPAPublishersAssessment = &GetInfrastructurePublishersNPAPublishersAssessment{}
				publishers1.Assessment.GetInfrastructurePublishersNPAPublishersAssessment.EeeSupport = types.BoolValue(publishersItem.Assessment.GetInfrastructurePublishersNPAPublishersAssessment.EeeSupport)
				publishers1.Assessment.GetInfrastructurePublishersNPAPublishersAssessment.HddFree = types.StringValue(publishersItem.Assessment.GetInfrastructurePublishersNPAPublishersAssessment.HddFree)
				publishers1.Assessment.GetInfrastructurePublishersNPAPublishersAssessment.HddTotal = types.StringValue(publishersItem.Assessment.GetInfrastructurePublishersNPAPublishersAssessment.HddTotal)
				publishers1.Assessment.GetInfrastructurePublishersNPAPublishersAssessment.IPAddress = types.StringValue(publishersItem.Assessment.GetInfrastructurePublishersNPAPublishersAssessment.IPAddress)
				publishers1.Assessment.GetInfrastructurePublishersNPAPublishersAssessment.Latency = types.Int64Value(publishersItem.Assessment.GetInfrastructurePublishersNPAPublishersAssessment.Latency)
				publishers1.Assessment.GetInfrastructurePublishersNPAPublishersAssessment.Version = types.StringValue(publishersItem.Assessment.GetInfrastructurePublishersNPAPublishersAssessment.Version)
			}
			publishers1.CommonName = types.StringValue(publishersItem.CommonName)
			publishers1.ConnectedApps = nil
			for _, v := range publishersItem.ConnectedApps {
				publishers1.ConnectedApps = append(publishers1.ConnectedApps, types.StringValue(v))
			}
			publishers1.Lbrokerconnect = types.BoolValue(publishersItem.Lbrokerconnect)
			publishers1.PublisherID = types.Int64Value(publishersItem.PublisherID)
			publishers1.PublisherName = types.StringValue(publishersItem.PublisherName)
			publishers1.PublisherUpgradeProfilesExternalID = types.Int64Value(publishersItem.PublisherUpgradeProfilesExternalID)
			publishers1.Registered = types.BoolValue(publishersItem.Registered)
			publishers1.Status = types.StringValue(publishersItem.Status)
			if publishersItem.StitcherID.Integer != nil {
				if publishersItem.StitcherID.Integer != nil {
					publishers1.StitcherID.Integer = types.Int64Value(*publishersItem.StitcherID.Integer)
				} else {
					publishers1.StitcherID.Integer = types.Int64Null()
				}
			}
			if publishersItem.StitcherID.GetInfrastructurePublishers2 != nil {
				publishers1.StitcherID.GetInfrastructurePublishers2 = &Assessment{}
			}
			publishers1.Tags = nil
			for _, tagsItem := range publishersItem.Tags {
				var tags1 types.String
				tags1Result, _ := json.Marshal(tagsItem)
				tags1 = types.StringValue(string(tags1Result))
				publishers1.Tags = append(publishers1.Tags, tags1)
			}
			if publishersItem.UpgradeFailedReason.GetInfrastructurePublishersNPAPublishers2 != nil {
				publishers1.UpgradeFailedReason.GetInfrastructurePublishersNPAPublishers2 = &Assessment{}
			}
			if publishersItem.UpgradeFailedReason.GetInfrastructurePublishersNPAPublishersUpgradeFailedReason != nil {
				publishers1.UpgradeFailedReason.GetInfrastructurePublishersNPAPublishersUpgradeFailedReason = &GetInfrastructurePublishersNPAPublishersUpgradeFailedReason{}
				publishers1.UpgradeFailedReason.GetInfrastructurePublishersNPAPublishersUpgradeFailedReason.Detail = types.StringValue(publishersItem.UpgradeFailedReason.GetInfrastructurePublishersNPAPublishersUpgradeFailedReason.Detail)
				publishers1.UpgradeFailedReason.GetInfrastructurePublishersNPAPublishersUpgradeFailedReason.ErrorCode = types.Int64Value(publishersItem.UpgradeFailedReason.GetInfrastructurePublishersNPAPublishersUpgradeFailedReason.ErrorCode)
				publishers1.UpgradeFailedReason.GetInfrastructurePublishersNPAPublishersUpgradeFailedReason.Timestamp = types.Int64Value(publishersItem.UpgradeFailedReason.GetInfrastructurePublishersNPAPublishersUpgradeFailedReason.Timestamp)
				publishers1.UpgradeFailedReason.GetInfrastructurePublishersNPAPublishersUpgradeFailedReason.Version = types.StringValue(publishersItem.UpgradeFailedReason.GetInfrastructurePublishersNPAPublishersUpgradeFailedReason.Version)
			}
			publishers1.UpgradeRequest = types.BoolValue(publishersItem.UpgradeRequest)
			publishers1.UpgradeStatus.Upstat = types.StringValue(publishersItem.UpgradeStatus.Upstat)
			r.Data.Publishers = append(r.Data.Publishers, publishers1)
		}
	}
	if resp.Status != nil {
		r.Status = types.StringValue(*resp.Status)
	} else {
		r.Status = types.StringNull()
	}
	if resp.Total != nil {
		r.Total = types.Int64Value(int64(*resp.Total))
	} else {
		r.Total = types.Int64Null()
	}
}
