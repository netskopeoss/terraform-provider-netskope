// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &NPAPolicyGroupsResource{}
var _ resource.ResourceWithImportState = &NPAPolicyGroupsResource{}

func NewNPAPolicyGroupsResource() resource.Resource {
	return &NPAPolicyGroupsResource{}
}

// NPAPolicyGroupsResource defines the resource implementation.
type NPAPolicyGroupsResource struct {
	client *sdk.TerraformProviderNs
}

// NPAPolicyGroupsResourceModel describes the resource data model.
type NPAPolicyGroupsResourceModel struct {
	CanBeEditedDeleted types.String        `tfsdk:"can_be_edited_deleted"`
	GroupID            types.String        `tfsdk:"group_id"`
	GroupName          types.String        `tfsdk:"group_name"`
	GroupOrder         *tfTypes.GroupOrder `tfsdk:"group_order"`
	GroupPinnedID      types.String        `tfsdk:"group_pinned_id"`
	GroupProdID        types.String        `tfsdk:"group_prod_id"`
	GroupType          types.String        `tfsdk:"group_type"`
	ModifyBy           types.String        `tfsdk:"modify_by"`
	ModifyTime         types.String        `tfsdk:"modify_time"`
	ModifyType         types.String        `tfsdk:"modify_type"`
	Silent             types.String        `tfsdk:"silent"`
	Status             types.String        `tfsdk:"status"`
}

func (r *NPAPolicyGroupsResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_npa_policy_groups"
}

func (r *NPAPolicyGroupsResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "NPAPolicyGroups Resource",
		Attributes: map[string]schema.Attribute{
			"can_be_edited_deleted": schema.StringAttribute{
				Computed: true,
			},
			"group_id": schema.StringAttribute{
				Computed:    true,
				Description: `npa policy group id`,
			},
			"group_name": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"group_order": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"group_order": schema.SingleNestedAttribute{
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"group_id": schema.StringAttribute{
								Optional: true,
							},
							"order": schema.StringAttribute{
								Optional:    true,
								Description: `must be one of ["before", "after"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"before",
										"after",
									),
								},
							},
						},
					},
				},
			},
			"group_pinned_id": schema.StringAttribute{
				Computed: true,
			},
			"group_prod_id": schema.StringAttribute{
				Computed: true,
			},
			"group_type": schema.StringAttribute{
				Computed: true,
			},
			"modify_by": schema.StringAttribute{
				Optional: true,
			},
			"modify_time": schema.StringAttribute{
				Computed: true,
			},
			"modify_type": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"silent": schema.StringAttribute{
				Optional:    true,
				Description: `flag to skip output except status code. must be one of ["1", "0"]`,
				Validators: []validator.String{
					stringvalidator.OneOf("1", "0"),
				},
			},
			"status": schema.StringAttribute{
				Computed:    true,
				Description: `must be one of ["success", "error"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"success",
						"error",
					),
				},
			},
		},
	}
}

func (r *NPAPolicyGroupsResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderNs)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderNs, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *NPAPolicyGroupsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *NPAPolicyGroupsResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	silent := new(operations.CreateNPAPolicyGroupsQueryParamSilent)
	if !data.Silent.IsUnknown() && !data.Silent.IsNull() {
		*silent = operations.CreateNPAPolicyGroupsQueryParamSilent(data.Silent.ValueString())
	} else {
		silent = nil
	}
	npaPolicygroupRequest := *data.ToSharedNpaPolicygroupRequest()
	request := operations.CreateNPAPolicyGroupsRequest{
		Silent:                silent,
		NpaPolicygroupRequest: npaPolicygroupRequest,
	}
	res, err := r.client.NPAPolicyGroups.Create(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedNpaPolicygroupResponseItem(res.Object.Data)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var groupID string
	groupID = data.GroupID.ValueString()

	request1 := operations.GetNPAPolicyGroupByIDRequest{
		GroupID: groupID,
	}
	res1, err := r.client.NPAPolicyGroups.Read(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Object != nil && res1.Object.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedNpaPolicygroupResponseItem(res1.Object.Data)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPolicyGroupsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *NPAPolicyGroupsResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var groupID string
	groupID = data.GroupID.ValueString()

	request := operations.GetNPAPolicyGroupByIDRequest{
		GroupID: groupID,
	}
	res, err := r.client.NPAPolicyGroups.Read(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedNpaPolicygroupResponseItem(res.Object.Data)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPolicyGroupsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *NPAPolicyGroupsResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var groupID string
	groupID = data.GroupID.ValueString()

	silent := new(operations.UpdateNPAPolicyGroupsQueryParamSilent)
	if !data.Silent.IsUnknown() && !data.Silent.IsNull() {
		*silent = operations.UpdateNPAPolicyGroupsQueryParamSilent(data.Silent.ValueString())
	} else {
		silent = nil
	}
	npaPolicygroupRequest := *data.ToSharedNpaPolicygroupRequest()
	request := operations.UpdateNPAPolicyGroupsRequest{
		GroupID:               groupID,
		Silent:                silent,
		NpaPolicygroupRequest: npaPolicygroupRequest,
	}
	res, err := r.client.NPAPolicyGroups.Update(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil && res.Object.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedNpaPolicygroupResponseItem(res.Object.Data)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var groupId1 string
	groupId1 = data.GroupID.ValueString()

	request1 := operations.GetNPAPolicyGroupByIDRequest{
		GroupID: groupId1,
	}
	res1, err := r.client.NPAPolicyGroups.Read(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Object != nil && res1.Object.Data != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedNpaPolicygroupResponseItem(res1.Object.Data)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *NPAPolicyGroupsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *NPAPolicyGroupsResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var groupID string
	groupID = data.GroupID.ValueString()

	request := operations.DeleteNPAPolicyGroupsRequest{
		GroupID: groupID,
	}
	res, err := r.client.NPAPolicyGroups.Delete(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *NPAPolicyGroupsResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("group_id"), req.ID)...)
}
