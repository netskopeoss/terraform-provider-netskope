// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-terraform/internal/provider/types"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SCIMGroupsDataSource{}
var _ datasource.DataSourceWithConfigure = &SCIMGroupsDataSource{}

func NewSCIMGroupsDataSource() datasource.DataSource {
	return &SCIMGroupsDataSource{}
}

// SCIMGroupsDataSource is the data source implementation.
type SCIMGroupsDataSource struct {
	client *sdk.TerraformProviderNs
}

// SCIMGroupsDataSourceModel describes the data model.
type SCIMGroupsDataSourceModel struct {
	Count        types.Int64                      `tfsdk:"count"`
	Filter       types.String                     `tfsdk:"filter"`
	ItemsPerPage types.Int64                      `tfsdk:"items_per_page"`
	Resources    []tfTypes.GetSCIMGroupsResources `tfsdk:"resources"`
	Schemas      []types.String                   `tfsdk:"schemas"`
	StartIndex   types.Int64                      `tfsdk:"start_index"`
	TotalResults types.Int64                      `tfsdk:"total_results"`
}

// Metadata returns the data source type name.
func (r *SCIMGroupsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_scim_groups"
}

// Schema defines the schema for the data source.
func (r *SCIMGroupsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SCIMGroups DataSource",

		Attributes: map[string]schema.Attribute{
			"count": schema.Int64Attribute{
				Optional: true,
			},
			"filter": schema.StringAttribute{
				Optional:    true,
				Description: `key eq value pair like - displayName/externalId and pass the value to be searched for the key passed.  Example: displayName eq "sample_Group1"  `,
			},
			"items_per_page": schema.Int64Attribute{
				Computed: true,
			},
			"resources": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"display_name": schema.StringAttribute{
							Computed:    true,
							Description: `Display name for group.`,
						},
						"external_id": schema.StringAttribute{
							Computed:    true,
							Description: `Optional - Scim External ID`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `SCIM Group ID`,
						},
					},
				},
			},
			"schemas": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `schema of the resource`,
			},
			"start_index": schema.Int64Attribute{
				Computed: true,
				Optional: true,
			},
			"total_results": schema.Int64Attribute{
				Computed: true,
			},
		},
	}
}

func (r *SCIMGroupsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderNs)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderNs, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SCIMGroupsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SCIMGroupsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	filter := new(string)
	if !data.Filter.IsUnknown() && !data.Filter.IsNull() {
		*filter = data.Filter.ValueString()
	} else {
		filter = nil
	}
	startIndex := new(int64)
	if !data.StartIndex.IsUnknown() && !data.StartIndex.IsNull() {
		*startIndex = data.StartIndex.ValueInt64()
	} else {
		startIndex = nil
	}
	count := new(int64)
	if !data.Count.IsUnknown() && !data.Count.IsNull() {
		*count = data.Count.ValueInt64()
	} else {
		count = nil
	}
	request := operations.GetSCIMGroupsRequest{
		Filter:     filter,
		StartIndex: startIndex,
		Count:      count,
	}
	res, err := r.client.ScimGroups.GetSCIMGroups(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.TwoHundredApplicationJSONObject == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromOperationsGetSCIMGroupsResponseBody(res.TwoHundredApplicationJSONObject)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
