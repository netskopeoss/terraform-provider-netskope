// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netskopeoss/terraform-provider-netskope/internal/provider/typeconvert"
	tfTypes "github.com/netskopeoss/terraform-provider-netskope/internal/provider/types"
	"github.com/netskopeoss/terraform-provider-netskope/internal/sdk/models/operations"
	"github.com/netskopeoss/terraform-provider-netskope/internal/sdk/models/shared"
)

func (r *NPAPublisherDataSourceModel) RefreshFromSharedPublisherResponseData(ctx context.Context, resp *shared.PublisherResponseData) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AppsCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.AppsCount))
		if resp.Assessment == nil {
			r.Assessment = nil
		} else {
			r.Assessment = &tfTypes.PublisherResponseAssessment{}
			if resp.Assessment.CaCertsStatus == nil {
				r.Assessment.CaCertsStatus = nil
			} else {
				r.Assessment.CaCertsStatus = &tfTypes.PublisherResponseCaCertsStatus{}
				r.Assessment.CaCertsStatus.Hashes = make([]types.String, 0, len(resp.Assessment.CaCertsStatus.Hashes))
				for _, v := range resp.Assessment.CaCertsStatus.Hashes {
					r.Assessment.CaCertsStatus.Hashes = append(r.Assessment.CaCertsStatus.Hashes, types.StringValue(v))
				}
				r.Assessment.CaCertsStatus.LastModified = types.Float64PointerValue(resp.Assessment.CaCertsStatus.LastModified)
			}
			r.Assessment.EeeSupport = types.BoolPointerValue(resp.Assessment.EeeSupport)
			r.Assessment.HddFree = types.StringPointerValue(resp.Assessment.HddFree)
			r.Assessment.HddTotal = types.StringPointerValue(resp.Assessment.HddTotal)
			r.Assessment.IPAddress = types.StringPointerValue(resp.Assessment.IPAddress)
			r.Assessment.Latency = types.Float64PointerValue(resp.Assessment.Latency)
			r.Assessment.Version = types.StringPointerValue(resp.Assessment.Version)
		}
		if resp.Capabilities == nil {
			r.Capabilities = nil
		} else {
			r.Capabilities = &tfTypes.PublisherResponseCapabilities{}
			r.Capabilities.AutoUpgrade = types.BoolPointerValue(resp.Capabilities.AutoUpgrade)
			r.Capabilities.Dtls = types.BoolPointerValue(resp.Capabilities.Dtls)
			r.Capabilities.Eee = types.BoolPointerValue(resp.Capabilities.Eee)
			r.Capabilities.NwaBa = types.BoolPointerValue(resp.Capabilities.NwaBa)
			if resp.Capabilities.PullNsconfig == nil {
				r.Capabilities.PullNsconfig = nil
			} else {
				r.Capabilities.PullNsconfig = &tfTypes.PublisherResponsePullNsconfig{}
				r.Capabilities.PullNsconfig.OrgkeyExist = types.BoolPointerValue(resp.Capabilities.PullNsconfig.OrgkeyExist)
				r.Capabilities.PullNsconfig.OrguriExist = types.BoolPointerValue(resp.Capabilities.PullNsconfig.OrguriExist)
			}
		}
		r.CommonName = types.StringPointerValue(resp.CommonName)
		r.ConnectedApps = make([]types.String, 0, len(resp.ConnectedApps))
		for _, v := range resp.ConnectedApps {
			r.ConnectedApps = append(r.ConnectedApps, types.StringValue(v))
		}
		r.Lbrokerconnect = types.BoolPointerValue(resp.Lbrokerconnect)
		r.PublisherID = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.PublisherID))
		r.PublisherName = types.StringPointerValue(resp.PublisherName)
		r.PublisherUpgradeProfilesID = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.PublisherUpgradeProfilesID))
		r.Registered = types.BoolPointerValue(resp.Registered)
		if resp.Status != nil {
			r.Status = types.StringValue(string(*resp.Status))
		} else {
			r.Status = types.StringNull()
		}
		r.SticherPop = types.StringPointerValue(resp.SticherPop)
		r.StitcherID = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.StitcherID))
		if resp.UpgradeFailedReason == nil {
			r.UpgradeFailedReason = nil
		} else {
			r.UpgradeFailedReason = &tfTypes.PublisherResponseUpgradeFailedReason{}
			r.UpgradeFailedReason.Detail = types.StringPointerValue(resp.UpgradeFailedReason.Detail)
			r.UpgradeFailedReason.ErrorCode = types.Float64PointerValue(resp.UpgradeFailedReason.ErrorCode)
			r.UpgradeFailedReason.Timestamp = types.Float64PointerValue(resp.UpgradeFailedReason.Timestamp)
			r.UpgradeFailedReason.Version = types.StringPointerValue(resp.UpgradeFailedReason.Version)
		}
		r.UpgradeRequest = types.BoolPointerValue(resp.UpgradeRequest)
		if resp.UpgradeStatus == nil {
			r.UpgradeStatus = nil
		} else {
			r.UpgradeStatus = &tfTypes.PublisherResponseUpgradeStatus{}
			r.UpgradeStatus.Upstat = types.StringPointerValue(resp.UpgradeStatus.Upstat)
		}
	}

	return diags
}

func (r *NPAPublisherDataSourceModel) ToOperationsGetNPAPublisherByIDRequest(ctx context.Context) (*operations.GetNPAPublisherByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var publisherID int
	publisherID = int(r.PublisherID.ValueInt32())

	out := operations.GetNPAPublisherByIDRequest{
		PublisherID: publisherID,
	}

	return &out, diags
}
