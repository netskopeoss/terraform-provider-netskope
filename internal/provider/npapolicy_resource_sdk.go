// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/pkg/models/shared"
)

func (r *NPAPolicyResourceModel) ToSharedNpaPolicyRequest() *shared.NpaPolicyRequest {
	ruleName := new(string)
	if !r.RuleName.IsUnknown() && !r.RuleName.IsNull() {
		*ruleName = r.RuleName.ValueString()
	} else {
		ruleName = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var ruleData *shared.NpaPolicyRuleData
	if r.RuleData != nil {
		var users []string = nil
		for _, usersItem := range r.RuleData.Users {
			users = append(users, usersItem.ValueString())
		}
		var userGroups []string = nil
		for _, userGroupsItem := range r.RuleData.UserGroups {
			userGroups = append(userGroups, userGroupsItem.ValueString())
		}
		var organizationUnits []string = nil
		for _, organizationUnitsItem := range r.RuleData.OrganizationUnits {
			organizationUnits = append(organizationUnits, organizationUnitsItem.ValueString())
		}
		userType := new(shared.UserType)
		if !r.RuleData.UserType.IsUnknown() && !r.RuleData.UserType.IsNull() {
			*userType = shared.UserType(r.RuleData.UserType.ValueString())
		} else {
			userType = nil
		}
		var accessMethod []string = nil
		for _, accessMethodItem := range r.RuleData.AccessMethod {
			accessMethod = append(accessMethod, accessMethodItem.ValueString())
		}
		policyType := new(shared.PolicyType)
		if !r.RuleData.PolicyType.IsUnknown() && !r.RuleData.PolicyType.IsNull() {
			*policyType = shared.PolicyType(r.RuleData.PolicyType.ValueString())
		} else {
			policyType = nil
		}
		var privateApps []string = nil
		for _, privateAppsItem := range r.RuleData.PrivateApps {
			privateApps = append(privateApps, privateAppsItem.ValueString())
		}
		var privateAppIds []string = nil
		for _, privateAppIdsItem := range r.RuleData.PrivateAppIds {
			privateAppIds = append(privateAppIds, privateAppIdsItem.ValueString())
		}
		var privateAppTags []string = nil
		for _, privateAppTagsItem := range r.RuleData.PrivateAppTags {
			privateAppTags = append(privateAppTags, privateAppTagsItem.ValueString())
		}
		var privateAppTagIds []string = nil
		for _, privateAppTagIdsItem := range r.RuleData.PrivateAppTagIds {
			privateAppTagIds = append(privateAppTagIds, privateAppTagIdsItem.ValueString())
		}
		var privateAppsWithActivities []shared.PrivateAppsWithActivities = nil
		for _, privateAppsWithActivitiesItem := range r.RuleData.PrivateAppsWithActivities {
			appName := new(string)
			if !privateAppsWithActivitiesItem.AppName.IsUnknown() && !privateAppsWithActivitiesItem.AppName.IsNull() {
				*appName = privateAppsWithActivitiesItem.AppName.ValueString()
			} else {
				appName = nil
			}
			var activities []shared.Activities = nil
			for _, activitiesItem := range privateAppsWithActivitiesItem.Activities {
				activity := new(shared.Activity)
				if !activitiesItem.Activity.IsUnknown() && !activitiesItem.Activity.IsNull() {
					*activity = shared.Activity(activitiesItem.Activity.ValueString())
				} else {
					activity = nil
				}
				var listOfConstraints []string = nil
				for _, listOfConstraintsItem := range activitiesItem.ListOfConstraints {
					listOfConstraints = append(listOfConstraints, listOfConstraintsItem.ValueString())
				}
				activities = append(activities, shared.Activities{
					Activity:          activity,
					ListOfConstraints: listOfConstraints,
				})
			}
			privateAppsWithActivities = append(privateAppsWithActivities, shared.PrivateAppsWithActivities{
				AppName:    appName,
				Activities: activities,
			})
		}
		var matchCriteriaAction *shared.MatchCriteriaAction
		if r.RuleData.MatchCriteriaAction != nil {
			actionName := new(shared.ActionName)
			if !r.RuleData.MatchCriteriaAction.ActionName.IsUnknown() && !r.RuleData.MatchCriteriaAction.ActionName.IsNull() {
				*actionName = shared.ActionName(r.RuleData.MatchCriteriaAction.ActionName.ValueString())
			} else {
				actionName = nil
			}
			matchCriteriaAction = &shared.MatchCriteriaAction{
				ActionName: actionName,
			}
		}
		classification := new(string)
		if !r.RuleData.Classification.IsUnknown() && !r.RuleData.Classification.IsNull() {
			*classification = r.RuleData.Classification.ValueString()
		} else {
			classification = nil
		}
		showDlpProfileActionTable := new(bool)
		if !r.RuleData.ShowDlpProfileActionTable.IsUnknown() && !r.RuleData.ShowDlpProfileActionTable.IsNull() {
			*showDlpProfileActionTable = r.RuleData.ShowDlpProfileActionTable.ValueBool()
		} else {
			showDlpProfileActionTable = nil
		}
		externalDlp := new(bool)
		if !r.RuleData.ExternalDlp.IsUnknown() && !r.RuleData.ExternalDlp.IsNull() {
			*externalDlp = r.RuleData.ExternalDlp.ValueBool()
		} else {
			externalDlp = nil
		}
		var netLocationObj []string = nil
		for _, netLocationObjItem := range r.RuleData.NetLocationObj {
			netLocationObj = append(netLocationObj, netLocationObjItem.ValueString())
		}
		bNegateNetLocation := new(bool)
		if !r.RuleData.BNegateNetLocation.IsUnknown() && !r.RuleData.BNegateNetLocation.IsNull() {
			*bNegateNetLocation = r.RuleData.BNegateNetLocation.ValueBool()
		} else {
			bNegateNetLocation = nil
		}
		var srcCountries []string = nil
		for _, srcCountriesItem := range r.RuleData.SrcCountries {
			srcCountries = append(srcCountries, srcCountriesItem.ValueString())
		}
		bNegateSrcCountries := new(bool)
		if !r.RuleData.BNegateSrcCountries.IsUnknown() && !r.RuleData.BNegateSrcCountries.IsNull() {
			*bNegateSrcCountries = r.RuleData.BNegateSrcCountries.ValueBool()
		} else {
			bNegateSrcCountries = nil
		}
		jsonVersion := new(int64)
		if !r.RuleData.JSONVersion.IsUnknown() && !r.RuleData.JSONVersion.IsNull() {
			*jsonVersion = r.RuleData.JSONVersion.ValueInt64()
		} else {
			jsonVersion = nil
		}
		version := new(int64)
		if !r.RuleData.Version.IsUnknown() && !r.RuleData.Version.IsNull() {
			*version = r.RuleData.Version.ValueInt64()
		} else {
			version = nil
		}
		var dlpActions []shared.NpaPolicyRuleDlp = nil
		for _, dlpActionsItem := range r.RuleData.DlpActions {
			dlpProfile := new(string)
			if !dlpActionsItem.DlpProfile.IsUnknown() && !dlpActionsItem.DlpProfile.IsNull() {
				*dlpProfile = dlpActionsItem.DlpProfile.ValueString()
			} else {
				dlpProfile = nil
			}
			var actions []shared.Actions = nil
			for _, actionsItem := range dlpActionsItem.Actions {
				actions = append(actions, shared.Actions(actionsItem.ValueString()))
			}
			dlpActions = append(dlpActions, shared.NpaPolicyRuleDlp{
				DlpProfile: dlpProfile,
				Actions:    actions,
			})
		}
		ruleData = &shared.NpaPolicyRuleData{
			Users:                     users,
			UserGroups:                userGroups,
			OrganizationUnits:         organizationUnits,
			UserType:                  userType,
			AccessMethod:              accessMethod,
			PolicyType:                policyType,
			PrivateApps:               privateApps,
			PrivateAppIds:             privateAppIds,
			PrivateAppTags:            privateAppTags,
			PrivateAppTagIds:          privateAppTagIds,
			PrivateAppsWithActivities: privateAppsWithActivities,
			MatchCriteriaAction:       matchCriteriaAction,
			Classification:            classification,
			ShowDlpProfileActionTable: showDlpProfileActionTable,
			ExternalDlp:               externalDlp,
			NetLocationObj:            netLocationObj,
			BNegateNetLocation:        bNegateNetLocation,
			SrcCountries:              srcCountries,
			BNegateSrcCountries:       bNegateSrcCountries,
			JSONVersion:               jsonVersion,
			Version:                   version,
			DlpActions:                dlpActions,
		}
	}
	var ruleOrder *shared.RuleOrder
	if r.RuleOrder != nil {
		order := new(shared.Order)
		if !r.RuleOrder.Order.IsUnknown() && !r.RuleOrder.Order.IsNull() {
			*order = shared.Order(r.RuleOrder.Order.ValueString())
		} else {
			order = nil
		}
		ruleName1 := new(string)
		if !r.RuleOrder.RuleName.IsUnknown() && !r.RuleOrder.RuleName.IsNull() {
			*ruleName1 = r.RuleOrder.RuleName.ValueString()
		} else {
			ruleName1 = nil
		}
		ruleID := new(string)
		if !r.RuleOrder.RuleID.IsUnknown() && !r.RuleOrder.RuleID.IsNull() {
			*ruleID = r.RuleOrder.RuleID.ValueString()
		} else {
			ruleID = nil
		}
		position := new(int64)
		if !r.RuleOrder.Position.IsUnknown() && !r.RuleOrder.Position.IsNull() {
			*position = r.RuleOrder.Position.ValueInt64()
		} else {
			position = nil
		}
		ruleOrder = &shared.RuleOrder{
			Order:    order,
			RuleName: ruleName1,
			RuleID:   ruleID,
			Position: position,
		}
	}
	groupName := new(string)
	if !r.GroupName.IsUnknown() && !r.GroupName.IsNull() {
		*groupName = r.GroupName.ValueString()
	} else {
		groupName = nil
	}
	enabled := new(string)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueString()
	} else {
		enabled = nil
	}
	out := shared.NpaPolicyRequest{
		RuleName:    ruleName,
		Description: description,
		RuleData:    ruleData,
		RuleOrder:   ruleOrder,
		GroupName:   groupName,
		Enabled:     enabled,
	}
	return &out
}

func (r *NPAPolicyResourceModel) RefreshFromSharedNpaPolicyResponseItem(resp *shared.NpaPolicyResponseItem) {
	if resp != nil {
		if resp.RuleData == nil {
			r.RuleData = nil
		} else {
			r.RuleData = &NpaPolicyRuleData{}
			r.RuleData.AccessMethod = nil
			for _, v := range resp.RuleData.AccessMethod {
				r.RuleData.AccessMethod = append(r.RuleData.AccessMethod, types.StringValue(v))
			}
			r.RuleData.BNegateNetLocation = types.BoolPointerValue(resp.RuleData.BNegateNetLocation)
			r.RuleData.BNegateSrcCountries = types.BoolPointerValue(resp.RuleData.BNegateSrcCountries)
			r.RuleData.Classification = types.StringPointerValue(resp.RuleData.Classification)
			if len(r.RuleData.DlpActions) > len(resp.RuleData.DlpActions) {
				r.RuleData.DlpActions = r.RuleData.DlpActions[:len(resp.RuleData.DlpActions)]
			}
			for dlpActionsCount, dlpActionsItem := range resp.RuleData.DlpActions {
				var dlpActions1 NpaPolicyRuleDlp
				dlpActions1.Actions = nil
				for _, v := range dlpActionsItem.Actions {
					dlpActions1.Actions = append(dlpActions1.Actions, types.StringValue(string(v)))
				}
				dlpActions1.DlpProfile = types.StringPointerValue(dlpActionsItem.DlpProfile)
				if dlpActionsCount+1 > len(r.RuleData.DlpActions) {
					r.RuleData.DlpActions = append(r.RuleData.DlpActions, dlpActions1)
				} else {
					r.RuleData.DlpActions[dlpActionsCount].Actions = dlpActions1.Actions
					r.RuleData.DlpActions[dlpActionsCount].DlpProfile = dlpActions1.DlpProfile
				}
			}
			r.RuleData.ExternalDlp = types.BoolPointerValue(resp.RuleData.ExternalDlp)
			r.RuleData.JSONVersion = types.Int64PointerValue(resp.RuleData.JSONVersion)
			if resp.RuleData.MatchCriteriaAction == nil {
				r.RuleData.MatchCriteriaAction = nil
			} else {
				r.RuleData.MatchCriteriaAction = &MatchCriteriaAction{}
				if resp.RuleData.MatchCriteriaAction.ActionName != nil {
					r.RuleData.MatchCriteriaAction.ActionName = types.StringValue(string(*resp.RuleData.MatchCriteriaAction.ActionName))
				} else {
					r.RuleData.MatchCriteriaAction.ActionName = types.StringNull()
				}
			}
			r.RuleData.NetLocationObj = nil
			for _, v := range resp.RuleData.NetLocationObj {
				r.RuleData.NetLocationObj = append(r.RuleData.NetLocationObj, types.StringValue(v))
			}
			r.RuleData.OrganizationUnits = nil
			for _, v := range resp.RuleData.OrganizationUnits {
				r.RuleData.OrganizationUnits = append(r.RuleData.OrganizationUnits, types.StringValue(v))
			}
			if resp.RuleData.PolicyType != nil {
				r.RuleData.PolicyType = types.StringValue(string(*resp.RuleData.PolicyType))
			} else {
				r.RuleData.PolicyType = types.StringNull()
			}
			r.RuleData.PrivateAppIds = nil
			for _, v := range resp.RuleData.PrivateAppIds {
				r.RuleData.PrivateAppIds = append(r.RuleData.PrivateAppIds, types.StringValue(v))
			}
			r.RuleData.PrivateApps = nil
			for _, v := range resp.RuleData.PrivateApps {
				r.RuleData.PrivateApps = append(r.RuleData.PrivateApps, types.StringValue(v))
			}
			if len(r.RuleData.PrivateAppsWithActivities) > len(resp.RuleData.PrivateAppsWithActivities) {
				r.RuleData.PrivateAppsWithActivities = r.RuleData.PrivateAppsWithActivities[:len(resp.RuleData.PrivateAppsWithActivities)]
			}
			for privateAppsWithActivitiesCount, privateAppsWithActivitiesItem := range resp.RuleData.PrivateAppsWithActivities {
				var privateAppsWithActivities1 PrivateAppsWithActivities
				for activitiesCount, activitiesItem := range privateAppsWithActivitiesItem.Activities {
					var activities1 Activities
					if activitiesItem.Activity != nil {
						activities1.Activity = types.StringValue(string(*activitiesItem.Activity))
					} else {
						activities1.Activity = types.StringNull()
					}
					activities1.ListOfConstraints = nil
					for _, v := range activitiesItem.ListOfConstraints {
						activities1.ListOfConstraints = append(activities1.ListOfConstraints, types.StringValue(v))
					}
					if activitiesCount+1 > len(privateAppsWithActivities1.Activities) {
						privateAppsWithActivities1.Activities = append(privateAppsWithActivities1.Activities, activities1)
					} else {
						privateAppsWithActivities1.Activities[activitiesCount].Activity = activities1.Activity
						privateAppsWithActivities1.Activities[activitiesCount].ListOfConstraints = activities1.ListOfConstraints
					}
				}
				privateAppsWithActivities1.AppName = types.StringPointerValue(privateAppsWithActivitiesItem.AppName)
				if privateAppsWithActivitiesCount+1 > len(r.RuleData.PrivateAppsWithActivities) {
					r.RuleData.PrivateAppsWithActivities = append(r.RuleData.PrivateAppsWithActivities, privateAppsWithActivities1)
				} else {
					r.RuleData.PrivateAppsWithActivities[privateAppsWithActivitiesCount].Activities = privateAppsWithActivities1.Activities
					r.RuleData.PrivateAppsWithActivities[privateAppsWithActivitiesCount].AppName = privateAppsWithActivities1.AppName
				}
			}
			r.RuleData.PrivateAppTagIds = nil
			for _, v := range resp.RuleData.PrivateAppTagIds {
				r.RuleData.PrivateAppTagIds = append(r.RuleData.PrivateAppTagIds, types.StringValue(v))
			}
			r.RuleData.PrivateAppTags = nil
			for _, v := range resp.RuleData.PrivateAppTags {
				r.RuleData.PrivateAppTags = append(r.RuleData.PrivateAppTags, types.StringValue(v))
			}
			r.RuleData.ShowDlpProfileActionTable = types.BoolPointerValue(resp.RuleData.ShowDlpProfileActionTable)
			r.RuleData.SrcCountries = nil
			for _, v := range resp.RuleData.SrcCountries {
				r.RuleData.SrcCountries = append(r.RuleData.SrcCountries, types.StringValue(v))
			}
			r.RuleData.UserGroups = nil
			for _, v := range resp.RuleData.UserGroups {
				r.RuleData.UserGroups = append(r.RuleData.UserGroups, types.StringValue(v))
			}
			r.RuleData.Users = nil
			for _, v := range resp.RuleData.Users {
				r.RuleData.Users = append(r.RuleData.Users, types.StringValue(v))
			}
			if resp.RuleData.UserType != nil {
				r.RuleData.UserType = types.StringValue(string(*resp.RuleData.UserType))
			} else {
				r.RuleData.UserType = types.StringNull()
			}
			r.RuleData.Version = types.Int64PointerValue(resp.RuleData.Version)
		}
		r.RuleName = types.StringPointerValue(resp.RuleName)
		r.RuleID = types.StringPointerValue(resp.RuleID)
	}
}
