// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/shared"
	"math/big"
)

func (r *NPAPublishersBulkUpgradeRequestResourceModel) ToSharedPublisherBulkRequest() *shared.PublisherBulkRequest {
	var publishers *shared.Publishers
	if r.Publishers != nil {
		var apply *shared.Apply
		if r.Publishers.Apply != nil {
			var upgradeRequest bool
			upgradeRequest = r.Publishers.Apply.UpgradeRequest.ValueBool()

			apply = &shared.Apply{
				UpgradeRequest: upgradeRequest,
			}
		}
		var publisherID []string = []string{}
		for _, publisherIDItem := range r.Publishers.PublisherID {
			publisherID = append(publisherID, publisherIDItem.ValueString())
		}
		publishers = &shared.Publishers{
			Apply:       apply,
			PublisherID: publisherID,
		}
	}
	out := shared.PublisherBulkRequest{
		Publishers: publishers,
	}
	return &out
}

func (r *NPAPublishersBulkUpgradeRequestResourceModel) RefreshFromSharedPublishersBulkResponse(resp *shared.PublishersBulkResponse) {
	if resp != nil {
		if resp.Data == nil {
			r.Data = nil
		} else {
			r.Data = &tfTypes.PublishersBulkResponseData{}
			r.Data.Publishers = []tfTypes.PublisherBulkItem{}
			if len(r.Data.Publishers) > len(resp.Data.Publishers) {
				r.Data.Publishers = r.Data.Publishers[:len(resp.Data.Publishers)]
			}
			for publishersCount, publishersItem := range resp.Data.Publishers {
				var publishers1 tfTypes.PublisherBulkItem
				if publishersItem.AppsCount != nil {
					publishers1.AppsCount = types.Int64Value(int64(*publishersItem.AppsCount))
				} else {
					publishers1.AppsCount = types.Int64Null()
				}
				if publishersItem.Assessment == nil {
					publishers1.Assessment = nil
				} else {
					publishers1.Assessment = &tfTypes.UpgradePublisherResponseAssessment{}
					if publishersItem.Assessment.CaCertsStatus == nil {
						publishers1.Assessment.CaCertsStatus = nil
					} else {
						publishers1.Assessment.CaCertsStatus = &tfTypes.UpgradePublisherResponseCaCertsStatus{}
						publishers1.Assessment.CaCertsStatus.Hashes = make([]types.String, 0, len(publishersItem.Assessment.CaCertsStatus.Hashes))
						for _, v := range publishersItem.Assessment.CaCertsStatus.Hashes {
							publishers1.Assessment.CaCertsStatus.Hashes = append(publishers1.Assessment.CaCertsStatus.Hashes, types.StringValue(v))
						}
						if publishersItem.Assessment.CaCertsStatus.LastModified != nil {
							publishers1.Assessment.CaCertsStatus.LastModified = types.Int64Value(int64(*publishersItem.Assessment.CaCertsStatus.LastModified))
						} else {
							publishers1.Assessment.CaCertsStatus.LastModified = types.Int64Null()
						}
					}
					publishers1.Assessment.EeeSupport = types.BoolPointerValue(publishersItem.Assessment.EeeSupport)
					publishers1.Assessment.HddFree = types.StringPointerValue(publishersItem.Assessment.HddFree)
					publishers1.Assessment.HddTotal = types.StringPointerValue(publishersItem.Assessment.HddTotal)
					publishers1.Assessment.IPAddress = types.StringPointerValue(publishersItem.Assessment.IPAddress)
					if publishersItem.Assessment.Latency != nil {
						publishers1.Assessment.Latency = types.Int64Value(int64(*publishersItem.Assessment.Latency))
					} else {
						publishers1.Assessment.Latency = types.Int64Null()
					}
					publishers1.Assessment.Version = types.StringPointerValue(publishersItem.Assessment.Version)
				}
				if publishersItem.Capabilities == nil {
					publishers1.Capabilities = nil
				} else {
					publishers1.Capabilities = &tfTypes.PublisherResponseCapabilities{}
					publishers1.Capabilities.AutoUpgrade = types.BoolPointerValue(publishersItem.Capabilities.AutoUpgrade)
					publishers1.Capabilities.Dtls = types.BoolPointerValue(publishersItem.Capabilities.Dtls)
					publishers1.Capabilities.Eee = types.BoolPointerValue(publishersItem.Capabilities.Eee)
					publishers1.Capabilities.NwaBa = types.BoolPointerValue(publishersItem.Capabilities.NwaBa)
					if publishersItem.Capabilities.PullNsconfig == nil {
						publishers1.Capabilities.PullNsconfig = nil
					} else {
						publishers1.Capabilities.PullNsconfig = &tfTypes.PublisherResponsePullNsconfig{}
						publishers1.Capabilities.PullNsconfig.OrgkeyExist = types.BoolPointerValue(publishersItem.Capabilities.PullNsconfig.OrgkeyExist)
						publishers1.Capabilities.PullNsconfig.OrguriExist = types.BoolPointerValue(publishersItem.Capabilities.PullNsconfig.OrguriExist)
					}
				}
				publishers1.CommonName = types.StringPointerValue(publishersItem.CommonName)
				publishers1.ConnectedApps = make([]types.String, 0, len(publishersItem.ConnectedApps))
				for _, v := range publishersItem.ConnectedApps {
					publishers1.ConnectedApps = append(publishers1.ConnectedApps, types.StringValue(v))
				}
				publishers1.Lbrokerconnect = types.BoolPointerValue(publishersItem.Lbrokerconnect)
				if publishersItem.PublisherID != nil {
					publishers1.PublisherID = types.Int64Value(int64(*publishersItem.PublisherID))
				} else {
					publishers1.PublisherID = types.Int64Null()
				}
				publishers1.PublisherName = types.StringPointerValue(publishersItem.PublisherName)
				if publishersItem.PublisherUpgradeProfilesID != nil {
					publishers1.PublisherUpgradeProfilesID = types.Int64Value(int64(*publishersItem.PublisherUpgradeProfilesID))
				} else {
					publishers1.PublisherUpgradeProfilesID = types.Int64Null()
				}
				publishers1.Registered = types.BoolPointerValue(publishersItem.Registered)
				if publishersItem.Status != nil {
					publishers1.Status = types.StringValue(string(*publishersItem.Status))
				} else {
					publishers1.Status = types.StringNull()
				}
				if publishersItem.StitcherID != nil {
					publishers1.StitcherID = types.Int64Value(int64(*publishersItem.StitcherID))
				} else {
					publishers1.StitcherID = types.Int64Null()
				}
				publishers1.StitcherPop = types.StringPointerValue(publishersItem.StitcherPop)
				if publishersItem.UpgradeFailedReason == nil {
					publishers1.UpgradeFailedReason = nil
				} else {
					publishers1.UpgradeFailedReason = &tfTypes.PublisherResponseUpgradeFailedReason{}
					publishers1.UpgradeFailedReason.Detail = types.StringPointerValue(publishersItem.UpgradeFailedReason.Detail)
					if publishersItem.UpgradeFailedReason.ErrorCode != nil {
						publishers1.UpgradeFailedReason.ErrorCode = types.NumberValue(big.NewFloat(float64(*publishersItem.UpgradeFailedReason.ErrorCode)))
					} else {
						publishers1.UpgradeFailedReason.ErrorCode = types.NumberNull()
					}
					if publishersItem.UpgradeFailedReason.Timestamp != nil {
						publishers1.UpgradeFailedReason.Timestamp = types.NumberValue(big.NewFloat(float64(*publishersItem.UpgradeFailedReason.Timestamp)))
					} else {
						publishers1.UpgradeFailedReason.Timestamp = types.NumberNull()
					}
					publishers1.UpgradeFailedReason.Version = types.StringPointerValue(publishersItem.UpgradeFailedReason.Version)
				}
				publishers1.UpgradeRequest = types.BoolPointerValue(publishersItem.UpgradeRequest)
				if publishersItem.UpgradeStatus == nil {
					publishers1.UpgradeStatus = nil
				} else {
					publishers1.UpgradeStatus = &tfTypes.PublisherResponseUpgradeStatus{}
					publishers1.UpgradeStatus.Upstat = types.StringPointerValue(publishersItem.UpgradeStatus.Upstat)
				}
				if publishersCount+1 > len(r.Data.Publishers) {
					r.Data.Publishers = append(r.Data.Publishers, publishers1)
				} else {
					r.Data.Publishers[publishersCount].AppsCount = publishers1.AppsCount
					r.Data.Publishers[publishersCount].Assessment = publishers1.Assessment
					r.Data.Publishers[publishersCount].Capabilities = publishers1.Capabilities
					r.Data.Publishers[publishersCount].CommonName = publishers1.CommonName
					r.Data.Publishers[publishersCount].ConnectedApps = publishers1.ConnectedApps
					r.Data.Publishers[publishersCount].Lbrokerconnect = publishers1.Lbrokerconnect
					r.Data.Publishers[publishersCount].PublisherID = publishers1.PublisherID
					r.Data.Publishers[publishersCount].PublisherName = publishers1.PublisherName
					r.Data.Publishers[publishersCount].PublisherUpgradeProfilesID = publishers1.PublisherUpgradeProfilesID
					r.Data.Publishers[publishersCount].Registered = publishers1.Registered
					r.Data.Publishers[publishersCount].Status = publishers1.Status
					r.Data.Publishers[publishersCount].StitcherID = publishers1.StitcherID
					r.Data.Publishers[publishersCount].StitcherPop = publishers1.StitcherPop
					r.Data.Publishers[publishersCount].UpgradeFailedReason = publishers1.UpgradeFailedReason
					r.Data.Publishers[publishersCount].UpgradeRequest = publishers1.UpgradeRequest
					r.Data.Publishers[publishersCount].UpgradeStatus = publishers1.UpgradeStatus
				}
			}
		}
	}
}
