// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netskope/terraform-provider-ns/internal/provider/typeconvert"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/operations"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/shared"
)

func (r *NPAPublisherAppsListDataSourceModel) RefreshFromSharedPublishersPrivateAppsResponse(ctx context.Context, resp *shared.PublishersPrivateAppsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Data = []tfTypes.PublishersPrivateAppsResponseData{}
		if len(r.Data) > len(resp.Data) {
			r.Data = r.Data[:len(resp.Data)]
		}
		for dataCount, dataItem := range resp.Data {
			var data tfTypes.PublishersPrivateAppsResponseData
			data.AllowUnauthenticatedCors = types.BoolPointerValue(dataItem.AllowUnauthenticatedCors)
			if dataItem.AppOption == nil {
				data.AppOption = nil
			} else {
				data.AppOption = &tfTypes.PrivateAppsRequestAppOption{}
			}
			data.ClientlessAccess = types.BoolPointerValue(dataItem.ClientlessAccess)
			data.ExternalID = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(dataItem.ExternalID))
			data.Host = types.StringPointerValue(dataItem.Host)
			data.ID = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(dataItem.ID))
			data.IsUserPortalApp = types.BoolPointerValue(dataItem.IsUserPortalApp)
			data.PrivateAppName = types.StringPointerValue(dataItem.PrivateAppName)
			data.PrivateAppProtocol = types.StringPointerValue(dataItem.PrivateAppProtocol)
			data.Protocols = []tfTypes.ProtocolResponseItem{}
			for protocolsCount, protocolsItem := range dataItem.Protocols {
				var protocols tfTypes.ProtocolResponseItem
				protocols.CreatedAt = types.StringPointerValue(protocolsItem.CreatedAt)
				protocols.ID = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(protocolsItem.ID))
				protocols.Port = types.StringPointerValue(protocolsItem.Port)
				protocols.ServiceID = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(protocolsItem.ServiceID))
				protocols.Transport = types.StringPointerValue(protocolsItem.Transport)
				protocols.UpdatedAt = types.StringPointerValue(protocolsItem.UpdatedAt)
				if protocolsCount+1 > len(data.Protocols) {
					data.Protocols = append(data.Protocols, protocols)
				} else {
					data.Protocols[protocolsCount].CreatedAt = protocols.CreatedAt
					data.Protocols[protocolsCount].ID = protocols.ID
					data.Protocols[protocolsCount].Port = protocols.Port
					data.Protocols[protocolsCount].ServiceID = protocols.ServiceID
					data.Protocols[protocolsCount].Transport = protocols.Transport
					data.Protocols[protocolsCount].UpdatedAt = protocols.UpdatedAt
				}
			}
			data.PublicHost = types.StringPointerValue(dataItem.PublicHost)
			if dataItem.Reachability == nil {
				data.Reachability = nil
			} else {
				data.Reachability = &tfTypes.PublishersPrivateAppsResponseReachability{}
				data.Reachability.ErrorCode = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(dataItem.Reachability.ErrorCode))
				data.Reachability.ErrorString = types.StringPointerValue(dataItem.Reachability.ErrorString)
				data.Reachability.Reachable = types.BoolPointerValue(dataItem.Reachability.Reachable)
			}
			data.RealHost = types.StringPointerValue(dataItem.RealHost)
			data.ServicePublisherAssignments = []tfTypes.ServicePublisherAssignmentItem{}
			for servicePublisherAssignmentsCount, servicePublisherAssignmentsItem := range dataItem.ServicePublisherAssignments {
				var servicePublisherAssignments tfTypes.ServicePublisherAssignmentItem
				servicePublisherAssignments.Primary = types.BoolPointerValue(servicePublisherAssignmentsItem.Primary)
				servicePublisherAssignments.PublisherExternalID = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(servicePublisherAssignmentsItem.PublisherExternalID))
				servicePublisherAssignments.PublisherName = types.StringPointerValue(servicePublisherAssignmentsItem.PublisherName)
				if servicePublisherAssignmentsItem.Reachability == nil {
					servicePublisherAssignments.Reachability = nil
				} else {
					servicePublisherAssignments.Reachability = &tfTypes.PublishersPrivateAppsResponseReachability{}
					servicePublisherAssignments.Reachability.ErrorCode = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(servicePublisherAssignmentsItem.Reachability.ErrorCode))
					servicePublisherAssignments.Reachability.ErrorString = types.StringPointerValue(servicePublisherAssignmentsItem.Reachability.ErrorString)
					servicePublisherAssignments.Reachability.Reachable = types.BoolPointerValue(servicePublisherAssignmentsItem.Reachability.Reachable)
				}
				servicePublisherAssignments.ServiceExternalID = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(servicePublisherAssignmentsItem.ServiceExternalID))
				if servicePublisherAssignmentsCount+1 > len(data.ServicePublisherAssignments) {
					data.ServicePublisherAssignments = append(data.ServicePublisherAssignments, servicePublisherAssignments)
				} else {
					data.ServicePublisherAssignments[servicePublisherAssignmentsCount].Primary = servicePublisherAssignments.Primary
					data.ServicePublisherAssignments[servicePublisherAssignmentsCount].PublisherExternalID = servicePublisherAssignments.PublisherExternalID
					data.ServicePublisherAssignments[servicePublisherAssignmentsCount].PublisherName = servicePublisherAssignments.PublisherName
					data.ServicePublisherAssignments[servicePublisherAssignmentsCount].Reachability = servicePublisherAssignments.Reachability
					data.ServicePublisherAssignments[servicePublisherAssignmentsCount].ServiceExternalID = servicePublisherAssignments.ServiceExternalID
				}
			}
			data.SupplimentDNSForOsx = types.BoolPointerValue(dataItem.SupplimentDNSForOsx)
			data.TrustSelfSignedCerts = types.BoolPointerValue(dataItem.TrustSelfSignedCerts)
			data.UsePublisherDNS = types.BoolPointerValue(dataItem.UsePublisherDNS)
			if dataCount+1 > len(r.Data) {
				r.Data = append(r.Data, data)
			} else {
				r.Data[dataCount].AllowUnauthenticatedCors = data.AllowUnauthenticatedCors
				r.Data[dataCount].AppOption = data.AppOption
				r.Data[dataCount].ClientlessAccess = data.ClientlessAccess
				r.Data[dataCount].ExternalID = data.ExternalID
				r.Data[dataCount].Host = data.Host
				r.Data[dataCount].ID = data.ID
				r.Data[dataCount].IsUserPortalApp = data.IsUserPortalApp
				r.Data[dataCount].PrivateAppName = data.PrivateAppName
				r.Data[dataCount].PrivateAppProtocol = data.PrivateAppProtocol
				r.Data[dataCount].Protocols = data.Protocols
				r.Data[dataCount].PublicHost = data.PublicHost
				r.Data[dataCount].Reachability = data.Reachability
				r.Data[dataCount].RealHost = data.RealHost
				r.Data[dataCount].ServicePublisherAssignments = data.ServicePublisherAssignments
				r.Data[dataCount].SupplimentDNSForOsx = data.SupplimentDNSForOsx
				r.Data[dataCount].TrustSelfSignedCerts = data.TrustSelfSignedCerts
				r.Data[dataCount].UsePublisherDNS = data.UsePublisherDNS
			}
		}
	}

	return diags
}

func (r *NPAPublisherAppsListDataSourceModel) ToOperationsGetNPAPublisherAppsRequest(ctx context.Context) (*operations.GetNPAPublisherAppsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var publisherID int
	publisherID = int(r.PublisherID.ValueInt32())

	out := operations.GetNPAPublisherAppsRequest{
		PublisherID: publisherID,
	}

	return &out, diags
}
