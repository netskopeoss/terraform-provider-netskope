// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/netskope/terraform-provider-ns/internal/provider/types"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/shared"
)

func (r *NPAPublisherAppsListDataSourceModel) RefreshFromSharedPrivateAppsResponse(resp *shared.PrivateAppsResponse) {
	if resp != nil {
		if resp.Data == nil {
			r.Data = nil
		} else {
			r.Data = &tfTypes.PrivateAppsResponseData{}
			r.Data.AllowUnauthenticatedCors = types.BoolPointerValue(resp.Data.AllowUnauthenticatedCors)
			r.Data.AppName = types.StringPointerValue(resp.Data.AppName)
			if resp.Data.AppOption == nil {
				r.Data.AppOption = nil
			} else {
				r.Data.AppOption = &tfTypes.AppOption{}
			}
			r.Data.ClientlessAccess = types.BoolPointerValue(resp.Data.ClientlessAccess)
			r.Data.IsUserPortalApp = types.BoolPointerValue(resp.Data.IsUserPortalApp)
			r.Data.ModifiedBy = types.StringPointerValue(resp.Data.ModifiedBy)
			r.Data.ModifyTime = types.StringPointerValue(resp.Data.ModifyTime)
			r.Data.Policies = []types.String{}
			for _, v := range resp.Data.Policies {
				r.Data.Policies = append(r.Data.Policies, types.StringValue(v))
			}
			r.Data.PrivateAppHostname = types.StringPointerValue(resp.Data.PrivateAppHostname)
			if resp.Data.PrivateAppID != nil {
				r.Data.PrivateAppID = types.Int64Value(int64(*resp.Data.PrivateAppID))
			} else {
				r.Data.PrivateAppID = types.Int64Null()
			}
			r.Data.PrivateAppName = types.StringPointerValue(resp.Data.PrivateAppName)
			r.Data.PrivateAppProtocol = types.StringPointerValue(resp.Data.PrivateAppProtocol)
			r.Data.Protocols = []tfTypes.ProtocolResponseItem{}
			if len(r.Data.Protocols) > len(resp.Data.Protocols) {
				r.Data.Protocols = r.Data.Protocols[:len(resp.Data.Protocols)]
			}
			for protocolsCount, protocolsItem := range resp.Data.Protocols {
				var protocols1 tfTypes.ProtocolResponseItem
				protocols1.CreatedAt = types.StringPointerValue(protocolsItem.CreatedAt)
				if protocolsItem.ID != nil {
					protocols1.ID = types.Int64Value(int64(*protocolsItem.ID))
				} else {
					protocols1.ID = types.Int64Null()
				}
				protocols1.Port = types.StringPointerValue(protocolsItem.Port)
				protocols1.Protocol = types.StringPointerValue(protocolsItem.Protocol)
				if protocolsItem.ServiceID != nil {
					protocols1.ServiceID = types.Int64Value(int64(*protocolsItem.ServiceID))
				} else {
					protocols1.ServiceID = types.Int64Null()
				}
				protocols1.UpdatedAt = types.StringPointerValue(protocolsItem.UpdatedAt)
				if protocolsCount+1 > len(r.Data.Protocols) {
					r.Data.Protocols = append(r.Data.Protocols, protocols1)
				} else {
					r.Data.Protocols[protocolsCount].CreatedAt = protocols1.CreatedAt
					r.Data.Protocols[protocolsCount].ID = protocols1.ID
					r.Data.Protocols[protocolsCount].Port = protocols1.Port
					r.Data.Protocols[protocolsCount].Protocol = protocols1.Protocol
					r.Data.Protocols[protocolsCount].ServiceID = protocols1.ServiceID
					r.Data.Protocols[protocolsCount].UpdatedAt = protocols1.UpdatedAt
				}
			}
			r.Data.PublicHost = types.StringPointerValue(resp.Data.PublicHost)
			if resp.Data.Reachability == nil {
				r.Data.Reachability = nil
			} else {
				r.Data.Reachability = &tfTypes.PrivateAppsResponseReachability{}
				r.Data.Reachability.Reachable = types.BoolPointerValue(resp.Data.Reachability.Reachable)
			}
			r.Data.RealHost = types.StringPointerValue(resp.Data.RealHost)
			r.Data.ServicePublisherAssignments = []tfTypes.ServicePublisherAssignmentItem{}
			if len(r.Data.ServicePublisherAssignments) > len(resp.Data.ServicePublisherAssignments) {
				r.Data.ServicePublisherAssignments = r.Data.ServicePublisherAssignments[:len(resp.Data.ServicePublisherAssignments)]
			}
			for servicePublisherAssignmentsCount, servicePublisherAssignmentsItem := range resp.Data.ServicePublisherAssignments {
				var servicePublisherAssignments1 tfTypes.ServicePublisherAssignmentItem
				servicePublisherAssignments1.Primary = types.BoolPointerValue(servicePublisherAssignmentsItem.Primary)
				if servicePublisherAssignmentsItem.PrivateAppID != nil {
					servicePublisherAssignments1.PrivateAppID = types.Int64Value(int64(*servicePublisherAssignmentsItem.PrivateAppID))
				} else {
					servicePublisherAssignments1.PrivateAppID = types.Int64Null()
				}
				if servicePublisherAssignmentsItem.PublisherID != nil {
					servicePublisherAssignments1.PublisherID = types.Int64Value(int64(*servicePublisherAssignmentsItem.PublisherID))
				} else {
					servicePublisherAssignments1.PublisherID = types.Int64Null()
				}
				servicePublisherAssignments1.PublisherName = types.StringPointerValue(servicePublisherAssignmentsItem.PublisherName)
				if servicePublisherAssignmentsItem.Reachability == nil {
					servicePublisherAssignments1.Reachability = nil
				} else {
					servicePublisherAssignments1.Reachability = &tfTypes.Reachability{}
					if servicePublisherAssignmentsItem.Reachability.ErrorCode != nil {
						servicePublisherAssignments1.Reachability.ErrorCode = types.Int64Value(int64(*servicePublisherAssignmentsItem.Reachability.ErrorCode))
					} else {
						servicePublisherAssignments1.Reachability.ErrorCode = types.Int64Null()
					}
					servicePublisherAssignments1.Reachability.ErrorString = types.StringPointerValue(servicePublisherAssignmentsItem.Reachability.ErrorString)
					servicePublisherAssignments1.Reachability.Reachable = types.BoolPointerValue(servicePublisherAssignmentsItem.Reachability.Reachable)
				}
				if servicePublisherAssignmentsCount+1 > len(r.Data.ServicePublisherAssignments) {
					r.Data.ServicePublisherAssignments = append(r.Data.ServicePublisherAssignments, servicePublisherAssignments1)
				} else {
					r.Data.ServicePublisherAssignments[servicePublisherAssignmentsCount].Primary = servicePublisherAssignments1.Primary
					r.Data.ServicePublisherAssignments[servicePublisherAssignmentsCount].PrivateAppID = servicePublisherAssignments1.PrivateAppID
					r.Data.ServicePublisherAssignments[servicePublisherAssignmentsCount].PublisherID = servicePublisherAssignments1.PublisherID
					r.Data.ServicePublisherAssignments[servicePublisherAssignmentsCount].PublisherName = servicePublisherAssignments1.PublisherName
					r.Data.ServicePublisherAssignments[servicePublisherAssignmentsCount].Reachability = servicePublisherAssignments1.Reachability
				}
			}
			r.Data.SteeringConfigs = []types.String{}
			for _, v := range resp.Data.SteeringConfigs {
				r.Data.SteeringConfigs = append(r.Data.SteeringConfigs, types.StringValue(v))
			}
			r.Data.SupplementDNSForOsx = types.BoolPointerValue(resp.Data.SupplementDNSForOsx)
			r.Data.Tags = []tfTypes.TagItem{}
			if len(r.Data.Tags) > len(resp.Data.Tags) {
				r.Data.Tags = r.Data.Tags[:len(resp.Data.Tags)]
			}
			for tagsCount, tagsItem := range resp.Data.Tags {
				var tags1 tfTypes.TagItem
				if tagsItem.TagID != nil {
					tags1.TagID = types.Int64Value(int64(*tagsItem.TagID))
				} else {
					tags1.TagID = types.Int64Null()
				}
				tags1.TagName = types.StringPointerValue(tagsItem.TagName)
				if tagsCount+1 > len(r.Data.Tags) {
					r.Data.Tags = append(r.Data.Tags, tags1)
				} else {
					r.Data.Tags[tagsCount].TagID = tags1.TagID
					r.Data.Tags[tagsCount].TagName = tags1.TagName
				}
			}
			r.Data.TrustSelfSignedCerts = types.BoolPointerValue(resp.Data.TrustSelfSignedCerts)
			r.Data.UsePublisherDNS = types.BoolPointerValue(resp.Data.UsePublisherDNS)
		}
	}
}
