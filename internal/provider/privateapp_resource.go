// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/netskope/terraform-provider-ns/internal/sdk"
	"github.com/netskope/terraform-provider-ns/internal/sdk/pkg/models/operations"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &PrivateAppResource{}
var _ resource.ResourceWithImportState = &PrivateAppResource{}

func NewPrivateAppResource() resource.Resource {
	return &PrivateAppResource{}
}

// PrivateAppResource defines the resource implementation.
type PrivateAppResource struct {
	client *sdk.SDK
}

// PrivateAppResourceModel describes the resource data model.
type PrivateAppResourceModel struct {
	AppName              types.String              `tfsdk:"app_name"`
	ClientlessAccess     types.Bool                `tfsdk:"clientless_access"`
	Data                 []PrivateAppsResponseData `tfsdk:"data"`
	Host                 types.String              `tfsdk:"host"`
	Protocols            []ProtocolItem            `tfsdk:"protocols"`
	PublisherTags        []TagItemNoID             `tfsdk:"publisher_tags"`
	Publishers           []PublisherItem           `tfsdk:"publishers"`
	RealHost             types.String              `tfsdk:"real_host"`
	Status               types.String              `tfsdk:"status"`
	Tags                 []TagItemNoID             `tfsdk:"tags"`
	TrustSelfSignedCerts types.Bool                `tfsdk:"trust_self_signed_certs"`
	UsePublisherDNS      types.Bool                `tfsdk:"use_publisher_dns"`
}

func (r *PrivateAppResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_private_app"
}

func (r *PrivateAppResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "PrivateApp Resource",

		Attributes: map[string]schema.Attribute{
			"app_name": schema.StringAttribute{
				Optional: true,
			},
			"clientless_access": schema.BoolAttribute{
				Optional: true,
			},
			"data": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"clientless_access": schema.BoolAttribute{
							Computed: true,
						},
						"host": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.Int64Attribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"protocols": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"id": schema.Int64Attribute{
										Computed: true,
									},
									"port": schema.StringAttribute{
										Computed: true,
									},
									"service_id": schema.Int64Attribute{
										Computed: true,
									},
									"transport": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"real_host": schema.StringAttribute{
							Computed: true,
						},
						"service_publisher_assignments": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"primary": schema.BoolAttribute{
										Computed: true,
									},
									"publisher_id": schema.Int64Attribute{
										Computed: true,
									},
									"reachability": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"error_code": schema.Int64Attribute{
												Computed: true,
											},
											"error_string": schema.StringAttribute{
												Computed: true,
											},
											"reachable": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
									"service_id": schema.Int64Attribute{
										Computed: true,
									},
								},
							},
						},
						"tags": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"tag_id": schema.Int64Attribute{
										Computed: true,
									},
									"tag_name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"trust_self_signed_certs": schema.BoolAttribute{
							Computed: true,
						},
						"use_publisher_dns": schema.BoolAttribute{
							Computed: true,
						},
					},
				},
			},
			"host": schema.StringAttribute{
				Optional: true,
			},
			"protocols": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"port": schema.StringAttribute{
							Optional: true,
						},
						"type": schema.StringAttribute{
							Optional: true,
						},
					},
				},
			},
			"publisher_tags": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"tag_name": schema.StringAttribute{
							Optional:    true,
							Description: `Default: "tag_name"`,
						},
					},
				},
			},
			"publishers": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"publisher_id": schema.StringAttribute{
							Optional: true,
						},
						"publisher_name": schema.StringAttribute{
							Optional: true,
						},
					},
				},
			},
			"real_host": schema.StringAttribute{
				Optional: true,
			},
			"status": schema.StringAttribute{
				Computed:    true,
				Description: `must be one of ["success", "not found"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"success",
						"not found",
					),
				},
			},
			"tags": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"tag_name": schema.StringAttribute{
							Optional:    true,
							Description: `Default: "tag_name"`,
						},
					},
				},
			},
			"trust_self_signed_certs": schema.BoolAttribute{
				Optional: true,
			},
			"use_publisher_dns": schema.BoolAttribute{
				Optional: true,
			},
		},
	}
}

func (r *PrivateAppResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PrivateAppResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *PrivateAppResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	privateAppsRequest := *data.ToCreateSDKType()
	request := operations.PostSteeringAppsPrivateRequest{
		PrivateAppsRequest: privateAppsRequest,
	}
	res, err := r.client.PostSteeringAppsPrivate(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.PrivateAppsResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.PrivateAppsResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PrivateAppResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *PrivateAppResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PrivateAppResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *PrivateAppResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	privateAppID := int(data.ValueInt64())
	privateAppsPutRequest := *data.ToUpdateSDKType()
	request := operations.PutSteeringAppsPrivatePrivateAppIDRequest{
		PrivateAppID:          privateAppID,
		PrivateAppsPutRequest: privateAppsPutRequest,
	}
	res, err := r.client.PutSteeringAppsPrivatePrivateAppID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.PrivateAppsResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromUpdateResponse(res.PrivateAppsResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PrivateAppResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *PrivateAppResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	privateAppID := int(data.ValueInt64())
	request := operations.DeleteSteeringAppsPrivatePrivateAppIDRequest{
		PrivateAppID: privateAppID,
	}
	res, err := r.client.DeleteSteeringAppsPrivatePrivateAppID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *PrivateAppResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource private_app.")
}
