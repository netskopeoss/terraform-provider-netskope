// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type Schemas string

const (
	SchemasUrnIetfParamsScimSchemasCore20User Schemas = "urn:ietf:params:scim:schemas:core:2.0:User"
)

func (e Schemas) ToPointer() *Schemas {
	return &e
}

func (e *Schemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:schemas:core:2.0:User":
		*e = Schemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Schemas: %v", v)
	}
}

// Name - Family_name and given_name for the User
type Name struct {
	// last_name of the SCIM User.
	FamilyName *string `json:"familyName,omitempty"`
	// first_name of the SCIM User.
	GivenName *string `json:"givenName,omitempty"`
}

func (o *Name) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *Name) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

type Emails struct {
	// Email ID of the SCIM user
	Value   *string `json:"value,omitempty"`
	Primary *bool   `json:"primary,omitempty"`
}

func (o *Emails) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *Emails) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

// Meta - meta information
type Meta struct {
	// resource type User/Group.
	ResourceType *string `json:"resourceType,omitempty"`
}

func (o *Meta) GetResourceType() *string {
	if o == nil {
		return nil
	}
	return o.ResourceType
}

// PostUsersRequestBody - user request body
type PostUsersRequestBody struct {
	// schema of the resource
	Schemas []Schemas `json:"schemas,omitempty"`
	// UPN name of the SCIM User
	UserName *string `json:"userName,omitempty"`
	// Family_name and given_name for the User
	Name   *Name    `json:"name,omitempty"`
	Active *bool    `json:"active,omitempty"`
	Emails []Emails `json:"emails,omitempty"`
	// Optional - Scim External ID
	ExternalID *string `json:"externalId,omitempty"`
	// meta information
	Meta *Meta `json:"meta,omitempty"`
}

func (o *PostUsersRequestBody) GetSchemas() []Schemas {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *PostUsersRequestBody) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *PostUsersRequestBody) GetName() *Name {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PostUsersRequestBody) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *PostUsersRequestBody) GetEmails() []Emails {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *PostUsersRequestBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *PostUsersRequestBody) GetMeta() *Meta {
	if o == nil {
		return nil
	}
	return o.Meta
}

type PostUsersScimUsersResponseStatus string

const (
	PostUsersScimUsersResponseStatusFailed            PostUsersScimUsersResponseStatus = "failed"
	PostUsersScimUsersResponseStatusFiveHundredAndOne PostUsersScimUsersResponseStatus = "501"
)

func (e PostUsersScimUsersResponseStatus) ToPointer() *PostUsersScimUsersResponseStatus {
	return &e
}

func (e *PostUsersScimUsersResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "failed":
		fallthrough
	case "501":
		*e = PostUsersScimUsersResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostUsersScimUsersResponseStatus: %v", v)
	}
}

// PostUsersScimUsersResponse501ResponseBody - Internal error Failed
type PostUsersScimUsersResponse501ResponseBody struct {
	Status  *PostUsersScimUsersResponseStatus `json:"status,omitempty"`
	Schemas *string                           `json:"schemas,omitempty"`
	Detail  *string                           `json:"detail,omitempty"`
}

func (o *PostUsersScimUsersResponse501ResponseBody) GetStatus() *PostUsersScimUsersResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PostUsersScimUsersResponse501ResponseBody) GetSchemas() *string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *PostUsersScimUsersResponse501ResponseBody) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

// PostUsersScimUsersResponseResponseBody - Not authorized to execte the specific API.
type PostUsersScimUsersResponseResponseBody struct {
	Message *string `json:"message,omitempty"`
}

func (o *PostUsersScimUsersResponseResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

type PostUsersScimUsersStatus string

const (
	PostUsersScimUsersStatusFourHundred PostUsersScimUsersStatus = "400"
	PostUsersScimUsersStatusFailed      PostUsersScimUsersStatus = "failed"
)

func (e PostUsersScimUsersStatus) ToPointer() *PostUsersScimUsersStatus {
	return &e
}

func (e *PostUsersScimUsersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "400":
		fallthrough
	case "failed":
		*e = PostUsersScimUsersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostUsersScimUsersStatus: %v", v)
	}
}

// PostUsersScimUsersResponseBody - Failed
type PostUsersScimUsersResponseBody struct {
	Status      *PostUsersScimUsersStatus `json:"status,omitempty"`
	Description *string                   `json:"description,omitempty"`
	// schema of the resource
	Schemas []string `json:"schemas,omitempty"`
}

func (o *PostUsersScimUsersResponseBody) GetStatus() *PostUsersScimUsersStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PostUsersScimUsersResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PostUsersScimUsersResponseBody) GetSchemas() []string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

// PostUsersName - Family_name and given_name for the User
type PostUsersName struct {
	// last_name of the SCIM User.
	FamilyName *string `json:"familyName,omitempty"`
	// first_name of the SCIM User.
	GivenName *string `json:"givenName,omitempty"`
}

func (o *PostUsersName) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *PostUsersName) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

type PostUsersEmails struct {
	// Email ID of the SCIM user
	Value   *string `json:"value,omitempty"`
	Primary *bool   `json:"primary,omitempty"`
}

func (o *PostUsersEmails) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *PostUsersEmails) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

type PostUsersStatus int64

const (
	PostUsersStatusTwoHundredAndOne PostUsersStatus = 201
	PostUsersStatusTwoHundred       PostUsersStatus = 200
)

func (e PostUsersStatus) ToPointer() *PostUsersStatus {
	return &e
}

func (e *PostUsersStatus) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 201:
		fallthrough
	case 200:
		*e = PostUsersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostUsersStatus: %v", v)
	}
}

// PostUsersResponseBody - Successfully added the User.
type PostUsersResponseBody struct {
	// schema of the resource
	Schemas []string `json:"schemas,omitempty"`
	// SCIM User ID
	ID *string `json:"id,omitempty"`
	// UPN name of the SCIM User
	UserName *string `json:"userName,omitempty"`
	// Family_name and given_name for the User
	Name   *PostUsersName    `json:"name,omitempty"`
	Active *bool             `json:"active,omitempty"`
	Emails []PostUsersEmails `json:"emails,omitempty"`
	// Optional - Scim External ID
	ExternalID *string          `json:"externalId,omitempty"`
	Status     *PostUsersStatus `json:"status,omitempty"`
}

func (o *PostUsersResponseBody) GetSchemas() []string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *PostUsersResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PostUsersResponseBody) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *PostUsersResponseBody) GetName() *PostUsersName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PostUsersResponseBody) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *PostUsersResponseBody) GetEmails() []PostUsersEmails {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *PostUsersResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *PostUsersResponseBody) GetStatus() *PostUsersStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type PostUsersResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successfully added the User.
	TwoHundredAndOneApplicationScimPlusJSONObject *PostUsersResponseBody
	// Failed
	FourHundredApplicationJSONObject *PostUsersScimUsersResponseBody
	// Not authorized to execte the specific API.
	FourHundredAndThreeApplicationJSONObject *PostUsersScimUsersResponseResponseBody
	// Internal error Failed
	FiveHundredAndOneApplicationJSONObject *PostUsersScimUsersResponse501ResponseBody
}

func (o *PostUsersResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PostUsersResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PostUsersResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PostUsersResponse) GetTwoHundredAndOneApplicationScimPlusJSONObject() *PostUsersResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredAndOneApplicationScimPlusJSONObject
}

func (o *PostUsersResponse) GetFourHundredApplicationJSONObject() *PostUsersScimUsersResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *PostUsersResponse) GetFourHundredAndThreeApplicationJSONObject() *PostUsersScimUsersResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *PostUsersResponse) GetFiveHundredAndOneApplicationJSONObject() *PostUsersScimUsersResponse501ResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredAndOneApplicationJSONObject
}
