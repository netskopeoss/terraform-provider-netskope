// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type Protocols struct {
	Port *string `json:"port,omitempty"`
	Type *string `json:"type,omitempty"`
}

func (o *Protocols) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *Protocols) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type PatchAppsPrivatePrivateAppIDPublisherTags struct {
	TagName *string `json:"tag_name,omitempty"`
}

func (o *PatchAppsPrivatePrivateAppIDPublisherTags) GetTagName() *string {
	if o == nil {
		return nil
	}
	return o.TagName
}

type Publishers struct {
	PublisherID   *string `json:"publisher_id,omitempty"`
	PublisherName *string `json:"publisher_name,omitempty"`
}

func (o *Publishers) GetPublisherID() *string {
	if o == nil {
		return nil
	}
	return o.PublisherID
}

func (o *Publishers) GetPublisherName() *string {
	if o == nil {
		return nil
	}
	return o.PublisherName
}

type PatchAppsPrivatePrivateAppIDTags struct {
	TagName *string `json:"tag_name,omitempty"`
}

func (o *PatchAppsPrivatePrivateAppIDTags) GetTagName() *string {
	if o == nil {
		return nil
	}
	return o.TagName
}

type PatchAppsPrivatePrivateAppIDRequestBody struct {
	AppName              *string                                     `json:"app_name,omitempty"`
	ClientlessAccess     *bool                                       `json:"clientless_access,omitempty"`
	Host                 *string                                     `json:"host,omitempty"`
	ID                   *int                                        `json:"id,omitempty"`
	Protocols            []Protocols                                 `json:"protocols,omitempty"`
	PublisherTags        []PatchAppsPrivatePrivateAppIDPublisherTags `json:"publisher_tags,omitempty"`
	Publishers           []Publishers                                `json:"publishers,omitempty"`
	RealHost             *string                                     `json:"real_host,omitempty"`
	Tags                 []PatchAppsPrivatePrivateAppIDTags          `json:"tags,omitempty"`
	TrustSelfSignedCerts *bool                                       `json:"trust_self_signed_certs,omitempty"`
	UsePublisherDNS      *bool                                       `json:"use_publisher_dns,omitempty"`
}

func (o *PatchAppsPrivatePrivateAppIDRequestBody) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

func (o *PatchAppsPrivatePrivateAppIDRequestBody) GetClientlessAccess() *bool {
	if o == nil {
		return nil
	}
	return o.ClientlessAccess
}

func (o *PatchAppsPrivatePrivateAppIDRequestBody) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *PatchAppsPrivatePrivateAppIDRequestBody) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PatchAppsPrivatePrivateAppIDRequestBody) GetProtocols() []Protocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *PatchAppsPrivatePrivateAppIDRequestBody) GetPublisherTags() []PatchAppsPrivatePrivateAppIDPublisherTags {
	if o == nil {
		return nil
	}
	return o.PublisherTags
}

func (o *PatchAppsPrivatePrivateAppIDRequestBody) GetPublishers() []Publishers {
	if o == nil {
		return nil
	}
	return o.Publishers
}

func (o *PatchAppsPrivatePrivateAppIDRequestBody) GetRealHost() *string {
	if o == nil {
		return nil
	}
	return o.RealHost
}

func (o *PatchAppsPrivatePrivateAppIDRequestBody) GetTags() []PatchAppsPrivatePrivateAppIDTags {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PatchAppsPrivatePrivateAppIDRequestBody) GetTrustSelfSignedCerts() *bool {
	if o == nil {
		return nil
	}
	return o.TrustSelfSignedCerts
}

func (o *PatchAppsPrivatePrivateAppIDRequestBody) GetUsePublisherDNS() *bool {
	if o == nil {
		return nil
	}
	return o.UsePublisherDNS
}

// Silent - flag to skip output except status code
type Silent string

const (
	SilentOne  Silent = "1"
	SilentZero Silent = "0"
)

func (e Silent) ToPointer() *Silent {
	return &e
}

func (e *Silent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "0":
		*e = Silent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Silent: %v", v)
	}
}

type PatchAppsPrivatePrivateAppIDRequest struct {
	RequestBody PatchAppsPrivatePrivateAppIDRequestBody `request:"mediaType=application/json"`
	// private apps id
	PrivateAppID int `pathParam:"style=simple,explode=false,name=private_app_id"`
	// flag to skip output except status code
	Silent *Silent `queryParam:"style=form,explode=true,name=silent"`
}

func (o *PatchAppsPrivatePrivateAppIDRequest) GetRequestBody() PatchAppsPrivatePrivateAppIDRequestBody {
	if o == nil {
		return PatchAppsPrivatePrivateAppIDRequestBody{}
	}
	return o.RequestBody
}

func (o *PatchAppsPrivatePrivateAppIDRequest) GetPrivateAppID() int {
	if o == nil {
		return 0
	}
	return o.PrivateAppID
}

func (o *PatchAppsPrivatePrivateAppIDRequest) GetSilent() *Silent {
	if o == nil {
		return nil
	}
	return o.Silent
}

// PatchAppsPrivatePrivateAppIDResponseBody - Invalid request
type PatchAppsPrivatePrivateAppIDResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *PatchAppsPrivatePrivateAppIDResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *PatchAppsPrivatePrivateAppIDResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type PatchAppsPrivatePrivateAppIDProtocols struct {
	ID        *int    `json:"id,omitempty"`
	Port      *string `json:"port,omitempty"`
	ServiceID *int    `json:"service_id,omitempty"`
	Transport *string `json:"transport,omitempty"`
}

func (o *PatchAppsPrivatePrivateAppIDProtocols) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PatchAppsPrivatePrivateAppIDProtocols) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *PatchAppsPrivatePrivateAppIDProtocols) GetServiceID() *int {
	if o == nil {
		return nil
	}
	return o.ServiceID
}

func (o *PatchAppsPrivatePrivateAppIDProtocols) GetTransport() *string {
	if o == nil {
		return nil
	}
	return o.Transport
}

type PatchAppsPrivatePrivateAppIDReachability struct {
	ErrorCode   *int    `json:"error_code,omitempty"`
	ErrorString *string `json:"error_string,omitempty"`
	Reachable   *bool   `json:"reachable,omitempty"`
}

func (o *PatchAppsPrivatePrivateAppIDReachability) GetErrorCode() *int {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *PatchAppsPrivatePrivateAppIDReachability) GetErrorString() *string {
	if o == nil {
		return nil
	}
	return o.ErrorString
}

func (o *PatchAppsPrivatePrivateAppIDReachability) GetReachable() *bool {
	if o == nil {
		return nil
	}
	return o.Reachable
}

type PatchAppsPrivatePrivateAppIDServicePublisherAssignments struct {
	Primary      *bool                                     `json:"primary,omitempty"`
	PublisherID  *int                                      `json:"publisher_id,omitempty"`
	Reachability *PatchAppsPrivatePrivateAppIDReachability `json:"reachability,omitempty"`
	ServiceID    *int                                      `json:"service_id,omitempty"`
}

func (o *PatchAppsPrivatePrivateAppIDServicePublisherAssignments) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

func (o *PatchAppsPrivatePrivateAppIDServicePublisherAssignments) GetPublisherID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherID
}

func (o *PatchAppsPrivatePrivateAppIDServicePublisherAssignments) GetReachability() *PatchAppsPrivatePrivateAppIDReachability {
	if o == nil {
		return nil
	}
	return o.Reachability
}

func (o *PatchAppsPrivatePrivateAppIDServicePublisherAssignments) GetServiceID() *int {
	if o == nil {
		return nil
	}
	return o.ServiceID
}

type PatchAppsPrivatePrivateAppIDResponseTags struct {
	TagID   *int    `json:"tag_id,omitempty"`
	TagName *string `json:"tag_name,omitempty"`
}

func (o *PatchAppsPrivatePrivateAppIDResponseTags) GetTagID() *int {
	if o == nil {
		return nil
	}
	return o.TagID
}

func (o *PatchAppsPrivatePrivateAppIDResponseTags) GetTagName() *string {
	if o == nil {
		return nil
	}
	return o.TagName
}

type PatchAppsPrivatePrivateAppIDData struct {
	ClientlessAccess            *bool                                                     `json:"clientless_access,omitempty"`
	Host                        *string                                                   `json:"host,omitempty"`
	ID                          *int                                                      `json:"id,omitempty"`
	Name                        *string                                                   `json:"name,omitempty"`
	Protocols                   []PatchAppsPrivatePrivateAppIDProtocols                   `json:"protocols,omitempty"`
	RealHost                    *string                                                   `json:"real_host,omitempty"`
	ServicePublisherAssignments []PatchAppsPrivatePrivateAppIDServicePublisherAssignments `json:"service_publisher_assignments,omitempty"`
	Tags                        []PatchAppsPrivatePrivateAppIDResponseTags                `json:"tags,omitempty"`
	TrustSelfSignedCerts        *bool                                                     `json:"trust_self_signed_certs,omitempty"`
	UsePublisherDNS             *bool                                                     `json:"use_publisher_dns,omitempty"`
}

func (o *PatchAppsPrivatePrivateAppIDData) GetClientlessAccess() *bool {
	if o == nil {
		return nil
	}
	return o.ClientlessAccess
}

func (o *PatchAppsPrivatePrivateAppIDData) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *PatchAppsPrivatePrivateAppIDData) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PatchAppsPrivatePrivateAppIDData) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PatchAppsPrivatePrivateAppIDData) GetProtocols() []PatchAppsPrivatePrivateAppIDProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *PatchAppsPrivatePrivateAppIDData) GetRealHost() *string {
	if o == nil {
		return nil
	}
	return o.RealHost
}

func (o *PatchAppsPrivatePrivateAppIDData) GetServicePublisherAssignments() []PatchAppsPrivatePrivateAppIDServicePublisherAssignments {
	if o == nil {
		return nil
	}
	return o.ServicePublisherAssignments
}

func (o *PatchAppsPrivatePrivateAppIDData) GetTags() []PatchAppsPrivatePrivateAppIDResponseTags {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PatchAppsPrivatePrivateAppIDData) GetTrustSelfSignedCerts() *bool {
	if o == nil {
		return nil
	}
	return o.TrustSelfSignedCerts
}

func (o *PatchAppsPrivatePrivateAppIDData) GetUsePublisherDNS() *bool {
	if o == nil {
		return nil
	}
	return o.UsePublisherDNS
}

type PatchAppsPrivatePrivateAppIDStatus string

const (
	PatchAppsPrivatePrivateAppIDStatusSuccess  PatchAppsPrivatePrivateAppIDStatus = "success"
	PatchAppsPrivatePrivateAppIDStatusNotFound PatchAppsPrivatePrivateAppIDStatus = "not found"
)

func (e PatchAppsPrivatePrivateAppIDStatus) ToPointer() *PatchAppsPrivatePrivateAppIDStatus {
	return &e
}

func (e *PatchAppsPrivatePrivateAppIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "not found":
		*e = PatchAppsPrivatePrivateAppIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchAppsPrivatePrivateAppIDStatus: %v", v)
	}
}

type PatchAppsPrivatePrivateAppIDResponseResponseBody struct {
	Data   *PatchAppsPrivatePrivateAppIDData   `json:"data,omitempty"`
	Status *PatchAppsPrivatePrivateAppIDStatus `json:"status,omitempty"`
}

func (o *PatchAppsPrivatePrivateAppIDResponseResponseBody) GetData() *PatchAppsPrivatePrivateAppIDData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *PatchAppsPrivatePrivateAppIDResponseResponseBody) GetStatus() *PatchAppsPrivatePrivateAppIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type PatchAppsPrivatePrivateAppIDResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// successful operation
	Classes []PatchAppsPrivatePrivateAppIDResponseResponseBody
	// Invalid request
	Object *PatchAppsPrivatePrivateAppIDResponseBody
}

func (o *PatchAppsPrivatePrivateAppIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PatchAppsPrivatePrivateAppIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PatchAppsPrivatePrivateAppIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PatchAppsPrivatePrivateAppIDResponse) GetClasses() []PatchAppsPrivatePrivateAppIDResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.Classes
}

func (o *PatchAppsPrivatePrivateAppIDResponse) GetObject() *PatchAppsPrivatePrivateAppIDResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
