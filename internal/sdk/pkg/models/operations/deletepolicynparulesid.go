// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type DeletePolicyNpaRulesIDRequest struct {
	// npa policy id
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

func (o *DeletePolicyNpaRulesIDRequest) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

// DeletePolicyNpaRulesIDResponseResponseBody - Invalid request
type DeletePolicyNpaRulesIDResponseResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *DeletePolicyNpaRulesIDResponseResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *DeletePolicyNpaRulesIDResponseResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type DeletePolicyNpaRulesIDAccessMethod string

const (
	DeletePolicyNpaRulesIDAccessMethodClient     DeletePolicyNpaRulesIDAccessMethod = "Client"
	DeletePolicyNpaRulesIDAccessMethodClientless DeletePolicyNpaRulesIDAccessMethod = "Clientless"
)

func (e DeletePolicyNpaRulesIDAccessMethod) ToPointer() *DeletePolicyNpaRulesIDAccessMethod {
	return &e
}

func (e *DeletePolicyNpaRulesIDAccessMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		fallthrough
	case "Clientless":
		*e = DeletePolicyNpaRulesIDAccessMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletePolicyNpaRulesIDAccessMethod: %v", v)
	}
}

type DeletePolicyNpaRulesIDActions string

const (
	DeletePolicyNpaRulesIDActionsAllow       DeletePolicyNpaRulesIDActions = "allow"
	DeletePolicyNpaRulesIDActionsBlock       DeletePolicyNpaRulesIDActions = "block"
	DeletePolicyNpaRulesIDActionsAlert       DeletePolicyNpaRulesIDActions = "alert"
	DeletePolicyNpaRulesIDActionsQuanrantine DeletePolicyNpaRulesIDActions = "quanrantine"
	DeletePolicyNpaRulesIDActionsBypass      DeletePolicyNpaRulesIDActions = "bypass"
)

func (e DeletePolicyNpaRulesIDActions) ToPointer() *DeletePolicyNpaRulesIDActions {
	return &e
}

func (e *DeletePolicyNpaRulesIDActions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		fallthrough
	case "alert":
		fallthrough
	case "quanrantine":
		fallthrough
	case "bypass":
		*e = DeletePolicyNpaRulesIDActions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletePolicyNpaRulesIDActions: %v", v)
	}
}

type DeletePolicyNpaRulesIDDlpActions struct {
	Actions    []DeletePolicyNpaRulesIDActions `json:"actions,omitempty"`
	DlpProfile *string                         `json:"dlp_profile,omitempty"`
}

func (o *DeletePolicyNpaRulesIDDlpActions) GetActions() []DeletePolicyNpaRulesIDActions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *DeletePolicyNpaRulesIDDlpActions) GetDlpProfile() *string {
	if o == nil {
		return nil
	}
	return o.DlpProfile
}

type DeletePolicyNpaRulesIDActionName string

const (
	DeletePolicyNpaRulesIDActionNameAllow DeletePolicyNpaRulesIDActionName = "allow"
	DeletePolicyNpaRulesIDActionNameBlock DeletePolicyNpaRulesIDActionName = "block"
)

func (e DeletePolicyNpaRulesIDActionName) ToPointer() *DeletePolicyNpaRulesIDActionName {
	return &e
}

func (e *DeletePolicyNpaRulesIDActionName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = DeletePolicyNpaRulesIDActionName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletePolicyNpaRulesIDActionName: %v", v)
	}
}

type DeletePolicyNpaRulesIDMatchCriteriaAction struct {
	ActionName *DeletePolicyNpaRulesIDActionName `json:"action_name,omitempty"`
}

func (o *DeletePolicyNpaRulesIDMatchCriteriaAction) GetActionName() *DeletePolicyNpaRulesIDActionName {
	if o == nil {
		return nil
	}
	return o.ActionName
}

type DeletePolicyNpaRulesIDPolicyType string

const (
	DeletePolicyNpaRulesIDPolicyTypePrivateApp DeletePolicyNpaRulesIDPolicyType = "private-app"
)

func (e DeletePolicyNpaRulesIDPolicyType) ToPointer() *DeletePolicyNpaRulesIDPolicyType {
	return &e
}

func (e *DeletePolicyNpaRulesIDPolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-app":
		*e = DeletePolicyNpaRulesIDPolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletePolicyNpaRulesIDPolicyType: %v", v)
	}
}

type DeletePolicyNpaRulesIDActivity string

const (
	DeletePolicyNpaRulesIDActivityAny DeletePolicyNpaRulesIDActivity = "any"
)

func (e DeletePolicyNpaRulesIDActivity) ToPointer() *DeletePolicyNpaRulesIDActivity {
	return &e
}

func (e *DeletePolicyNpaRulesIDActivity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		*e = DeletePolicyNpaRulesIDActivity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletePolicyNpaRulesIDActivity: %v", v)
	}
}

type DeletePolicyNpaRulesIDActivities struct {
	Activity          *DeletePolicyNpaRulesIDActivity `json:"activity,omitempty"`
	ListOfConstraints []string                        `json:"list_of_constraints,omitempty"`
}

func (o *DeletePolicyNpaRulesIDActivities) GetActivity() *DeletePolicyNpaRulesIDActivity {
	if o == nil {
		return nil
	}
	return o.Activity
}

func (o *DeletePolicyNpaRulesIDActivities) GetListOfConstraints() []string {
	if o == nil {
		return nil
	}
	return o.ListOfConstraints
}

type DeletePolicyNpaRulesIDPrivateAppsWithActivities struct {
	Activities []DeletePolicyNpaRulesIDActivities `json:"activities,omitempty"`
	AppName    *string                            `json:"appName,omitempty"`
}

func (o *DeletePolicyNpaRulesIDPrivateAppsWithActivities) GetActivities() []DeletePolicyNpaRulesIDActivities {
	if o == nil {
		return nil
	}
	return o.Activities
}

func (o *DeletePolicyNpaRulesIDPrivateAppsWithActivities) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

type DeletePolicyNpaRulesIDUserType string

const (
	DeletePolicyNpaRulesIDUserTypeUser DeletePolicyNpaRulesIDUserType = "user"
)

func (e DeletePolicyNpaRulesIDUserType) ToPointer() *DeletePolicyNpaRulesIDUserType {
	return &e
}

func (e *DeletePolicyNpaRulesIDUserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = DeletePolicyNpaRulesIDUserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletePolicyNpaRulesIDUserType: %v", v)
	}
}

type DeletePolicyNpaRulesIDRuleData struct {
	AccessMethod              *DeletePolicyNpaRulesIDAccessMethod               `json:"access_method,omitempty"`
	BNegateNetLocation        *bool                                             `json:"b_negateNetLocation,omitempty"`
	BNegateSrcCountries       *bool                                             `json:"b_negateSrcCountries,omitempty"`
	Classification            *string                                           `json:"classification,omitempty"`
	DlpActions                []DeletePolicyNpaRulesIDDlpActions                `json:"dlp_actions,omitempty"`
	ExternalDlp               *bool                                             `json:"external_dlp,omitempty"`
	JSONVersion               *int64                                            `json:"json_version,omitempty"`
	MatchCriteriaAction       *DeletePolicyNpaRulesIDMatchCriteriaAction        `json:"match_criteria_action,omitempty"`
	NetLocationObj            []string                                          `json:"net_location_obj,omitempty"`
	OrganizationUnits         []string                                          `json:"organization_units,omitempty"`
	PolicyType                *DeletePolicyNpaRulesIDPolicyType                 `json:"policy_type,omitempty"`
	PrivateAppIds             []string                                          `json:"privateAppIds,omitempty"`
	PrivateAppTagIds          []string                                          `json:"privateAppTagIds,omitempty"`
	PrivateAppTags            []string                                          `json:"privateAppTags,omitempty"`
	PrivateApps               []string                                          `json:"privateApps,omitempty"`
	PrivateAppsWithActivities []DeletePolicyNpaRulesIDPrivateAppsWithActivities `json:"privateAppsWithActivities,omitempty"`
	ShowDlpProfileActionTable *bool                                             `json:"show_dlp_profile_action_table,omitempty"`
	SrcCountries              []string                                          `json:"srcCountries,omitempty"`
	UserGroups                []string                                          `json:"userGroups,omitempty"`
	UserType                  *DeletePolicyNpaRulesIDUserType                   `json:"userType,omitempty"`
	Users                     []string                                          `json:"users,omitempty"`
	Version                   *int64                                            `json:"version,omitempty"`
}

func (o *DeletePolicyNpaRulesIDRuleData) GetAccessMethod() *DeletePolicyNpaRulesIDAccessMethod {
	if o == nil {
		return nil
	}
	return o.AccessMethod
}

func (o *DeletePolicyNpaRulesIDRuleData) GetBNegateNetLocation() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateNetLocation
}

func (o *DeletePolicyNpaRulesIDRuleData) GetBNegateSrcCountries() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateSrcCountries
}

func (o *DeletePolicyNpaRulesIDRuleData) GetClassification() *string {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *DeletePolicyNpaRulesIDRuleData) GetDlpActions() []DeletePolicyNpaRulesIDDlpActions {
	if o == nil {
		return nil
	}
	return o.DlpActions
}

func (o *DeletePolicyNpaRulesIDRuleData) GetExternalDlp() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalDlp
}

func (o *DeletePolicyNpaRulesIDRuleData) GetJSONVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.JSONVersion
}

func (o *DeletePolicyNpaRulesIDRuleData) GetMatchCriteriaAction() *DeletePolicyNpaRulesIDMatchCriteriaAction {
	if o == nil {
		return nil
	}
	return o.MatchCriteriaAction
}

func (o *DeletePolicyNpaRulesIDRuleData) GetNetLocationObj() []string {
	if o == nil {
		return nil
	}
	return o.NetLocationObj
}

func (o *DeletePolicyNpaRulesIDRuleData) GetOrganizationUnits() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationUnits
}

func (o *DeletePolicyNpaRulesIDRuleData) GetPolicyType() *DeletePolicyNpaRulesIDPolicyType {
	if o == nil {
		return nil
	}
	return o.PolicyType
}

func (o *DeletePolicyNpaRulesIDRuleData) GetPrivateAppIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppIds
}

func (o *DeletePolicyNpaRulesIDRuleData) GetPrivateAppTagIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTagIds
}

func (o *DeletePolicyNpaRulesIDRuleData) GetPrivateAppTags() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTags
}

func (o *DeletePolicyNpaRulesIDRuleData) GetPrivateApps() []string {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

func (o *DeletePolicyNpaRulesIDRuleData) GetPrivateAppsWithActivities() []DeletePolicyNpaRulesIDPrivateAppsWithActivities {
	if o == nil {
		return nil
	}
	return o.PrivateAppsWithActivities
}

func (o *DeletePolicyNpaRulesIDRuleData) GetShowDlpProfileActionTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowDlpProfileActionTable
}

func (o *DeletePolicyNpaRulesIDRuleData) GetSrcCountries() []string {
	if o == nil {
		return nil
	}
	return o.SrcCountries
}

func (o *DeletePolicyNpaRulesIDRuleData) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *DeletePolicyNpaRulesIDRuleData) GetUserType() *DeletePolicyNpaRulesIDUserType {
	if o == nil {
		return nil
	}
	return o.UserType
}

func (o *DeletePolicyNpaRulesIDRuleData) GetUsers() []string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *DeletePolicyNpaRulesIDRuleData) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}

type Data struct {
	RuleData *DeletePolicyNpaRulesIDRuleData `json:"rule_data,omitempty"`
	RuleID   *int64                          `json:"rule_id,omitempty"`
	RuleName *string                         `json:"rule_name,omitempty"`
}

func (o *Data) GetRuleData() *DeletePolicyNpaRulesIDRuleData {
	if o == nil {
		return nil
	}
	return o.RuleData
}

func (o *Data) GetRuleID() *int64 {
	if o == nil {
		return nil
	}
	return o.RuleID
}

func (o *Data) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

type DeletePolicyNpaRulesIDStatus string

const (
	DeletePolicyNpaRulesIDStatusSuccess DeletePolicyNpaRulesIDStatus = "success"
	DeletePolicyNpaRulesIDStatusError   DeletePolicyNpaRulesIDStatus = "error"
)

func (e DeletePolicyNpaRulesIDStatus) ToPointer() *DeletePolicyNpaRulesIDStatus {
	return &e
}

func (e *DeletePolicyNpaRulesIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "error":
		*e = DeletePolicyNpaRulesIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletePolicyNpaRulesIDStatus: %v", v)
	}
}

// DeletePolicyNpaRulesIDResponseBody - successful operation
type DeletePolicyNpaRulesIDResponseBody struct {
	Data   *Data                         `json:"data,omitempty"`
	Status *DeletePolicyNpaRulesIDStatus `json:"status,omitempty"`
}

func (o *DeletePolicyNpaRulesIDResponseBody) GetData() *Data {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *DeletePolicyNpaRulesIDResponseBody) GetStatus() *DeletePolicyNpaRulesIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type DeletePolicyNpaRulesIDResponse struct {
	// successful operation
	TwoHundredApplicationJSONObject *DeletePolicyNpaRulesIDResponseBody
	// Invalid request
	FourHundredApplicationJSONObject *DeletePolicyNpaRulesIDResponseResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *DeletePolicyNpaRulesIDResponse) GetTwoHundredApplicationJSONObject() *DeletePolicyNpaRulesIDResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *DeletePolicyNpaRulesIDResponse) GetFourHundredApplicationJSONObject() *DeletePolicyNpaRulesIDResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *DeletePolicyNpaRulesIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *DeletePolicyNpaRulesIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *DeletePolicyNpaRulesIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
