// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AccessMethod string

const (
	AccessMethodClient     AccessMethod = "Client"
	AccessMethodClientless AccessMethod = "Clientless"
)

func (e AccessMethod) ToPointer() *AccessMethod {
	return &e
}

func (e *AccessMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		fallthrough
	case "Clientless":
		*e = AccessMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessMethod: %v", v)
	}
}

type Actions string

const (
	ActionsAllow       Actions = "allow"
	ActionsBlock       Actions = "block"
	ActionsAlert       Actions = "alert"
	ActionsQuanrantine Actions = "quanrantine"
	ActionsBypass      Actions = "bypass"
)

func (e Actions) ToPointer() *Actions {
	return &e
}

func (e *Actions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		fallthrough
	case "alert":
		fallthrough
	case "quanrantine":
		fallthrough
	case "bypass":
		*e = Actions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Actions: %v", v)
	}
}

type DlpActions struct {
	Actions    []Actions `json:"actions,omitempty"`
	DlpProfile *string   `json:"dlp_profile,omitempty"`
}

func (o *DlpActions) GetActions() []Actions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *DlpActions) GetDlpProfile() *string {
	if o == nil {
		return nil
	}
	return o.DlpProfile
}

type ActionName string

const (
	ActionNameAllow ActionName = "allow"
	ActionNameBlock ActionName = "block"
)

func (e ActionName) ToPointer() *ActionName {
	return &e
}

func (e *ActionName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = ActionName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionName: %v", v)
	}
}

type MatchCriteriaAction struct {
	ActionName *ActionName `json:"action_name,omitempty"`
}

func (o *MatchCriteriaAction) GetActionName() *ActionName {
	if o == nil {
		return nil
	}
	return o.ActionName
}

type PolicyType string

const (
	PolicyTypePrivateApp PolicyType = "private-app"
)

func (e PolicyType) ToPointer() *PolicyType {
	return &e
}

func (e *PolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-app":
		*e = PolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyType: %v", v)
	}
}

type Activity string

const (
	ActivityAny Activity = "any"
)

func (e Activity) ToPointer() *Activity {
	return &e
}

func (e *Activity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		*e = Activity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Activity: %v", v)
	}
}

type Activities struct {
	Activity          *Activity `json:"activity,omitempty"`
	ListOfConstraints []string  `json:"list_of_constraints,omitempty"`
}

func (o *Activities) GetActivity() *Activity {
	if o == nil {
		return nil
	}
	return o.Activity
}

func (o *Activities) GetListOfConstraints() []string {
	if o == nil {
		return nil
	}
	return o.ListOfConstraints
}

type PrivateAppsWithActivities struct {
	Activities []Activities `json:"activities,omitempty"`
	AppName    *string      `json:"appName,omitempty"`
}

func (o *PrivateAppsWithActivities) GetActivities() []Activities {
	if o == nil {
		return nil
	}
	return o.Activities
}

func (o *PrivateAppsWithActivities) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

type UserType string

const (
	UserTypeUser UserType = "user"
)

func (e UserType) ToPointer() *UserType {
	return &e
}

func (e *UserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = UserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserType: %v", v)
	}
}

type RuleData struct {
	AccessMethod              *AccessMethod               `json:"access_method,omitempty"`
	BNegateNetLocation        *bool                       `json:"b_negateNetLocation,omitempty"`
	BNegateSrcCountries       *bool                       `json:"b_negateSrcCountries,omitempty"`
	Classification            *string                     `json:"classification,omitempty"`
	DlpActions                []DlpActions                `json:"dlp_actions,omitempty"`
	ExternalDlp               *bool                       `json:"external_dlp,omitempty"`
	JSONVersion               *int64                      `json:"json_version,omitempty"`
	MatchCriteriaAction       *MatchCriteriaAction        `json:"match_criteria_action,omitempty"`
	NetLocationObj            []string                    `json:"net_location_obj,omitempty"`
	OrganizationUnits         []string                    `json:"organization_units,omitempty"`
	PolicyType                *PolicyType                 `json:"policy_type,omitempty"`
	PrivateAppIds             []string                    `json:"privateAppIds,omitempty"`
	PrivateAppTagIds          []string                    `json:"privateAppTagIds,omitempty"`
	PrivateAppTags            []string                    `json:"privateAppTags,omitempty"`
	PrivateApps               []string                    `json:"privateApps,omitempty"`
	PrivateAppsWithActivities []PrivateAppsWithActivities `json:"privateAppsWithActivities,omitempty"`
	ShowDlpProfileActionTable *bool                       `json:"show_dlp_profile_action_table,omitempty"`
	SrcCountries              []string                    `json:"srcCountries,omitempty"`
	UserGroups                []string                    `json:"userGroups,omitempty"`
	UserType                  *UserType                   `json:"userType,omitempty"`
	Users                     []string                    `json:"users,omitempty"`
	Version                   *int64                      `json:"version,omitempty"`
}

func (o *RuleData) GetAccessMethod() *AccessMethod {
	if o == nil {
		return nil
	}
	return o.AccessMethod
}

func (o *RuleData) GetBNegateNetLocation() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateNetLocation
}

func (o *RuleData) GetBNegateSrcCountries() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateSrcCountries
}

func (o *RuleData) GetClassification() *string {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *RuleData) GetDlpActions() []DlpActions {
	if o == nil {
		return nil
	}
	return o.DlpActions
}

func (o *RuleData) GetExternalDlp() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalDlp
}

func (o *RuleData) GetJSONVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.JSONVersion
}

func (o *RuleData) GetMatchCriteriaAction() *MatchCriteriaAction {
	if o == nil {
		return nil
	}
	return o.MatchCriteriaAction
}

func (o *RuleData) GetNetLocationObj() []string {
	if o == nil {
		return nil
	}
	return o.NetLocationObj
}

func (o *RuleData) GetOrganizationUnits() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationUnits
}

func (o *RuleData) GetPolicyType() *PolicyType {
	if o == nil {
		return nil
	}
	return o.PolicyType
}

func (o *RuleData) GetPrivateAppIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppIds
}

func (o *RuleData) GetPrivateAppTagIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTagIds
}

func (o *RuleData) GetPrivateAppTags() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTags
}

func (o *RuleData) GetPrivateApps() []string {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

func (o *RuleData) GetPrivateAppsWithActivities() []PrivateAppsWithActivities {
	if o == nil {
		return nil
	}
	return o.PrivateAppsWithActivities
}

func (o *RuleData) GetShowDlpProfileActionTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowDlpProfileActionTable
}

func (o *RuleData) GetSrcCountries() []string {
	if o == nil {
		return nil
	}
	return o.SrcCountries
}

func (o *RuleData) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *RuleData) GetUserType() *UserType {
	if o == nil {
		return nil
	}
	return o.UserType
}

func (o *RuleData) GetUsers() []string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *RuleData) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}

type PatchPolicyNpaRulesIDOrder string

const (
	PatchPolicyNpaRulesIDOrderTop    PatchPolicyNpaRulesIDOrder = "top"
	PatchPolicyNpaRulesIDOrderBottom PatchPolicyNpaRulesIDOrder = "bottom"
	PatchPolicyNpaRulesIDOrderBefore PatchPolicyNpaRulesIDOrder = "before"
	PatchPolicyNpaRulesIDOrderAfter  PatchPolicyNpaRulesIDOrder = "after"
)

func (e PatchPolicyNpaRulesIDOrder) ToPointer() *PatchPolicyNpaRulesIDOrder {
	return &e
}

func (e *PatchPolicyNpaRulesIDOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "top":
		fallthrough
	case "bottom":
		fallthrough
	case "before":
		fallthrough
	case "after":
		*e = PatchPolicyNpaRulesIDOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchPolicyNpaRulesIDOrder: %v", v)
	}
}

type RuleOrder struct {
	Order    *PatchPolicyNpaRulesIDOrder `json:"order,omitempty"`
	Position *int64                      `json:"position,omitempty"`
	RuleID   *int64                      `json:"rule_id,omitempty"`
	RuleName *string                     `json:"rule_name,omitempty"`
}

func (o *RuleOrder) GetOrder() *PatchPolicyNpaRulesIDOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *RuleOrder) GetPosition() *int64 {
	if o == nil {
		return nil
	}
	return o.Position
}

func (o *RuleOrder) GetRuleID() *int64 {
	if o == nil {
		return nil
	}
	return o.RuleID
}

func (o *RuleOrder) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

type PatchPolicyNpaRulesIDRequestBody struct {
	Description *string    `json:"description,omitempty"`
	Enabled     *string    `json:"enabled,omitempty"`
	GroupName   *string    `json:"group_name,omitempty"`
	RuleData    *RuleData  `json:"rule_data,omitempty"`
	RuleName    *string    `json:"rule_name,omitempty"`
	RuleOrder   *RuleOrder `json:"rule_order,omitempty"`
}

func (o *PatchPolicyNpaRulesIDRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PatchPolicyNpaRulesIDRequestBody) GetEnabled() *string {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *PatchPolicyNpaRulesIDRequestBody) GetGroupName() *string {
	if o == nil {
		return nil
	}
	return o.GroupName
}

func (o *PatchPolicyNpaRulesIDRequestBody) GetRuleData() *RuleData {
	if o == nil {
		return nil
	}
	return o.RuleData
}

func (o *PatchPolicyNpaRulesIDRequestBody) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

func (o *PatchPolicyNpaRulesIDRequestBody) GetRuleOrder() *RuleOrder {
	if o == nil {
		return nil
	}
	return o.RuleOrder
}

// PatchPolicyNpaRulesIDQueryParamSilent - flag to skip output except status code
type PatchPolicyNpaRulesIDQueryParamSilent string

const (
	PatchPolicyNpaRulesIDQueryParamSilentOne  PatchPolicyNpaRulesIDQueryParamSilent = "1"
	PatchPolicyNpaRulesIDQueryParamSilentZero PatchPolicyNpaRulesIDQueryParamSilent = "0"
)

func (e PatchPolicyNpaRulesIDQueryParamSilent) ToPointer() *PatchPolicyNpaRulesIDQueryParamSilent {
	return &e
}

func (e *PatchPolicyNpaRulesIDQueryParamSilent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "0":
		*e = PatchPolicyNpaRulesIDQueryParamSilent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchPolicyNpaRulesIDQueryParamSilent: %v", v)
	}
}

type PatchPolicyNpaRulesIDRequest struct {
	RequestBody PatchPolicyNpaRulesIDRequestBody `request:"mediaType=application/json"`
	// policy rule id
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
	// flag to skip output except status code
	Silent *PatchPolicyNpaRulesIDQueryParamSilent `queryParam:"style=form,explode=true,name=silent"`
}

func (o *PatchPolicyNpaRulesIDRequest) GetRequestBody() PatchPolicyNpaRulesIDRequestBody {
	if o == nil {
		return PatchPolicyNpaRulesIDRequestBody{}
	}
	return o.RequestBody
}

func (o *PatchPolicyNpaRulesIDRequest) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *PatchPolicyNpaRulesIDRequest) GetSilent() *PatchPolicyNpaRulesIDQueryParamSilent {
	if o == nil {
		return nil
	}
	return o.Silent
}

// PatchPolicyNpaRulesIDResponseResponseBody - Invalid request
type PatchPolicyNpaRulesIDResponseResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *PatchPolicyNpaRulesIDResponseResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *PatchPolicyNpaRulesIDResponseResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type PatchPolicyNpaRulesIDAccessMethod string

const (
	PatchPolicyNpaRulesIDAccessMethodClient     PatchPolicyNpaRulesIDAccessMethod = "Client"
	PatchPolicyNpaRulesIDAccessMethodClientless PatchPolicyNpaRulesIDAccessMethod = "Clientless"
)

func (e PatchPolicyNpaRulesIDAccessMethod) ToPointer() *PatchPolicyNpaRulesIDAccessMethod {
	return &e
}

func (e *PatchPolicyNpaRulesIDAccessMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		fallthrough
	case "Clientless":
		*e = PatchPolicyNpaRulesIDAccessMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchPolicyNpaRulesIDAccessMethod: %v", v)
	}
}

type PatchPolicyNpaRulesIDActions string

const (
	PatchPolicyNpaRulesIDActionsAllow       PatchPolicyNpaRulesIDActions = "allow"
	PatchPolicyNpaRulesIDActionsBlock       PatchPolicyNpaRulesIDActions = "block"
	PatchPolicyNpaRulesIDActionsAlert       PatchPolicyNpaRulesIDActions = "alert"
	PatchPolicyNpaRulesIDActionsQuanrantine PatchPolicyNpaRulesIDActions = "quanrantine"
	PatchPolicyNpaRulesIDActionsBypass      PatchPolicyNpaRulesIDActions = "bypass"
)

func (e PatchPolicyNpaRulesIDActions) ToPointer() *PatchPolicyNpaRulesIDActions {
	return &e
}

func (e *PatchPolicyNpaRulesIDActions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		fallthrough
	case "alert":
		fallthrough
	case "quanrantine":
		fallthrough
	case "bypass":
		*e = PatchPolicyNpaRulesIDActions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchPolicyNpaRulesIDActions: %v", v)
	}
}

type PatchPolicyNpaRulesIDDlpActions struct {
	Actions    []PatchPolicyNpaRulesIDActions `json:"actions,omitempty"`
	DlpProfile *string                        `json:"dlp_profile,omitempty"`
}

func (o *PatchPolicyNpaRulesIDDlpActions) GetActions() []PatchPolicyNpaRulesIDActions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *PatchPolicyNpaRulesIDDlpActions) GetDlpProfile() *string {
	if o == nil {
		return nil
	}
	return o.DlpProfile
}

type PatchPolicyNpaRulesIDActionName string

const (
	PatchPolicyNpaRulesIDActionNameAllow PatchPolicyNpaRulesIDActionName = "allow"
	PatchPolicyNpaRulesIDActionNameBlock PatchPolicyNpaRulesIDActionName = "block"
)

func (e PatchPolicyNpaRulesIDActionName) ToPointer() *PatchPolicyNpaRulesIDActionName {
	return &e
}

func (e *PatchPolicyNpaRulesIDActionName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = PatchPolicyNpaRulesIDActionName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchPolicyNpaRulesIDActionName: %v", v)
	}
}

type PatchPolicyNpaRulesIDMatchCriteriaAction struct {
	ActionName *PatchPolicyNpaRulesIDActionName `json:"action_name,omitempty"`
}

func (o *PatchPolicyNpaRulesIDMatchCriteriaAction) GetActionName() *PatchPolicyNpaRulesIDActionName {
	if o == nil {
		return nil
	}
	return o.ActionName
}

type PatchPolicyNpaRulesIDPolicyType string

const (
	PatchPolicyNpaRulesIDPolicyTypePrivateApp PatchPolicyNpaRulesIDPolicyType = "private-app"
)

func (e PatchPolicyNpaRulesIDPolicyType) ToPointer() *PatchPolicyNpaRulesIDPolicyType {
	return &e
}

func (e *PatchPolicyNpaRulesIDPolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-app":
		*e = PatchPolicyNpaRulesIDPolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchPolicyNpaRulesIDPolicyType: %v", v)
	}
}

type PatchPolicyNpaRulesIDActivity string

const (
	PatchPolicyNpaRulesIDActivityAny PatchPolicyNpaRulesIDActivity = "any"
)

func (e PatchPolicyNpaRulesIDActivity) ToPointer() *PatchPolicyNpaRulesIDActivity {
	return &e
}

func (e *PatchPolicyNpaRulesIDActivity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		*e = PatchPolicyNpaRulesIDActivity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchPolicyNpaRulesIDActivity: %v", v)
	}
}

type PatchPolicyNpaRulesIDActivities struct {
	Activity          *PatchPolicyNpaRulesIDActivity `json:"activity,omitempty"`
	ListOfConstraints []string                       `json:"list_of_constraints,omitempty"`
}

func (o *PatchPolicyNpaRulesIDActivities) GetActivity() *PatchPolicyNpaRulesIDActivity {
	if o == nil {
		return nil
	}
	return o.Activity
}

func (o *PatchPolicyNpaRulesIDActivities) GetListOfConstraints() []string {
	if o == nil {
		return nil
	}
	return o.ListOfConstraints
}

type PatchPolicyNpaRulesIDPrivateAppsWithActivities struct {
	Activities []PatchPolicyNpaRulesIDActivities `json:"activities,omitempty"`
	AppName    *string                           `json:"appName,omitempty"`
}

func (o *PatchPolicyNpaRulesIDPrivateAppsWithActivities) GetActivities() []PatchPolicyNpaRulesIDActivities {
	if o == nil {
		return nil
	}
	return o.Activities
}

func (o *PatchPolicyNpaRulesIDPrivateAppsWithActivities) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

type PatchPolicyNpaRulesIDUserType string

const (
	PatchPolicyNpaRulesIDUserTypeUser PatchPolicyNpaRulesIDUserType = "user"
)

func (e PatchPolicyNpaRulesIDUserType) ToPointer() *PatchPolicyNpaRulesIDUserType {
	return &e
}

func (e *PatchPolicyNpaRulesIDUserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = PatchPolicyNpaRulesIDUserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchPolicyNpaRulesIDUserType: %v", v)
	}
}

type PatchPolicyNpaRulesIDRuleData struct {
	AccessMethod              *PatchPolicyNpaRulesIDAccessMethod               `json:"access_method,omitempty"`
	BNegateNetLocation        *bool                                            `json:"b_negateNetLocation,omitempty"`
	BNegateSrcCountries       *bool                                            `json:"b_negateSrcCountries,omitempty"`
	Classification            *string                                          `json:"classification,omitempty"`
	DlpActions                []PatchPolicyNpaRulesIDDlpActions                `json:"dlp_actions,omitempty"`
	ExternalDlp               *bool                                            `json:"external_dlp,omitempty"`
	JSONVersion               *int64                                           `json:"json_version,omitempty"`
	MatchCriteriaAction       *PatchPolicyNpaRulesIDMatchCriteriaAction        `json:"match_criteria_action,omitempty"`
	NetLocationObj            []string                                         `json:"net_location_obj,omitempty"`
	OrganizationUnits         []string                                         `json:"organization_units,omitempty"`
	PolicyType                *PatchPolicyNpaRulesIDPolicyType                 `json:"policy_type,omitempty"`
	PrivateAppIds             []string                                         `json:"privateAppIds,omitempty"`
	PrivateAppTagIds          []string                                         `json:"privateAppTagIds,omitempty"`
	PrivateAppTags            []string                                         `json:"privateAppTags,omitempty"`
	PrivateApps               []string                                         `json:"privateApps,omitempty"`
	PrivateAppsWithActivities []PatchPolicyNpaRulesIDPrivateAppsWithActivities `json:"privateAppsWithActivities,omitempty"`
	ShowDlpProfileActionTable *bool                                            `json:"show_dlp_profile_action_table,omitempty"`
	SrcCountries              []string                                         `json:"srcCountries,omitempty"`
	UserGroups                []string                                         `json:"userGroups,omitempty"`
	UserType                  *PatchPolicyNpaRulesIDUserType                   `json:"userType,omitempty"`
	Users                     []string                                         `json:"users,omitempty"`
	Version                   *int64                                           `json:"version,omitempty"`
}

func (o *PatchPolicyNpaRulesIDRuleData) GetAccessMethod() *PatchPolicyNpaRulesIDAccessMethod {
	if o == nil {
		return nil
	}
	return o.AccessMethod
}

func (o *PatchPolicyNpaRulesIDRuleData) GetBNegateNetLocation() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateNetLocation
}

func (o *PatchPolicyNpaRulesIDRuleData) GetBNegateSrcCountries() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateSrcCountries
}

func (o *PatchPolicyNpaRulesIDRuleData) GetClassification() *string {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *PatchPolicyNpaRulesIDRuleData) GetDlpActions() []PatchPolicyNpaRulesIDDlpActions {
	if o == nil {
		return nil
	}
	return o.DlpActions
}

func (o *PatchPolicyNpaRulesIDRuleData) GetExternalDlp() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalDlp
}

func (o *PatchPolicyNpaRulesIDRuleData) GetJSONVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.JSONVersion
}

func (o *PatchPolicyNpaRulesIDRuleData) GetMatchCriteriaAction() *PatchPolicyNpaRulesIDMatchCriteriaAction {
	if o == nil {
		return nil
	}
	return o.MatchCriteriaAction
}

func (o *PatchPolicyNpaRulesIDRuleData) GetNetLocationObj() []string {
	if o == nil {
		return nil
	}
	return o.NetLocationObj
}

func (o *PatchPolicyNpaRulesIDRuleData) GetOrganizationUnits() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationUnits
}

func (o *PatchPolicyNpaRulesIDRuleData) GetPolicyType() *PatchPolicyNpaRulesIDPolicyType {
	if o == nil {
		return nil
	}
	return o.PolicyType
}

func (o *PatchPolicyNpaRulesIDRuleData) GetPrivateAppIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppIds
}

func (o *PatchPolicyNpaRulesIDRuleData) GetPrivateAppTagIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTagIds
}

func (o *PatchPolicyNpaRulesIDRuleData) GetPrivateAppTags() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTags
}

func (o *PatchPolicyNpaRulesIDRuleData) GetPrivateApps() []string {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

func (o *PatchPolicyNpaRulesIDRuleData) GetPrivateAppsWithActivities() []PatchPolicyNpaRulesIDPrivateAppsWithActivities {
	if o == nil {
		return nil
	}
	return o.PrivateAppsWithActivities
}

func (o *PatchPolicyNpaRulesIDRuleData) GetShowDlpProfileActionTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowDlpProfileActionTable
}

func (o *PatchPolicyNpaRulesIDRuleData) GetSrcCountries() []string {
	if o == nil {
		return nil
	}
	return o.SrcCountries
}

func (o *PatchPolicyNpaRulesIDRuleData) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *PatchPolicyNpaRulesIDRuleData) GetUserType() *PatchPolicyNpaRulesIDUserType {
	if o == nil {
		return nil
	}
	return o.UserType
}

func (o *PatchPolicyNpaRulesIDRuleData) GetUsers() []string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *PatchPolicyNpaRulesIDRuleData) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}

type PatchPolicyNpaRulesIDData struct {
	RuleData *PatchPolicyNpaRulesIDRuleData `json:"rule_data,omitempty"`
	RuleID   *int64                         `json:"rule_id,omitempty"`
	RuleName *string                        `json:"rule_name,omitempty"`
}

func (o *PatchPolicyNpaRulesIDData) GetRuleData() *PatchPolicyNpaRulesIDRuleData {
	if o == nil {
		return nil
	}
	return o.RuleData
}

func (o *PatchPolicyNpaRulesIDData) GetRuleID() *int64 {
	if o == nil {
		return nil
	}
	return o.RuleID
}

func (o *PatchPolicyNpaRulesIDData) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

type PatchPolicyNpaRulesIDStatus string

const (
	PatchPolicyNpaRulesIDStatusSuccess PatchPolicyNpaRulesIDStatus = "success"
	PatchPolicyNpaRulesIDStatusError   PatchPolicyNpaRulesIDStatus = "error"
)

func (e PatchPolicyNpaRulesIDStatus) ToPointer() *PatchPolicyNpaRulesIDStatus {
	return &e
}

func (e *PatchPolicyNpaRulesIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "error":
		*e = PatchPolicyNpaRulesIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchPolicyNpaRulesIDStatus: %v", v)
	}
}

// PatchPolicyNpaRulesIDResponseBody - successful operation
type PatchPolicyNpaRulesIDResponseBody struct {
	Data   *PatchPolicyNpaRulesIDData   `json:"data,omitempty"`
	Status *PatchPolicyNpaRulesIDStatus `json:"status,omitempty"`
}

func (o *PatchPolicyNpaRulesIDResponseBody) GetData() *PatchPolicyNpaRulesIDData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *PatchPolicyNpaRulesIDResponseBody) GetStatus() *PatchPolicyNpaRulesIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type PatchPolicyNpaRulesIDResponse struct {
	// successful operation
	TwoHundredApplicationJSONObject *PatchPolicyNpaRulesIDResponseBody
	// Invalid request
	FourHundredApplicationJSONObject *PatchPolicyNpaRulesIDResponseResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *PatchPolicyNpaRulesIDResponse) GetTwoHundredApplicationJSONObject() *PatchPolicyNpaRulesIDResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *PatchPolicyNpaRulesIDResponse) GetFourHundredApplicationJSONObject() *PatchPolicyNpaRulesIDResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *PatchPolicyNpaRulesIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PatchPolicyNpaRulesIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PatchPolicyNpaRulesIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
