// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostAppsPrivateProtocols struct {
	Port *string `json:"port,omitempty"`
	Type *string `json:"type,omitempty"`
}

func (o *PostAppsPrivateProtocols) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *PostAppsPrivateProtocols) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type PostAppsPrivatePublisherTags struct {
	TagName *string `json:"tag_name,omitempty"`
}

func (o *PostAppsPrivatePublisherTags) GetTagName() *string {
	if o == nil {
		return nil
	}
	return o.TagName
}

type PostAppsPrivatePublishers struct {
	PublisherID   *string `json:"publisher_id,omitempty"`
	PublisherName *string `json:"publisher_name,omitempty"`
}

func (o *PostAppsPrivatePublishers) GetPublisherID() *string {
	if o == nil {
		return nil
	}
	return o.PublisherID
}

func (o *PostAppsPrivatePublishers) GetPublisherName() *string {
	if o == nil {
		return nil
	}
	return o.PublisherName
}

type PostAppsPrivateTags struct {
	TagName *string `json:"tag_name,omitempty"`
}

func (o *PostAppsPrivateTags) GetTagName() *string {
	if o == nil {
		return nil
	}
	return o.TagName
}

type PostAppsPrivateRequestBody struct {
	AppName              *string                        `json:"app_name,omitempty"`
	ClientlessAccess     *bool                          `json:"clientless_access,omitempty"`
	Host                 *string                        `json:"host,omitempty"`
	Protocols            []PostAppsPrivateProtocols     `json:"protocols,omitempty"`
	PublisherTags        []PostAppsPrivatePublisherTags `json:"publisher_tags,omitempty"`
	Publishers           []PostAppsPrivatePublishers    `json:"publishers,omitempty"`
	RealHost             *string                        `json:"real_host,omitempty"`
	Tags                 []PostAppsPrivateTags          `json:"tags,omitempty"`
	TrustSelfSignedCerts *bool                          `json:"trust_self_signed_certs,omitempty"`
	UsePublisherDNS      *bool                          `json:"use_publisher_dns,omitempty"`
}

func (o *PostAppsPrivateRequestBody) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

func (o *PostAppsPrivateRequestBody) GetClientlessAccess() *bool {
	if o == nil {
		return nil
	}
	return o.ClientlessAccess
}

func (o *PostAppsPrivateRequestBody) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *PostAppsPrivateRequestBody) GetProtocols() []PostAppsPrivateProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *PostAppsPrivateRequestBody) GetPublisherTags() []PostAppsPrivatePublisherTags {
	if o == nil {
		return nil
	}
	return o.PublisherTags
}

func (o *PostAppsPrivateRequestBody) GetPublishers() []PostAppsPrivatePublishers {
	if o == nil {
		return nil
	}
	return o.Publishers
}

func (o *PostAppsPrivateRequestBody) GetRealHost() *string {
	if o == nil {
		return nil
	}
	return o.RealHost
}

func (o *PostAppsPrivateRequestBody) GetTags() []PostAppsPrivateTags {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PostAppsPrivateRequestBody) GetTrustSelfSignedCerts() *bool {
	if o == nil {
		return nil
	}
	return o.TrustSelfSignedCerts
}

func (o *PostAppsPrivateRequestBody) GetUsePublisherDNS() *bool {
	if o == nil {
		return nil
	}
	return o.UsePublisherDNS
}

// PostAppsPrivateQueryParamSilent - flag to skip output except status code
type PostAppsPrivateQueryParamSilent string

const (
	PostAppsPrivateQueryParamSilentOne  PostAppsPrivateQueryParamSilent = "1"
	PostAppsPrivateQueryParamSilentZero PostAppsPrivateQueryParamSilent = "0"
)

func (e PostAppsPrivateQueryParamSilent) ToPointer() *PostAppsPrivateQueryParamSilent {
	return &e
}

func (e *PostAppsPrivateQueryParamSilent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "0":
		*e = PostAppsPrivateQueryParamSilent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAppsPrivateQueryParamSilent: %v", v)
	}
}

type PostAppsPrivateRequest struct {
	RequestBody PostAppsPrivateRequestBody `request:"mediaType=application/json"`
	// flag to skip output except status code
	Silent *PostAppsPrivateQueryParamSilent `queryParam:"style=form,explode=true,name=silent"`
}

func (o *PostAppsPrivateRequest) GetRequestBody() PostAppsPrivateRequestBody {
	if o == nil {
		return PostAppsPrivateRequestBody{}
	}
	return o.RequestBody
}

func (o *PostAppsPrivateRequest) GetSilent() *PostAppsPrivateQueryParamSilent {
	if o == nil {
		return nil
	}
	return o.Silent
}

// PostAppsPrivateResponseBody - Invalid request
type PostAppsPrivateResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *PostAppsPrivateResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *PostAppsPrivateResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type PostAppsPrivateResponseProtocols struct {
	ID        *int    `json:"id,omitempty"`
	Port      *string `json:"port,omitempty"`
	ServiceID *int    `json:"service_id,omitempty"`
	Transport *string `json:"transport,omitempty"`
}

func (o *PostAppsPrivateResponseProtocols) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PostAppsPrivateResponseProtocols) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *PostAppsPrivateResponseProtocols) GetServiceID() *int {
	if o == nil {
		return nil
	}
	return o.ServiceID
}

func (o *PostAppsPrivateResponseProtocols) GetTransport() *string {
	if o == nil {
		return nil
	}
	return o.Transport
}

type PostAppsPrivateReachability struct {
	ErrorCode   *int    `json:"error_code,omitempty"`
	ErrorString *string `json:"error_string,omitempty"`
	Reachable   *bool   `json:"reachable,omitempty"`
}

func (o *PostAppsPrivateReachability) GetErrorCode() *int {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *PostAppsPrivateReachability) GetErrorString() *string {
	if o == nil {
		return nil
	}
	return o.ErrorString
}

func (o *PostAppsPrivateReachability) GetReachable() *bool {
	if o == nil {
		return nil
	}
	return o.Reachable
}

type PostAppsPrivateServicePublisherAssignments struct {
	Primary      *bool                        `json:"primary,omitempty"`
	PublisherID  *int                         `json:"publisher_id,omitempty"`
	Reachability *PostAppsPrivateReachability `json:"reachability,omitempty"`
	ServiceID    *int                         `json:"service_id,omitempty"`
}

func (o *PostAppsPrivateServicePublisherAssignments) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

func (o *PostAppsPrivateServicePublisherAssignments) GetPublisherID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherID
}

func (o *PostAppsPrivateServicePublisherAssignments) GetReachability() *PostAppsPrivateReachability {
	if o == nil {
		return nil
	}
	return o.Reachability
}

func (o *PostAppsPrivateServicePublisherAssignments) GetServiceID() *int {
	if o == nil {
		return nil
	}
	return o.ServiceID
}

type PostAppsPrivateResponseTags struct {
	TagID   *int    `json:"tag_id,omitempty"`
	TagName *string `json:"tag_name,omitempty"`
}

func (o *PostAppsPrivateResponseTags) GetTagID() *int {
	if o == nil {
		return nil
	}
	return o.TagID
}

func (o *PostAppsPrivateResponseTags) GetTagName() *string {
	if o == nil {
		return nil
	}
	return o.TagName
}

type PostAppsPrivateData struct {
	ClientlessAccess            *bool                                        `json:"clientless_access,omitempty"`
	Host                        *string                                      `json:"host,omitempty"`
	ID                          *int                                         `json:"id,omitempty"`
	Name                        *string                                      `json:"name,omitempty"`
	Protocols                   []PostAppsPrivateResponseProtocols           `json:"protocols,omitempty"`
	RealHost                    *string                                      `json:"real_host,omitempty"`
	ServicePublisherAssignments []PostAppsPrivateServicePublisherAssignments `json:"service_publisher_assignments,omitempty"`
	Tags                        []PostAppsPrivateResponseTags                `json:"tags,omitempty"`
	TrustSelfSignedCerts        *bool                                        `json:"trust_self_signed_certs,omitempty"`
	UsePublisherDNS             *bool                                        `json:"use_publisher_dns,omitempty"`
}

func (o *PostAppsPrivateData) GetClientlessAccess() *bool {
	if o == nil {
		return nil
	}
	return o.ClientlessAccess
}

func (o *PostAppsPrivateData) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *PostAppsPrivateData) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PostAppsPrivateData) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PostAppsPrivateData) GetProtocols() []PostAppsPrivateResponseProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *PostAppsPrivateData) GetRealHost() *string {
	if o == nil {
		return nil
	}
	return o.RealHost
}

func (o *PostAppsPrivateData) GetServicePublisherAssignments() []PostAppsPrivateServicePublisherAssignments {
	if o == nil {
		return nil
	}
	return o.ServicePublisherAssignments
}

func (o *PostAppsPrivateData) GetTags() []PostAppsPrivateResponseTags {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PostAppsPrivateData) GetTrustSelfSignedCerts() *bool {
	if o == nil {
		return nil
	}
	return o.TrustSelfSignedCerts
}

func (o *PostAppsPrivateData) GetUsePublisherDNS() *bool {
	if o == nil {
		return nil
	}
	return o.UsePublisherDNS
}

type PostAppsPrivateStatus string

const (
	PostAppsPrivateStatusSuccess  PostAppsPrivateStatus = "success"
	PostAppsPrivateStatusNotFound PostAppsPrivateStatus = "not found"
)

func (e PostAppsPrivateStatus) ToPointer() *PostAppsPrivateStatus {
	return &e
}

func (e *PostAppsPrivateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "not found":
		*e = PostAppsPrivateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAppsPrivateStatus: %v", v)
	}
}

type PostAppsPrivateResponseResponseBody struct {
	Data   *PostAppsPrivateData   `json:"data,omitempty"`
	Status *PostAppsPrivateStatus `json:"status,omitempty"`
}

func (o *PostAppsPrivateResponseResponseBody) GetData() *PostAppsPrivateData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *PostAppsPrivateResponseResponseBody) GetStatus() *PostAppsPrivateStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type PostAppsPrivateResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// successful operation
	Classes []PostAppsPrivateResponseResponseBody
	// Invalid request
	Object *PostAppsPrivateResponseBody
}

func (o *PostAppsPrivateResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PostAppsPrivateResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PostAppsPrivateResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PostAppsPrivateResponse) GetClasses() []PostAppsPrivateResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.Classes
}

func (o *PostAppsPrivateResponse) GetObject() *PostAppsPrivateResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
