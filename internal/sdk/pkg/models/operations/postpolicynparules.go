// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostPolicyNpaRulesAccessMethod string

const (
	PostPolicyNpaRulesAccessMethodClient     PostPolicyNpaRulesAccessMethod = "Client"
	PostPolicyNpaRulesAccessMethodClientless PostPolicyNpaRulesAccessMethod = "Clientless"
)

func (e PostPolicyNpaRulesAccessMethod) ToPointer() *PostPolicyNpaRulesAccessMethod {
	return &e
}

func (e *PostPolicyNpaRulesAccessMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		fallthrough
	case "Clientless":
		*e = PostPolicyNpaRulesAccessMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPolicyNpaRulesAccessMethod: %v", v)
	}
}

type PostPolicyNpaRulesActions string

const (
	PostPolicyNpaRulesActionsAllow       PostPolicyNpaRulesActions = "allow"
	PostPolicyNpaRulesActionsBlock       PostPolicyNpaRulesActions = "block"
	PostPolicyNpaRulesActionsAlert       PostPolicyNpaRulesActions = "alert"
	PostPolicyNpaRulesActionsQuanrantine PostPolicyNpaRulesActions = "quanrantine"
	PostPolicyNpaRulesActionsBypass      PostPolicyNpaRulesActions = "bypass"
)

func (e PostPolicyNpaRulesActions) ToPointer() *PostPolicyNpaRulesActions {
	return &e
}

func (e *PostPolicyNpaRulesActions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		fallthrough
	case "alert":
		fallthrough
	case "quanrantine":
		fallthrough
	case "bypass":
		*e = PostPolicyNpaRulesActions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPolicyNpaRulesActions: %v", v)
	}
}

type PostPolicyNpaRulesDlpActions struct {
	Actions    []PostPolicyNpaRulesActions `json:"actions,omitempty"`
	DlpProfile *string                     `json:"dlp_profile,omitempty"`
}

func (o *PostPolicyNpaRulesDlpActions) GetActions() []PostPolicyNpaRulesActions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *PostPolicyNpaRulesDlpActions) GetDlpProfile() *string {
	if o == nil {
		return nil
	}
	return o.DlpProfile
}

type PostPolicyNpaRulesActionName string

const (
	PostPolicyNpaRulesActionNameAllow PostPolicyNpaRulesActionName = "allow"
	PostPolicyNpaRulesActionNameBlock PostPolicyNpaRulesActionName = "block"
)

func (e PostPolicyNpaRulesActionName) ToPointer() *PostPolicyNpaRulesActionName {
	return &e
}

func (e *PostPolicyNpaRulesActionName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = PostPolicyNpaRulesActionName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPolicyNpaRulesActionName: %v", v)
	}
}

type PostPolicyNpaRulesMatchCriteriaAction struct {
	ActionName *PostPolicyNpaRulesActionName `json:"action_name,omitempty"`
}

func (o *PostPolicyNpaRulesMatchCriteriaAction) GetActionName() *PostPolicyNpaRulesActionName {
	if o == nil {
		return nil
	}
	return o.ActionName
}

type PostPolicyNpaRulesPolicyType string

const (
	PostPolicyNpaRulesPolicyTypePrivateApp PostPolicyNpaRulesPolicyType = "private-app"
)

func (e PostPolicyNpaRulesPolicyType) ToPointer() *PostPolicyNpaRulesPolicyType {
	return &e
}

func (e *PostPolicyNpaRulesPolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-app":
		*e = PostPolicyNpaRulesPolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPolicyNpaRulesPolicyType: %v", v)
	}
}

type PostPolicyNpaRulesActivity string

const (
	PostPolicyNpaRulesActivityAny PostPolicyNpaRulesActivity = "any"
)

func (e PostPolicyNpaRulesActivity) ToPointer() *PostPolicyNpaRulesActivity {
	return &e
}

func (e *PostPolicyNpaRulesActivity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		*e = PostPolicyNpaRulesActivity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPolicyNpaRulesActivity: %v", v)
	}
}

type PostPolicyNpaRulesActivities struct {
	Activity          *PostPolicyNpaRulesActivity `json:"activity,omitempty"`
	ListOfConstraints []string                    `json:"list_of_constraints,omitempty"`
}

func (o *PostPolicyNpaRulesActivities) GetActivity() *PostPolicyNpaRulesActivity {
	if o == nil {
		return nil
	}
	return o.Activity
}

func (o *PostPolicyNpaRulesActivities) GetListOfConstraints() []string {
	if o == nil {
		return nil
	}
	return o.ListOfConstraints
}

type PostPolicyNpaRulesPrivateAppsWithActivities struct {
	Activities []PostPolicyNpaRulesActivities `json:"activities,omitempty"`
	AppName    *string                        `json:"appName,omitempty"`
}

func (o *PostPolicyNpaRulesPrivateAppsWithActivities) GetActivities() []PostPolicyNpaRulesActivities {
	if o == nil {
		return nil
	}
	return o.Activities
}

func (o *PostPolicyNpaRulesPrivateAppsWithActivities) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

type PostPolicyNpaRulesUserType string

const (
	PostPolicyNpaRulesUserTypeUser PostPolicyNpaRulesUserType = "user"
)

func (e PostPolicyNpaRulesUserType) ToPointer() *PostPolicyNpaRulesUserType {
	return &e
}

func (e *PostPolicyNpaRulesUserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = PostPolicyNpaRulesUserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPolicyNpaRulesUserType: %v", v)
	}
}

type PostPolicyNpaRulesRuleData struct {
	AccessMethod              *PostPolicyNpaRulesAccessMethod               `json:"access_method,omitempty"`
	BNegateNetLocation        *bool                                         `json:"b_negateNetLocation,omitempty"`
	BNegateSrcCountries       *bool                                         `json:"b_negateSrcCountries,omitempty"`
	Classification            *string                                       `json:"classification,omitempty"`
	DlpActions                []PostPolicyNpaRulesDlpActions                `json:"dlp_actions,omitempty"`
	ExternalDlp               *bool                                         `json:"external_dlp,omitempty"`
	JSONVersion               *int64                                        `json:"json_version,omitempty"`
	MatchCriteriaAction       *PostPolicyNpaRulesMatchCriteriaAction        `json:"match_criteria_action,omitempty"`
	NetLocationObj            []string                                      `json:"net_location_obj,omitempty"`
	OrganizationUnits         []string                                      `json:"organization_units,omitempty"`
	PolicyType                *PostPolicyNpaRulesPolicyType                 `json:"policy_type,omitempty"`
	PrivateAppIds             []string                                      `json:"privateAppIds,omitempty"`
	PrivateAppTagIds          []string                                      `json:"privateAppTagIds,omitempty"`
	PrivateAppTags            []string                                      `json:"privateAppTags,omitempty"`
	PrivateApps               []string                                      `json:"privateApps,omitempty"`
	PrivateAppsWithActivities []PostPolicyNpaRulesPrivateAppsWithActivities `json:"privateAppsWithActivities,omitempty"`
	ShowDlpProfileActionTable *bool                                         `json:"show_dlp_profile_action_table,omitempty"`
	SrcCountries              []string                                      `json:"srcCountries,omitempty"`
	UserGroups                []string                                      `json:"userGroups,omitempty"`
	UserType                  *PostPolicyNpaRulesUserType                   `json:"userType,omitempty"`
	Users                     []string                                      `json:"users,omitempty"`
	Version                   *int64                                        `json:"version,omitempty"`
}

func (o *PostPolicyNpaRulesRuleData) GetAccessMethod() *PostPolicyNpaRulesAccessMethod {
	if o == nil {
		return nil
	}
	return o.AccessMethod
}

func (o *PostPolicyNpaRulesRuleData) GetBNegateNetLocation() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateNetLocation
}

func (o *PostPolicyNpaRulesRuleData) GetBNegateSrcCountries() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateSrcCountries
}

func (o *PostPolicyNpaRulesRuleData) GetClassification() *string {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *PostPolicyNpaRulesRuleData) GetDlpActions() []PostPolicyNpaRulesDlpActions {
	if o == nil {
		return nil
	}
	return o.DlpActions
}

func (o *PostPolicyNpaRulesRuleData) GetExternalDlp() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalDlp
}

func (o *PostPolicyNpaRulesRuleData) GetJSONVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.JSONVersion
}

func (o *PostPolicyNpaRulesRuleData) GetMatchCriteriaAction() *PostPolicyNpaRulesMatchCriteriaAction {
	if o == nil {
		return nil
	}
	return o.MatchCriteriaAction
}

func (o *PostPolicyNpaRulesRuleData) GetNetLocationObj() []string {
	if o == nil {
		return nil
	}
	return o.NetLocationObj
}

func (o *PostPolicyNpaRulesRuleData) GetOrganizationUnits() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationUnits
}

func (o *PostPolicyNpaRulesRuleData) GetPolicyType() *PostPolicyNpaRulesPolicyType {
	if o == nil {
		return nil
	}
	return o.PolicyType
}

func (o *PostPolicyNpaRulesRuleData) GetPrivateAppIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppIds
}

func (o *PostPolicyNpaRulesRuleData) GetPrivateAppTagIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTagIds
}

func (o *PostPolicyNpaRulesRuleData) GetPrivateAppTags() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTags
}

func (o *PostPolicyNpaRulesRuleData) GetPrivateApps() []string {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

func (o *PostPolicyNpaRulesRuleData) GetPrivateAppsWithActivities() []PostPolicyNpaRulesPrivateAppsWithActivities {
	if o == nil {
		return nil
	}
	return o.PrivateAppsWithActivities
}

func (o *PostPolicyNpaRulesRuleData) GetShowDlpProfileActionTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowDlpProfileActionTable
}

func (o *PostPolicyNpaRulesRuleData) GetSrcCountries() []string {
	if o == nil {
		return nil
	}
	return o.SrcCountries
}

func (o *PostPolicyNpaRulesRuleData) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *PostPolicyNpaRulesRuleData) GetUserType() *PostPolicyNpaRulesUserType {
	if o == nil {
		return nil
	}
	return o.UserType
}

func (o *PostPolicyNpaRulesRuleData) GetUsers() []string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *PostPolicyNpaRulesRuleData) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}

type PostPolicyNpaRulesOrder string

const (
	PostPolicyNpaRulesOrderTop    PostPolicyNpaRulesOrder = "top"
	PostPolicyNpaRulesOrderBottom PostPolicyNpaRulesOrder = "bottom"
	PostPolicyNpaRulesOrderBefore PostPolicyNpaRulesOrder = "before"
	PostPolicyNpaRulesOrderAfter  PostPolicyNpaRulesOrder = "after"
)

func (e PostPolicyNpaRulesOrder) ToPointer() *PostPolicyNpaRulesOrder {
	return &e
}

func (e *PostPolicyNpaRulesOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "top":
		fallthrough
	case "bottom":
		fallthrough
	case "before":
		fallthrough
	case "after":
		*e = PostPolicyNpaRulesOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPolicyNpaRulesOrder: %v", v)
	}
}

type PostPolicyNpaRulesRuleOrder struct {
	Order    *PostPolicyNpaRulesOrder `json:"order,omitempty"`
	Position *int64                   `json:"position,omitempty"`
	RuleID   *int64                   `json:"rule_id,omitempty"`
	RuleName *string                  `json:"rule_name,omitempty"`
}

func (o *PostPolicyNpaRulesRuleOrder) GetOrder() *PostPolicyNpaRulesOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *PostPolicyNpaRulesRuleOrder) GetPosition() *int64 {
	if o == nil {
		return nil
	}
	return o.Position
}

func (o *PostPolicyNpaRulesRuleOrder) GetRuleID() *int64 {
	if o == nil {
		return nil
	}
	return o.RuleID
}

func (o *PostPolicyNpaRulesRuleOrder) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

type PostPolicyNpaRulesRequestBody struct {
	Description *string                      `json:"description,omitempty"`
	Enabled     *string                      `json:"enabled,omitempty"`
	GroupName   *string                      `json:"group_name,omitempty"`
	RuleData    *PostPolicyNpaRulesRuleData  `json:"rule_data,omitempty"`
	RuleName    *string                      `json:"rule_name,omitempty"`
	RuleOrder   *PostPolicyNpaRulesRuleOrder `json:"rule_order,omitempty"`
}

func (o *PostPolicyNpaRulesRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PostPolicyNpaRulesRequestBody) GetEnabled() *string {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *PostPolicyNpaRulesRequestBody) GetGroupName() *string {
	if o == nil {
		return nil
	}
	return o.GroupName
}

func (o *PostPolicyNpaRulesRequestBody) GetRuleData() *PostPolicyNpaRulesRuleData {
	if o == nil {
		return nil
	}
	return o.RuleData
}

func (o *PostPolicyNpaRulesRequestBody) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

func (o *PostPolicyNpaRulesRequestBody) GetRuleOrder() *PostPolicyNpaRulesRuleOrder {
	if o == nil {
		return nil
	}
	return o.RuleOrder
}

// PostPolicyNpaRulesResponseResponseBody - Invalid request
type PostPolicyNpaRulesResponseResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *PostPolicyNpaRulesResponseResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *PostPolicyNpaRulesResponseResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type PostPolicyNpaRulesResponseAccessMethod string

const (
	PostPolicyNpaRulesResponseAccessMethodClient     PostPolicyNpaRulesResponseAccessMethod = "Client"
	PostPolicyNpaRulesResponseAccessMethodClientless PostPolicyNpaRulesResponseAccessMethod = "Clientless"
)

func (e PostPolicyNpaRulesResponseAccessMethod) ToPointer() *PostPolicyNpaRulesResponseAccessMethod {
	return &e
}

func (e *PostPolicyNpaRulesResponseAccessMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		fallthrough
	case "Clientless":
		*e = PostPolicyNpaRulesResponseAccessMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPolicyNpaRulesResponseAccessMethod: %v", v)
	}
}

type PostPolicyNpaRulesResponseActions string

const (
	PostPolicyNpaRulesResponseActionsAllow       PostPolicyNpaRulesResponseActions = "allow"
	PostPolicyNpaRulesResponseActionsBlock       PostPolicyNpaRulesResponseActions = "block"
	PostPolicyNpaRulesResponseActionsAlert       PostPolicyNpaRulesResponseActions = "alert"
	PostPolicyNpaRulesResponseActionsQuanrantine PostPolicyNpaRulesResponseActions = "quanrantine"
	PostPolicyNpaRulesResponseActionsBypass      PostPolicyNpaRulesResponseActions = "bypass"
)

func (e PostPolicyNpaRulesResponseActions) ToPointer() *PostPolicyNpaRulesResponseActions {
	return &e
}

func (e *PostPolicyNpaRulesResponseActions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		fallthrough
	case "alert":
		fallthrough
	case "quanrantine":
		fallthrough
	case "bypass":
		*e = PostPolicyNpaRulesResponseActions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPolicyNpaRulesResponseActions: %v", v)
	}
}

type PostPolicyNpaRulesResponseDlpActions struct {
	Actions    []PostPolicyNpaRulesResponseActions `json:"actions,omitempty"`
	DlpProfile *string                             `json:"dlp_profile,omitempty"`
}

func (o *PostPolicyNpaRulesResponseDlpActions) GetActions() []PostPolicyNpaRulesResponseActions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *PostPolicyNpaRulesResponseDlpActions) GetDlpProfile() *string {
	if o == nil {
		return nil
	}
	return o.DlpProfile
}

type PostPolicyNpaRulesResponseActionName string

const (
	PostPolicyNpaRulesResponseActionNameAllow PostPolicyNpaRulesResponseActionName = "allow"
	PostPolicyNpaRulesResponseActionNameBlock PostPolicyNpaRulesResponseActionName = "block"
)

func (e PostPolicyNpaRulesResponseActionName) ToPointer() *PostPolicyNpaRulesResponseActionName {
	return &e
}

func (e *PostPolicyNpaRulesResponseActionName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = PostPolicyNpaRulesResponseActionName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPolicyNpaRulesResponseActionName: %v", v)
	}
}

type PostPolicyNpaRulesResponseMatchCriteriaAction struct {
	ActionName *PostPolicyNpaRulesResponseActionName `json:"action_name,omitempty"`
}

func (o *PostPolicyNpaRulesResponseMatchCriteriaAction) GetActionName() *PostPolicyNpaRulesResponseActionName {
	if o == nil {
		return nil
	}
	return o.ActionName
}

type PostPolicyNpaRulesResponsePolicyType string

const (
	PostPolicyNpaRulesResponsePolicyTypePrivateApp PostPolicyNpaRulesResponsePolicyType = "private-app"
)

func (e PostPolicyNpaRulesResponsePolicyType) ToPointer() *PostPolicyNpaRulesResponsePolicyType {
	return &e
}

func (e *PostPolicyNpaRulesResponsePolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-app":
		*e = PostPolicyNpaRulesResponsePolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPolicyNpaRulesResponsePolicyType: %v", v)
	}
}

type PostPolicyNpaRulesResponseActivity string

const (
	PostPolicyNpaRulesResponseActivityAny PostPolicyNpaRulesResponseActivity = "any"
)

func (e PostPolicyNpaRulesResponseActivity) ToPointer() *PostPolicyNpaRulesResponseActivity {
	return &e
}

func (e *PostPolicyNpaRulesResponseActivity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		*e = PostPolicyNpaRulesResponseActivity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPolicyNpaRulesResponseActivity: %v", v)
	}
}

type PostPolicyNpaRulesResponseActivities struct {
	Activity          *PostPolicyNpaRulesResponseActivity `json:"activity,omitempty"`
	ListOfConstraints []string                            `json:"list_of_constraints,omitempty"`
}

func (o *PostPolicyNpaRulesResponseActivities) GetActivity() *PostPolicyNpaRulesResponseActivity {
	if o == nil {
		return nil
	}
	return o.Activity
}

func (o *PostPolicyNpaRulesResponseActivities) GetListOfConstraints() []string {
	if o == nil {
		return nil
	}
	return o.ListOfConstraints
}

type PostPolicyNpaRulesResponsePrivateAppsWithActivities struct {
	Activities []PostPolicyNpaRulesResponseActivities `json:"activities,omitempty"`
	AppName    *string                                `json:"appName,omitempty"`
}

func (o *PostPolicyNpaRulesResponsePrivateAppsWithActivities) GetActivities() []PostPolicyNpaRulesResponseActivities {
	if o == nil {
		return nil
	}
	return o.Activities
}

func (o *PostPolicyNpaRulesResponsePrivateAppsWithActivities) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

type PostPolicyNpaRulesResponseUserType string

const (
	PostPolicyNpaRulesResponseUserTypeUser PostPolicyNpaRulesResponseUserType = "user"
)

func (e PostPolicyNpaRulesResponseUserType) ToPointer() *PostPolicyNpaRulesResponseUserType {
	return &e
}

func (e *PostPolicyNpaRulesResponseUserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = PostPolicyNpaRulesResponseUserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPolicyNpaRulesResponseUserType: %v", v)
	}
}

type PostPolicyNpaRulesResponseRuleData struct {
	AccessMethod              *PostPolicyNpaRulesResponseAccessMethod               `json:"access_method,omitempty"`
	BNegateNetLocation        *bool                                                 `json:"b_negateNetLocation,omitempty"`
	BNegateSrcCountries       *bool                                                 `json:"b_negateSrcCountries,omitempty"`
	Classification            *string                                               `json:"classification,omitempty"`
	DlpActions                []PostPolicyNpaRulesResponseDlpActions                `json:"dlp_actions,omitempty"`
	ExternalDlp               *bool                                                 `json:"external_dlp,omitempty"`
	JSONVersion               *int64                                                `json:"json_version,omitempty"`
	MatchCriteriaAction       *PostPolicyNpaRulesResponseMatchCriteriaAction        `json:"match_criteria_action,omitempty"`
	NetLocationObj            []string                                              `json:"net_location_obj,omitempty"`
	OrganizationUnits         []string                                              `json:"organization_units,omitempty"`
	PolicyType                *PostPolicyNpaRulesResponsePolicyType                 `json:"policy_type,omitempty"`
	PrivateAppIds             []string                                              `json:"privateAppIds,omitempty"`
	PrivateAppTagIds          []string                                              `json:"privateAppTagIds,omitempty"`
	PrivateAppTags            []string                                              `json:"privateAppTags,omitempty"`
	PrivateApps               []string                                              `json:"privateApps,omitempty"`
	PrivateAppsWithActivities []PostPolicyNpaRulesResponsePrivateAppsWithActivities `json:"privateAppsWithActivities,omitempty"`
	ShowDlpProfileActionTable *bool                                                 `json:"show_dlp_profile_action_table,omitempty"`
	SrcCountries              []string                                              `json:"srcCountries,omitempty"`
	UserGroups                []string                                              `json:"userGroups,omitempty"`
	UserType                  *PostPolicyNpaRulesResponseUserType                   `json:"userType,omitempty"`
	Users                     []string                                              `json:"users,omitempty"`
	Version                   *int64                                                `json:"version,omitempty"`
}

func (o *PostPolicyNpaRulesResponseRuleData) GetAccessMethod() *PostPolicyNpaRulesResponseAccessMethod {
	if o == nil {
		return nil
	}
	return o.AccessMethod
}

func (o *PostPolicyNpaRulesResponseRuleData) GetBNegateNetLocation() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateNetLocation
}

func (o *PostPolicyNpaRulesResponseRuleData) GetBNegateSrcCountries() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateSrcCountries
}

func (o *PostPolicyNpaRulesResponseRuleData) GetClassification() *string {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *PostPolicyNpaRulesResponseRuleData) GetDlpActions() []PostPolicyNpaRulesResponseDlpActions {
	if o == nil {
		return nil
	}
	return o.DlpActions
}

func (o *PostPolicyNpaRulesResponseRuleData) GetExternalDlp() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalDlp
}

func (o *PostPolicyNpaRulesResponseRuleData) GetJSONVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.JSONVersion
}

func (o *PostPolicyNpaRulesResponseRuleData) GetMatchCriteriaAction() *PostPolicyNpaRulesResponseMatchCriteriaAction {
	if o == nil {
		return nil
	}
	return o.MatchCriteriaAction
}

func (o *PostPolicyNpaRulesResponseRuleData) GetNetLocationObj() []string {
	if o == nil {
		return nil
	}
	return o.NetLocationObj
}

func (o *PostPolicyNpaRulesResponseRuleData) GetOrganizationUnits() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationUnits
}

func (o *PostPolicyNpaRulesResponseRuleData) GetPolicyType() *PostPolicyNpaRulesResponsePolicyType {
	if o == nil {
		return nil
	}
	return o.PolicyType
}

func (o *PostPolicyNpaRulesResponseRuleData) GetPrivateAppIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppIds
}

func (o *PostPolicyNpaRulesResponseRuleData) GetPrivateAppTagIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTagIds
}

func (o *PostPolicyNpaRulesResponseRuleData) GetPrivateAppTags() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTags
}

func (o *PostPolicyNpaRulesResponseRuleData) GetPrivateApps() []string {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

func (o *PostPolicyNpaRulesResponseRuleData) GetPrivateAppsWithActivities() []PostPolicyNpaRulesResponsePrivateAppsWithActivities {
	if o == nil {
		return nil
	}
	return o.PrivateAppsWithActivities
}

func (o *PostPolicyNpaRulesResponseRuleData) GetShowDlpProfileActionTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowDlpProfileActionTable
}

func (o *PostPolicyNpaRulesResponseRuleData) GetSrcCountries() []string {
	if o == nil {
		return nil
	}
	return o.SrcCountries
}

func (o *PostPolicyNpaRulesResponseRuleData) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *PostPolicyNpaRulesResponseRuleData) GetUserType() *PostPolicyNpaRulesResponseUserType {
	if o == nil {
		return nil
	}
	return o.UserType
}

func (o *PostPolicyNpaRulesResponseRuleData) GetUsers() []string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *PostPolicyNpaRulesResponseRuleData) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}

// PostPolicyNpaRulesResponseBody - successful operation
type PostPolicyNpaRulesResponseBody struct {
	RuleData *PostPolicyNpaRulesResponseRuleData `json:"rule_data,omitempty"`
	RuleID   *int64                              `json:"rule_id,omitempty"`
	RuleName *string                             `json:"rule_name,omitempty"`
}

func (o *PostPolicyNpaRulesResponseBody) GetRuleData() *PostPolicyNpaRulesResponseRuleData {
	if o == nil {
		return nil
	}
	return o.RuleData
}

func (o *PostPolicyNpaRulesResponseBody) GetRuleID() *int64 {
	if o == nil {
		return nil
	}
	return o.RuleID
}

func (o *PostPolicyNpaRulesResponseBody) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

type PostPolicyNpaRulesResponse struct {
	// successful operation
	TwoHundredApplicationJSONObject *PostPolicyNpaRulesResponseBody
	// Invalid request
	FourHundredApplicationJSONObject *PostPolicyNpaRulesResponseResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *PostPolicyNpaRulesResponse) GetTwoHundredApplicationJSONObject() *PostPolicyNpaRulesResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *PostPolicyNpaRulesResponse) GetFourHundredApplicationJSONObject() *PostPolicyNpaRulesResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *PostPolicyNpaRulesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PostPolicyNpaRulesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PostPolicyNpaRulesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
