// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetUsersRequest struct {
	// key eq value pair like userName(Nothing but UPN), externalId(scim_externalid) and pass the value to be searched for the key passed.  Example: userName eq "upn1" OR externalId eq "User-Ext_id"
	Filter     *string `queryParam:"style=form,explode=true,name=filter"`
	StartIndex *int64  `queryParam:"style=form,explode=true,name=startIndex"`
	Count      *int64  `queryParam:"style=form,explode=true,name=count"`
}

func (o *GetUsersRequest) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *GetUsersRequest) GetStartIndex() *int64 {
	if o == nil {
		return nil
	}
	return o.StartIndex
}

func (o *GetUsersRequest) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

type GetUsersScimUsersStatus string

const (
	GetUsersScimUsersStatusFailed            GetUsersScimUsersStatus = "failed"
	GetUsersScimUsersStatusFiveHundredAndOne GetUsersScimUsersStatus = "501"
)

func (e GetUsersScimUsersStatus) ToPointer() *GetUsersScimUsersStatus {
	return &e
}

func (e *GetUsersScimUsersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "failed":
		fallthrough
	case "501":
		*e = GetUsersScimUsersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUsersScimUsersStatus: %v", v)
	}
}

// GetUsersScimUsersResponse501ResponseBody - Internal error Failed
type GetUsersScimUsersResponse501ResponseBody struct {
	Status  *GetUsersScimUsersStatus `json:"status,omitempty"`
	Schemas *string                  `json:"schemas,omitempty"`
	Detail  *string                  `json:"detail,omitempty"`
}

func (o *GetUsersScimUsersResponse501ResponseBody) GetStatus() *GetUsersScimUsersStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetUsersScimUsersResponse501ResponseBody) GetSchemas() *string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *GetUsersScimUsersResponse501ResponseBody) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

// GetUsersScimUsersResponseResponseBody - Not authorized to execte the specific API.
type GetUsersScimUsersResponseResponseBody struct {
	Message *string `json:"message,omitempty"`
}

func (o *GetUsersScimUsersResponseResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

type GetUsersStatus string

const (
	GetUsersStatusFourHundred GetUsersStatus = "400"
	GetUsersStatusFailed      GetUsersStatus = "failed"
)

func (e GetUsersStatus) ToPointer() *GetUsersStatus {
	return &e
}

func (e *GetUsersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "400":
		fallthrough
	case "failed":
		*e = GetUsersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUsersStatus: %v", v)
	}
}

// GetUsersScimUsersResponseBody - Failed
type GetUsersScimUsersResponseBody struct {
	Status      *GetUsersStatus `json:"status,omitempty"`
	Description *string         `json:"description,omitempty"`
	// schema of the resource
	Schemas []string `json:"schemas,omitempty"`
}

func (o *GetUsersScimUsersResponseBody) GetStatus() *GetUsersStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetUsersScimUsersResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetUsersScimUsersResponseBody) GetSchemas() []string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

// GetUsersName - Family_name and given_name for the User
type GetUsersName struct {
	// last_name of the SCIM User.
	FamilyName *string `json:"familyName,omitempty"`
	// first_name of the SCIM User.
	GivenName *string `json:"givenName,omitempty"`
}

func (o *GetUsersName) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *GetUsersName) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

type GetUsersEmails struct {
	// Email ID of the SCIM user
	Value   *string `json:"value,omitempty"`
	Primary *bool   `json:"primary,omitempty"`
}

func (o *GetUsersEmails) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *GetUsersEmails) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

type Resources struct {
	// SCIM User ID
	ID *string `json:"id,omitempty"`
	// UPN name of the SCIM User
	UserName *string `json:"userName,omitempty"`
	// Family_name and given_name for the User
	Name   *GetUsersName    `json:"name,omitempty"`
	Active *bool            `json:"active,omitempty"`
	Emails []GetUsersEmails `json:"emails,omitempty"`
	// Optional - Scim External ID
	ExternalID *string `json:"externalId,omitempty"`
}

func (o *Resources) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Resources) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *Resources) GetName() *GetUsersName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Resources) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *Resources) GetEmails() []GetUsersEmails {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *Resources) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

// GetUsersResponseBody - Successfully added/overwritten the User.
type GetUsersResponseBody struct {
	// schema of the resource
	Schemas      []string    `json:"schemas,omitempty"`
	TotalResults *int64      `json:"totalResults,omitempty"`
	StartIndex   *int64      `json:"startIndex,omitempty"`
	ItemsPerPage *int64      `json:"itemsPerPage,omitempty"`
	Resources    []Resources `json:"Resources,omitempty"`
}

func (o *GetUsersResponseBody) GetSchemas() []string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *GetUsersResponseBody) GetTotalResults() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalResults
}

func (o *GetUsersResponseBody) GetStartIndex() *int64 {
	if o == nil {
		return nil
	}
	return o.StartIndex
}

func (o *GetUsersResponseBody) GetItemsPerPage() *int64 {
	if o == nil {
		return nil
	}
	return o.ItemsPerPage
}

func (o *GetUsersResponseBody) GetResources() []Resources {
	if o == nil {
		return nil
	}
	return o.Resources
}

type GetUsersResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successfully added/overwritten the User.
	TwoHundredApplicationScimPlusJSONObject *GetUsersResponseBody
	// Failed
	FourHundredApplicationJSONObject *GetUsersScimUsersResponseBody
	// Not authorized to execte the specific API.
	FourHundredAndThreeApplicationJSONObject *GetUsersScimUsersResponseResponseBody
	// Internal error Failed
	FiveHundredAndOneApplicationJSONObject *GetUsersScimUsersResponse501ResponseBody
}

func (o *GetUsersResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetUsersResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetUsersResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetUsersResponse) GetTwoHundredApplicationScimPlusJSONObject() *GetUsersResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationScimPlusJSONObject
}

func (o *GetUsersResponse) GetFourHundredApplicationJSONObject() *GetUsersScimUsersResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *GetUsersResponse) GetFourHundredAndThreeApplicationJSONObject() *GetUsersScimUsersResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *GetUsersResponse) GetFiveHundredAndOneApplicationJSONObject() *GetUsersScimUsersResponse501ResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredAndOneApplicationJSONObject
}
