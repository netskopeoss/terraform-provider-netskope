// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PutAppsPrivatePrivateAppIDProtocols struct {
	Port *string `json:"port,omitempty"`
	Type *string `json:"type,omitempty"`
}

func (o *PutAppsPrivatePrivateAppIDProtocols) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *PutAppsPrivatePrivateAppIDProtocols) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type PutAppsPrivatePrivateAppIDPublisherTags struct {
	TagName *string `json:"tag_name,omitempty"`
}

func (o *PutAppsPrivatePrivateAppIDPublisherTags) GetTagName() *string {
	if o == nil {
		return nil
	}
	return o.TagName
}

type PutAppsPrivatePrivateAppIDPublishers struct {
	PublisherID   *string `json:"publisher_id,omitempty"`
	PublisherName *string `json:"publisher_name,omitempty"`
}

func (o *PutAppsPrivatePrivateAppIDPublishers) GetPublisherID() *string {
	if o == nil {
		return nil
	}
	return o.PublisherID
}

func (o *PutAppsPrivatePrivateAppIDPublishers) GetPublisherName() *string {
	if o == nil {
		return nil
	}
	return o.PublisherName
}

type PutAppsPrivatePrivateAppIDTags struct {
	TagName *string `json:"tag_name,omitempty"`
}

func (o *PutAppsPrivatePrivateAppIDTags) GetTagName() *string {
	if o == nil {
		return nil
	}
	return o.TagName
}

type PutAppsPrivatePrivateAppIDRequestBody struct {
	AppName              *string                                   `json:"app_name,omitempty"`
	ClientlessAccess     *bool                                     `json:"clientless_access,omitempty"`
	Host                 *string                                   `json:"host,omitempty"`
	ID                   *int                                      `json:"id,omitempty"`
	Protocols            []PutAppsPrivatePrivateAppIDProtocols     `json:"protocols,omitempty"`
	PublisherTags        []PutAppsPrivatePrivateAppIDPublisherTags `json:"publisher_tags,omitempty"`
	Publishers           []PutAppsPrivatePrivateAppIDPublishers    `json:"publishers,omitempty"`
	RealHost             *string                                   `json:"real_host,omitempty"`
	Tags                 []PutAppsPrivatePrivateAppIDTags          `json:"tags,omitempty"`
	TrustSelfSignedCerts *bool                                     `json:"trust_self_signed_certs,omitempty"`
	UsePublisherDNS      *bool                                     `json:"use_publisher_dns,omitempty"`
}

func (o *PutAppsPrivatePrivateAppIDRequestBody) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

func (o *PutAppsPrivatePrivateAppIDRequestBody) GetClientlessAccess() *bool {
	if o == nil {
		return nil
	}
	return o.ClientlessAccess
}

func (o *PutAppsPrivatePrivateAppIDRequestBody) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *PutAppsPrivatePrivateAppIDRequestBody) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PutAppsPrivatePrivateAppIDRequestBody) GetProtocols() []PutAppsPrivatePrivateAppIDProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *PutAppsPrivatePrivateAppIDRequestBody) GetPublisherTags() []PutAppsPrivatePrivateAppIDPublisherTags {
	if o == nil {
		return nil
	}
	return o.PublisherTags
}

func (o *PutAppsPrivatePrivateAppIDRequestBody) GetPublishers() []PutAppsPrivatePrivateAppIDPublishers {
	if o == nil {
		return nil
	}
	return o.Publishers
}

func (o *PutAppsPrivatePrivateAppIDRequestBody) GetRealHost() *string {
	if o == nil {
		return nil
	}
	return o.RealHost
}

func (o *PutAppsPrivatePrivateAppIDRequestBody) GetTags() []PutAppsPrivatePrivateAppIDTags {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PutAppsPrivatePrivateAppIDRequestBody) GetTrustSelfSignedCerts() *bool {
	if o == nil {
		return nil
	}
	return o.TrustSelfSignedCerts
}

func (o *PutAppsPrivatePrivateAppIDRequestBody) GetUsePublisherDNS() *bool {
	if o == nil {
		return nil
	}
	return o.UsePublisherDNS
}

// PutAppsPrivatePrivateAppIDQueryParamSilent - flag to skip output except status code
type PutAppsPrivatePrivateAppIDQueryParamSilent string

const (
	PutAppsPrivatePrivateAppIDQueryParamSilentOne  PutAppsPrivatePrivateAppIDQueryParamSilent = "1"
	PutAppsPrivatePrivateAppIDQueryParamSilentZero PutAppsPrivatePrivateAppIDQueryParamSilent = "0"
)

func (e PutAppsPrivatePrivateAppIDQueryParamSilent) ToPointer() *PutAppsPrivatePrivateAppIDQueryParamSilent {
	return &e
}

func (e *PutAppsPrivatePrivateAppIDQueryParamSilent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "0":
		*e = PutAppsPrivatePrivateAppIDQueryParamSilent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAppsPrivatePrivateAppIDQueryParamSilent: %v", v)
	}
}

type PutAppsPrivatePrivateAppIDRequest struct {
	RequestBody PutAppsPrivatePrivateAppIDRequestBody `request:"mediaType=application/json"`
	// private apps id
	PrivateAppID int `pathParam:"style=simple,explode=false,name=private_app_id"`
	// flag to skip output except status code
	Silent *PutAppsPrivatePrivateAppIDQueryParamSilent `queryParam:"style=form,explode=true,name=silent"`
}

func (o *PutAppsPrivatePrivateAppIDRequest) GetRequestBody() PutAppsPrivatePrivateAppIDRequestBody {
	if o == nil {
		return PutAppsPrivatePrivateAppIDRequestBody{}
	}
	return o.RequestBody
}

func (o *PutAppsPrivatePrivateAppIDRequest) GetPrivateAppID() int {
	if o == nil {
		return 0
	}
	return o.PrivateAppID
}

func (o *PutAppsPrivatePrivateAppIDRequest) GetSilent() *PutAppsPrivatePrivateAppIDQueryParamSilent {
	if o == nil {
		return nil
	}
	return o.Silent
}

// PutAppsPrivatePrivateAppIDResponseResponseBody - Invalid request
type PutAppsPrivatePrivateAppIDResponseResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *PutAppsPrivatePrivateAppIDResponseResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *PutAppsPrivatePrivateAppIDResponseResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type PutAppsPrivatePrivateAppIDResponseProtocols struct {
	ID        *int    `json:"id,omitempty"`
	Port      *string `json:"port,omitempty"`
	ServiceID *int    `json:"service_id,omitempty"`
	Transport *string `json:"transport,omitempty"`
}

func (o *PutAppsPrivatePrivateAppIDResponseProtocols) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PutAppsPrivatePrivateAppIDResponseProtocols) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *PutAppsPrivatePrivateAppIDResponseProtocols) GetServiceID() *int {
	if o == nil {
		return nil
	}
	return o.ServiceID
}

func (o *PutAppsPrivatePrivateAppIDResponseProtocols) GetTransport() *string {
	if o == nil {
		return nil
	}
	return o.Transport
}

type PutAppsPrivatePrivateAppIDReachability struct {
	ErrorCode   *int    `json:"error_code,omitempty"`
	ErrorString *string `json:"error_string,omitempty"`
	Reachable   *bool   `json:"reachable,omitempty"`
}

func (o *PutAppsPrivatePrivateAppIDReachability) GetErrorCode() *int {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *PutAppsPrivatePrivateAppIDReachability) GetErrorString() *string {
	if o == nil {
		return nil
	}
	return o.ErrorString
}

func (o *PutAppsPrivatePrivateAppIDReachability) GetReachable() *bool {
	if o == nil {
		return nil
	}
	return o.Reachable
}

type PutAppsPrivatePrivateAppIDServicePublisherAssignments struct {
	Primary      *bool                                   `json:"primary,omitempty"`
	PublisherID  *int                                    `json:"publisher_id,omitempty"`
	Reachability *PutAppsPrivatePrivateAppIDReachability `json:"reachability,omitempty"`
	ServiceID    *int                                    `json:"service_id,omitempty"`
}

func (o *PutAppsPrivatePrivateAppIDServicePublisherAssignments) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

func (o *PutAppsPrivatePrivateAppIDServicePublisherAssignments) GetPublisherID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherID
}

func (o *PutAppsPrivatePrivateAppIDServicePublisherAssignments) GetReachability() *PutAppsPrivatePrivateAppIDReachability {
	if o == nil {
		return nil
	}
	return o.Reachability
}

func (o *PutAppsPrivatePrivateAppIDServicePublisherAssignments) GetServiceID() *int {
	if o == nil {
		return nil
	}
	return o.ServiceID
}

type PutAppsPrivatePrivateAppIDResponseTags struct {
	TagID   *int    `json:"tag_id,omitempty"`
	TagName *string `json:"tag_name,omitempty"`
}

func (o *PutAppsPrivatePrivateAppIDResponseTags) GetTagID() *int {
	if o == nil {
		return nil
	}
	return o.TagID
}

func (o *PutAppsPrivatePrivateAppIDResponseTags) GetTagName() *string {
	if o == nil {
		return nil
	}
	return o.TagName
}

type PutAppsPrivatePrivateAppIDData struct {
	ClientlessAccess            *bool                                                   `json:"clientless_access,omitempty"`
	Host                        *string                                                 `json:"host,omitempty"`
	ID                          *int                                                    `json:"id,omitempty"`
	Name                        *string                                                 `json:"name,omitempty"`
	Protocols                   []PutAppsPrivatePrivateAppIDResponseProtocols           `json:"protocols,omitempty"`
	RealHost                    *string                                                 `json:"real_host,omitempty"`
	ServicePublisherAssignments []PutAppsPrivatePrivateAppIDServicePublisherAssignments `json:"service_publisher_assignments,omitempty"`
	Tags                        []PutAppsPrivatePrivateAppIDResponseTags                `json:"tags,omitempty"`
	TrustSelfSignedCerts        *bool                                                   `json:"trust_self_signed_certs,omitempty"`
	UsePublisherDNS             *bool                                                   `json:"use_publisher_dns,omitempty"`
}

func (o *PutAppsPrivatePrivateAppIDData) GetClientlessAccess() *bool {
	if o == nil {
		return nil
	}
	return o.ClientlessAccess
}

func (o *PutAppsPrivatePrivateAppIDData) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *PutAppsPrivatePrivateAppIDData) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PutAppsPrivatePrivateAppIDData) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PutAppsPrivatePrivateAppIDData) GetProtocols() []PutAppsPrivatePrivateAppIDResponseProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *PutAppsPrivatePrivateAppIDData) GetRealHost() *string {
	if o == nil {
		return nil
	}
	return o.RealHost
}

func (o *PutAppsPrivatePrivateAppIDData) GetServicePublisherAssignments() []PutAppsPrivatePrivateAppIDServicePublisherAssignments {
	if o == nil {
		return nil
	}
	return o.ServicePublisherAssignments
}

func (o *PutAppsPrivatePrivateAppIDData) GetTags() []PutAppsPrivatePrivateAppIDResponseTags {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PutAppsPrivatePrivateAppIDData) GetTrustSelfSignedCerts() *bool {
	if o == nil {
		return nil
	}
	return o.TrustSelfSignedCerts
}

func (o *PutAppsPrivatePrivateAppIDData) GetUsePublisherDNS() *bool {
	if o == nil {
		return nil
	}
	return o.UsePublisherDNS
}

type PutAppsPrivatePrivateAppIDStatus string

const (
	PutAppsPrivatePrivateAppIDStatusSuccess  PutAppsPrivatePrivateAppIDStatus = "success"
	PutAppsPrivatePrivateAppIDStatusNotFound PutAppsPrivatePrivateAppIDStatus = "not found"
)

func (e PutAppsPrivatePrivateAppIDStatus) ToPointer() *PutAppsPrivatePrivateAppIDStatus {
	return &e
}

func (e *PutAppsPrivatePrivateAppIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "not found":
		*e = PutAppsPrivatePrivateAppIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAppsPrivatePrivateAppIDStatus: %v", v)
	}
}

// PutAppsPrivatePrivateAppIDResponseBody - successful operation
type PutAppsPrivatePrivateAppIDResponseBody struct {
	Data   *PutAppsPrivatePrivateAppIDData   `json:"data,omitempty"`
	Status *PutAppsPrivatePrivateAppIDStatus `json:"status,omitempty"`
}

func (o *PutAppsPrivatePrivateAppIDResponseBody) GetData() *PutAppsPrivatePrivateAppIDData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *PutAppsPrivatePrivateAppIDResponseBody) GetStatus() *PutAppsPrivatePrivateAppIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type PutAppsPrivatePrivateAppIDResponse struct {
	// successful operation
	TwoHundredApplicationJSONObject *PutAppsPrivatePrivateAppIDResponseBody
	// Invalid request
	FourHundredApplicationJSONObject *PutAppsPrivatePrivateAppIDResponseResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *PutAppsPrivatePrivateAppIDResponse) GetTwoHundredApplicationJSONObject() *PutAppsPrivatePrivateAppIDResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *PutAppsPrivatePrivateAppIDResponse) GetFourHundredApplicationJSONObject() *PutAppsPrivatePrivateAppIDResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *PutAppsPrivatePrivateAppIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PutAppsPrivatePrivateAppIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PutAppsPrivatePrivateAppIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
