// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AccessMethod string

const (
	AccessMethodClient     AccessMethod = "Client"
	AccessMethodClientless AccessMethod = "Clientless"
)

func (e AccessMethod) ToPointer() *AccessMethod {
	return &e
}

func (e *AccessMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		fallthrough
	case "Clientless":
		*e = AccessMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessMethod: %v", v)
	}
}

type Actions string

const (
	ActionsAllow       Actions = "allow"
	ActionsBlock       Actions = "block"
	ActionsAlert       Actions = "alert"
	ActionsQuanrantine Actions = "quanrantine"
	ActionsBypass      Actions = "bypass"
)

func (e Actions) ToPointer() *Actions {
	return &e
}

func (e *Actions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		fallthrough
	case "alert":
		fallthrough
	case "quanrantine":
		fallthrough
	case "bypass":
		*e = Actions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Actions: %v", v)
	}
}

type DlpActions struct {
	Actions    []Actions `json:"actions,omitempty"`
	DlpProfile *string   `json:"dlp_profile,omitempty"`
}

func (o *DlpActions) GetActions() []Actions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *DlpActions) GetDlpProfile() *string {
	if o == nil {
		return nil
	}
	return o.DlpProfile
}

type ActionName string

const (
	ActionNameAllow ActionName = "allow"
	ActionNameBlock ActionName = "block"
)

func (e ActionName) ToPointer() *ActionName {
	return &e
}

func (e *ActionName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = ActionName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionName: %v", v)
	}
}

type MatchCriteriaAction struct {
	ActionName *ActionName `json:"action_name,omitempty"`
}

func (o *MatchCriteriaAction) GetActionName() *ActionName {
	if o == nil {
		return nil
	}
	return o.ActionName
}

type PolicyType string

const (
	PolicyTypePrivateApp PolicyType = "private-app"
)

func (e PolicyType) ToPointer() *PolicyType {
	return &e
}

func (e *PolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-app":
		*e = PolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyType: %v", v)
	}
}

type Activity string

const (
	ActivityAny Activity = "any"
)

func (e Activity) ToPointer() *Activity {
	return &e
}

func (e *Activity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		*e = Activity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Activity: %v", v)
	}
}

type Activities struct {
	Activity          *Activity `json:"activity,omitempty"`
	ListOfConstraints []string  `json:"list_of_constraints,omitempty"`
}

func (o *Activities) GetActivity() *Activity {
	if o == nil {
		return nil
	}
	return o.Activity
}

func (o *Activities) GetListOfConstraints() []string {
	if o == nil {
		return nil
	}
	return o.ListOfConstraints
}

type PrivateAppsWithActivities struct {
	Activities []Activities `json:"activities,omitempty"`
	AppName    *string      `json:"appName,omitempty"`
}

func (o *PrivateAppsWithActivities) GetActivities() []Activities {
	if o == nil {
		return nil
	}
	return o.Activities
}

func (o *PrivateAppsWithActivities) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

type UserType string

const (
	UserTypeUser UserType = "user"
)

func (e UserType) ToPointer() *UserType {
	return &e
}

func (e *UserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = UserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserType: %v", v)
	}
}

type RuleData struct {
	AccessMethod              *AccessMethod               `json:"access_method,omitempty"`
	BNegateNetLocation        *bool                       `json:"b_negateNetLocation,omitempty"`
	BNegateSrcCountries       *bool                       `json:"b_negateSrcCountries,omitempty"`
	Classification            *string                     `json:"classification,omitempty"`
	DlpActions                []DlpActions                `json:"dlp_actions,omitempty"`
	ExternalDlp               *bool                       `json:"external_dlp,omitempty"`
	JSONVersion               *int64                      `json:"json_version,omitempty"`
	MatchCriteriaAction       *MatchCriteriaAction        `json:"match_criteria_action,omitempty"`
	NetLocationObj            []string                    `json:"net_location_obj,omitempty"`
	OrganizationUnits         []string                    `json:"organization_units,omitempty"`
	PolicyType                *PolicyType                 `json:"policy_type,omitempty"`
	PrivateAppIds             []string                    `json:"privateAppIds,omitempty"`
	PrivateAppTagIds          []string                    `json:"privateAppTagIds,omitempty"`
	PrivateAppTags            []string                    `json:"privateAppTags,omitempty"`
	PrivateApps               []string                    `json:"privateApps,omitempty"`
	PrivateAppsWithActivities []PrivateAppsWithActivities `json:"privateAppsWithActivities,omitempty"`
	ShowDlpProfileActionTable *bool                       `json:"show_dlp_profile_action_table,omitempty"`
	SrcCountries              []string                    `json:"srcCountries,omitempty"`
	UserGroups                []string                    `json:"userGroups,omitempty"`
	UserType                  *UserType                   `json:"userType,omitempty"`
	Users                     []string                    `json:"users,omitempty"`
	Version                   *int64                      `json:"version,omitempty"`
}

func (o *RuleData) GetAccessMethod() *AccessMethod {
	if o == nil {
		return nil
	}
	return o.AccessMethod
}

func (o *RuleData) GetBNegateNetLocation() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateNetLocation
}

func (o *RuleData) GetBNegateSrcCountries() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateSrcCountries
}

func (o *RuleData) GetClassification() *string {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *RuleData) GetDlpActions() []DlpActions {
	if o == nil {
		return nil
	}
	return o.DlpActions
}

func (o *RuleData) GetExternalDlp() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalDlp
}

func (o *RuleData) GetJSONVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.JSONVersion
}

func (o *RuleData) GetMatchCriteriaAction() *MatchCriteriaAction {
	if o == nil {
		return nil
	}
	return o.MatchCriteriaAction
}

func (o *RuleData) GetNetLocationObj() []string {
	if o == nil {
		return nil
	}
	return o.NetLocationObj
}

func (o *RuleData) GetOrganizationUnits() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationUnits
}

func (o *RuleData) GetPolicyType() *PolicyType {
	if o == nil {
		return nil
	}
	return o.PolicyType
}

func (o *RuleData) GetPrivateAppIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppIds
}

func (o *RuleData) GetPrivateAppTagIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTagIds
}

func (o *RuleData) GetPrivateAppTags() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTags
}

func (o *RuleData) GetPrivateApps() []string {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

func (o *RuleData) GetPrivateAppsWithActivities() []PrivateAppsWithActivities {
	if o == nil {
		return nil
	}
	return o.PrivateAppsWithActivities
}

func (o *RuleData) GetShowDlpProfileActionTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowDlpProfileActionTable
}

func (o *RuleData) GetSrcCountries() []string {
	if o == nil {
		return nil
	}
	return o.SrcCountries
}

func (o *RuleData) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *RuleData) GetUserType() *UserType {
	if o == nil {
		return nil
	}
	return o.UserType
}

func (o *RuleData) GetUsers() []string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *RuleData) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}

type PatchNpaRulesIDOrder string

const (
	PatchNpaRulesIDOrderTop    PatchNpaRulesIDOrder = "top"
	PatchNpaRulesIDOrderBottom PatchNpaRulesIDOrder = "bottom"
	PatchNpaRulesIDOrderBefore PatchNpaRulesIDOrder = "before"
	PatchNpaRulesIDOrderAfter  PatchNpaRulesIDOrder = "after"
)

func (e PatchNpaRulesIDOrder) ToPointer() *PatchNpaRulesIDOrder {
	return &e
}

func (e *PatchNpaRulesIDOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "top":
		fallthrough
	case "bottom":
		fallthrough
	case "before":
		fallthrough
	case "after":
		*e = PatchNpaRulesIDOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchNpaRulesIDOrder: %v", v)
	}
}

type RuleOrder struct {
	Order    *PatchNpaRulesIDOrder `json:"order,omitempty"`
	Position *int64                `json:"position,omitempty"`
	RuleID   *int64                `json:"rule_id,omitempty"`
	RuleName *string               `json:"rule_name,omitempty"`
}

func (o *RuleOrder) GetOrder() *PatchNpaRulesIDOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *RuleOrder) GetPosition() *int64 {
	if o == nil {
		return nil
	}
	return o.Position
}

func (o *RuleOrder) GetRuleID() *int64 {
	if o == nil {
		return nil
	}
	return o.RuleID
}

func (o *RuleOrder) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

type PatchNpaRulesIDRequestBody struct {
	Description *string    `json:"description,omitempty"`
	Enabled     *string    `json:"enabled,omitempty"`
	GroupID     *string    `json:"group_id,omitempty"`
	GroupName   *string    `json:"group_name,omitempty"`
	RuleData    *RuleData  `json:"rule_data,omitempty"`
	RuleName    *string    `json:"rule_name,omitempty"`
	RuleOrder   *RuleOrder `json:"rule_order,omitempty"`
}

func (o *PatchNpaRulesIDRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PatchNpaRulesIDRequestBody) GetEnabled() *string {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *PatchNpaRulesIDRequestBody) GetGroupID() *string {
	if o == nil {
		return nil
	}
	return o.GroupID
}

func (o *PatchNpaRulesIDRequestBody) GetGroupName() *string {
	if o == nil {
		return nil
	}
	return o.GroupName
}

func (o *PatchNpaRulesIDRequestBody) GetRuleData() *RuleData {
	if o == nil {
		return nil
	}
	return o.RuleData
}

func (o *PatchNpaRulesIDRequestBody) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

func (o *PatchNpaRulesIDRequestBody) GetRuleOrder() *RuleOrder {
	if o == nil {
		return nil
	}
	return o.RuleOrder
}

// PatchNpaRulesIDQueryParamSilent - flag to skip output except status code
type PatchNpaRulesIDQueryParamSilent string

const (
	PatchNpaRulesIDQueryParamSilentOne  PatchNpaRulesIDQueryParamSilent = "1"
	PatchNpaRulesIDQueryParamSilentZero PatchNpaRulesIDQueryParamSilent = "0"
)

func (e PatchNpaRulesIDQueryParamSilent) ToPointer() *PatchNpaRulesIDQueryParamSilent {
	return &e
}

func (e *PatchNpaRulesIDQueryParamSilent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "0":
		*e = PatchNpaRulesIDQueryParamSilent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchNpaRulesIDQueryParamSilent: %v", v)
	}
}

type PatchNpaRulesIDRequest struct {
	RequestBody PatchNpaRulesIDRequestBody `request:"mediaType=application/json"`
	// policy rule id
	ID int `pathParam:"style=simple,explode=false,name=id"`
	// flag to skip output except status code
	Silent *PatchNpaRulesIDQueryParamSilent `queryParam:"style=form,explode=true,name=silent"`
}

func (o *PatchNpaRulesIDRequest) GetRequestBody() PatchNpaRulesIDRequestBody {
	if o == nil {
		return PatchNpaRulesIDRequestBody{}
	}
	return o.RequestBody
}

func (o *PatchNpaRulesIDRequest) GetID() int {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *PatchNpaRulesIDRequest) GetSilent() *PatchNpaRulesIDQueryParamSilent {
	if o == nil {
		return nil
	}
	return o.Silent
}

// PatchNpaRulesIDResponseResponseBody - Invalid request
type PatchNpaRulesIDResponseResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *PatchNpaRulesIDResponseResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *PatchNpaRulesIDResponseResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type PatchNpaRulesIDAccessMethod string

const (
	PatchNpaRulesIDAccessMethodClient     PatchNpaRulesIDAccessMethod = "Client"
	PatchNpaRulesIDAccessMethodClientless PatchNpaRulesIDAccessMethod = "Clientless"
)

func (e PatchNpaRulesIDAccessMethod) ToPointer() *PatchNpaRulesIDAccessMethod {
	return &e
}

func (e *PatchNpaRulesIDAccessMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		fallthrough
	case "Clientless":
		*e = PatchNpaRulesIDAccessMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchNpaRulesIDAccessMethod: %v", v)
	}
}

type PatchNpaRulesIDActions string

const (
	PatchNpaRulesIDActionsAllow       PatchNpaRulesIDActions = "allow"
	PatchNpaRulesIDActionsBlock       PatchNpaRulesIDActions = "block"
	PatchNpaRulesIDActionsAlert       PatchNpaRulesIDActions = "alert"
	PatchNpaRulesIDActionsQuanrantine PatchNpaRulesIDActions = "quanrantine"
	PatchNpaRulesIDActionsBypass      PatchNpaRulesIDActions = "bypass"
)

func (e PatchNpaRulesIDActions) ToPointer() *PatchNpaRulesIDActions {
	return &e
}

func (e *PatchNpaRulesIDActions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		fallthrough
	case "alert":
		fallthrough
	case "quanrantine":
		fallthrough
	case "bypass":
		*e = PatchNpaRulesIDActions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchNpaRulesIDActions: %v", v)
	}
}

type PatchNpaRulesIDDlpActions struct {
	Actions    []PatchNpaRulesIDActions `json:"actions,omitempty"`
	DlpProfile *string                  `json:"dlp_profile,omitempty"`
}

func (o *PatchNpaRulesIDDlpActions) GetActions() []PatchNpaRulesIDActions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *PatchNpaRulesIDDlpActions) GetDlpProfile() *string {
	if o == nil {
		return nil
	}
	return o.DlpProfile
}

type PatchNpaRulesIDActionName string

const (
	PatchNpaRulesIDActionNameAllow PatchNpaRulesIDActionName = "allow"
	PatchNpaRulesIDActionNameBlock PatchNpaRulesIDActionName = "block"
)

func (e PatchNpaRulesIDActionName) ToPointer() *PatchNpaRulesIDActionName {
	return &e
}

func (e *PatchNpaRulesIDActionName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = PatchNpaRulesIDActionName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchNpaRulesIDActionName: %v", v)
	}
}

type PatchNpaRulesIDMatchCriteriaAction struct {
	ActionName *PatchNpaRulesIDActionName `json:"action_name,omitempty"`
}

func (o *PatchNpaRulesIDMatchCriteriaAction) GetActionName() *PatchNpaRulesIDActionName {
	if o == nil {
		return nil
	}
	return o.ActionName
}

type PatchNpaRulesIDPolicyType string

const (
	PatchNpaRulesIDPolicyTypePrivateApp PatchNpaRulesIDPolicyType = "private-app"
)

func (e PatchNpaRulesIDPolicyType) ToPointer() *PatchNpaRulesIDPolicyType {
	return &e
}

func (e *PatchNpaRulesIDPolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-app":
		*e = PatchNpaRulesIDPolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchNpaRulesIDPolicyType: %v", v)
	}
}

type PatchNpaRulesIDActivity string

const (
	PatchNpaRulesIDActivityAny PatchNpaRulesIDActivity = "any"
)

func (e PatchNpaRulesIDActivity) ToPointer() *PatchNpaRulesIDActivity {
	return &e
}

func (e *PatchNpaRulesIDActivity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		*e = PatchNpaRulesIDActivity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchNpaRulesIDActivity: %v", v)
	}
}

type PatchNpaRulesIDActivities struct {
	Activity          *PatchNpaRulesIDActivity `json:"activity,omitempty"`
	ListOfConstraints []string                 `json:"list_of_constraints,omitempty"`
}

func (o *PatchNpaRulesIDActivities) GetActivity() *PatchNpaRulesIDActivity {
	if o == nil {
		return nil
	}
	return o.Activity
}

func (o *PatchNpaRulesIDActivities) GetListOfConstraints() []string {
	if o == nil {
		return nil
	}
	return o.ListOfConstraints
}

type PatchNpaRulesIDPrivateAppsWithActivities struct {
	Activities []PatchNpaRulesIDActivities `json:"activities,omitempty"`
	AppName    *string                     `json:"appName,omitempty"`
}

func (o *PatchNpaRulesIDPrivateAppsWithActivities) GetActivities() []PatchNpaRulesIDActivities {
	if o == nil {
		return nil
	}
	return o.Activities
}

func (o *PatchNpaRulesIDPrivateAppsWithActivities) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

type PatchNpaRulesIDUserType string

const (
	PatchNpaRulesIDUserTypeUser PatchNpaRulesIDUserType = "user"
)

func (e PatchNpaRulesIDUserType) ToPointer() *PatchNpaRulesIDUserType {
	return &e
}

func (e *PatchNpaRulesIDUserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = PatchNpaRulesIDUserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchNpaRulesIDUserType: %v", v)
	}
}

type PatchNpaRulesIDRuleData struct {
	AccessMethod              *PatchNpaRulesIDAccessMethod               `json:"access_method,omitempty"`
	BNegateNetLocation        *bool                                      `json:"b_negateNetLocation,omitempty"`
	BNegateSrcCountries       *bool                                      `json:"b_negateSrcCountries,omitempty"`
	Classification            *string                                    `json:"classification,omitempty"`
	DlpActions                []PatchNpaRulesIDDlpActions                `json:"dlp_actions,omitempty"`
	ExternalDlp               *bool                                      `json:"external_dlp,omitempty"`
	JSONVersion               *int64                                     `json:"json_version,omitempty"`
	MatchCriteriaAction       *PatchNpaRulesIDMatchCriteriaAction        `json:"match_criteria_action,omitempty"`
	NetLocationObj            []string                                   `json:"net_location_obj,omitempty"`
	OrganizationUnits         []string                                   `json:"organization_units,omitempty"`
	PolicyType                *PatchNpaRulesIDPolicyType                 `json:"policy_type,omitempty"`
	PrivateAppIds             []string                                   `json:"privateAppIds,omitempty"`
	PrivateAppTagIds          []string                                   `json:"privateAppTagIds,omitempty"`
	PrivateAppTags            []string                                   `json:"privateAppTags,omitempty"`
	PrivateApps               []string                                   `json:"privateApps,omitempty"`
	PrivateAppsWithActivities []PatchNpaRulesIDPrivateAppsWithActivities `json:"privateAppsWithActivities,omitempty"`
	ShowDlpProfileActionTable *bool                                      `json:"show_dlp_profile_action_table,omitempty"`
	SrcCountries              []string                                   `json:"srcCountries,omitempty"`
	UserGroups                []string                                   `json:"userGroups,omitempty"`
	UserType                  *PatchNpaRulesIDUserType                   `json:"userType,omitempty"`
	Users                     []string                                   `json:"users,omitempty"`
	Version                   *int64                                     `json:"version,omitempty"`
}

func (o *PatchNpaRulesIDRuleData) GetAccessMethod() *PatchNpaRulesIDAccessMethod {
	if o == nil {
		return nil
	}
	return o.AccessMethod
}

func (o *PatchNpaRulesIDRuleData) GetBNegateNetLocation() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateNetLocation
}

func (o *PatchNpaRulesIDRuleData) GetBNegateSrcCountries() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateSrcCountries
}

func (o *PatchNpaRulesIDRuleData) GetClassification() *string {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *PatchNpaRulesIDRuleData) GetDlpActions() []PatchNpaRulesIDDlpActions {
	if o == nil {
		return nil
	}
	return o.DlpActions
}

func (o *PatchNpaRulesIDRuleData) GetExternalDlp() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalDlp
}

func (o *PatchNpaRulesIDRuleData) GetJSONVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.JSONVersion
}

func (o *PatchNpaRulesIDRuleData) GetMatchCriteriaAction() *PatchNpaRulesIDMatchCriteriaAction {
	if o == nil {
		return nil
	}
	return o.MatchCriteriaAction
}

func (o *PatchNpaRulesIDRuleData) GetNetLocationObj() []string {
	if o == nil {
		return nil
	}
	return o.NetLocationObj
}

func (o *PatchNpaRulesIDRuleData) GetOrganizationUnits() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationUnits
}

func (o *PatchNpaRulesIDRuleData) GetPolicyType() *PatchNpaRulesIDPolicyType {
	if o == nil {
		return nil
	}
	return o.PolicyType
}

func (o *PatchNpaRulesIDRuleData) GetPrivateAppIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppIds
}

func (o *PatchNpaRulesIDRuleData) GetPrivateAppTagIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTagIds
}

func (o *PatchNpaRulesIDRuleData) GetPrivateAppTags() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTags
}

func (o *PatchNpaRulesIDRuleData) GetPrivateApps() []string {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

func (o *PatchNpaRulesIDRuleData) GetPrivateAppsWithActivities() []PatchNpaRulesIDPrivateAppsWithActivities {
	if o == nil {
		return nil
	}
	return o.PrivateAppsWithActivities
}

func (o *PatchNpaRulesIDRuleData) GetShowDlpProfileActionTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowDlpProfileActionTable
}

func (o *PatchNpaRulesIDRuleData) GetSrcCountries() []string {
	if o == nil {
		return nil
	}
	return o.SrcCountries
}

func (o *PatchNpaRulesIDRuleData) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *PatchNpaRulesIDRuleData) GetUserType() *PatchNpaRulesIDUserType {
	if o == nil {
		return nil
	}
	return o.UserType
}

func (o *PatchNpaRulesIDRuleData) GetUsers() []string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *PatchNpaRulesIDRuleData) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}

type PatchNpaRulesIDData struct {
	GroupID  *int64                   `json:"group_id,omitempty"`
	RuleData *PatchNpaRulesIDRuleData `json:"rule_data,omitempty"`
	RuleID   *int64                   `json:"rule_id,omitempty"`
	RuleName *string                  `json:"rule_name,omitempty"`
}

func (o *PatchNpaRulesIDData) GetGroupID() *int64 {
	if o == nil {
		return nil
	}
	return o.GroupID
}

func (o *PatchNpaRulesIDData) GetRuleData() *PatchNpaRulesIDRuleData {
	if o == nil {
		return nil
	}
	return o.RuleData
}

func (o *PatchNpaRulesIDData) GetRuleID() *int64 {
	if o == nil {
		return nil
	}
	return o.RuleID
}

func (o *PatchNpaRulesIDData) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

type PatchNpaRulesIDStatus string

const (
	PatchNpaRulesIDStatusSuccess PatchNpaRulesIDStatus = "success"
	PatchNpaRulesIDStatusError   PatchNpaRulesIDStatus = "error"
)

func (e PatchNpaRulesIDStatus) ToPointer() *PatchNpaRulesIDStatus {
	return &e
}

func (e *PatchNpaRulesIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "error":
		*e = PatchNpaRulesIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchNpaRulesIDStatus: %v", v)
	}
}

// PatchNpaRulesIDResponseBody - successful operation
type PatchNpaRulesIDResponseBody struct {
	Data   *PatchNpaRulesIDData   `json:"data,omitempty"`
	Status *PatchNpaRulesIDStatus `json:"status,omitempty"`
}

func (o *PatchNpaRulesIDResponseBody) GetData() *PatchNpaRulesIDData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *PatchNpaRulesIDResponseBody) GetStatus() *PatchNpaRulesIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type PatchNpaRulesIDResponse struct {
	// successful operation
	TwoHundredApplicationJSONObject *PatchNpaRulesIDResponseBody
	// Invalid request
	FourHundredApplicationJSONObject *PatchNpaRulesIDResponseResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *PatchNpaRulesIDResponse) GetTwoHundredApplicationJSONObject() *PatchNpaRulesIDResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *PatchNpaRulesIDResponse) GetFourHundredApplicationJSONObject() *PatchNpaRulesIDResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *PatchNpaRulesIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PatchNpaRulesIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PatchNpaRulesIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
