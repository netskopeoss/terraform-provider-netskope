// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostNpaRulesAccessMethod string

const (
	PostNpaRulesAccessMethodClient     PostNpaRulesAccessMethod = "Client"
	PostNpaRulesAccessMethodClientless PostNpaRulesAccessMethod = "Clientless"
)

func (e PostNpaRulesAccessMethod) ToPointer() *PostNpaRulesAccessMethod {
	return &e
}

func (e *PostNpaRulesAccessMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		fallthrough
	case "Clientless":
		*e = PostNpaRulesAccessMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNpaRulesAccessMethod: %v", v)
	}
}

type PostNpaRulesActions string

const (
	PostNpaRulesActionsAllow       PostNpaRulesActions = "allow"
	PostNpaRulesActionsBlock       PostNpaRulesActions = "block"
	PostNpaRulesActionsAlert       PostNpaRulesActions = "alert"
	PostNpaRulesActionsQuanrantine PostNpaRulesActions = "quanrantine"
	PostNpaRulesActionsBypass      PostNpaRulesActions = "bypass"
)

func (e PostNpaRulesActions) ToPointer() *PostNpaRulesActions {
	return &e
}

func (e *PostNpaRulesActions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		fallthrough
	case "alert":
		fallthrough
	case "quanrantine":
		fallthrough
	case "bypass":
		*e = PostNpaRulesActions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNpaRulesActions: %v", v)
	}
}

type PostNpaRulesDlpActions struct {
	Actions    []PostNpaRulesActions `json:"actions,omitempty"`
	DlpProfile *string               `json:"dlp_profile,omitempty"`
}

func (o *PostNpaRulesDlpActions) GetActions() []PostNpaRulesActions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *PostNpaRulesDlpActions) GetDlpProfile() *string {
	if o == nil {
		return nil
	}
	return o.DlpProfile
}

type PostNpaRulesActionName string

const (
	PostNpaRulesActionNameAllow PostNpaRulesActionName = "allow"
	PostNpaRulesActionNameBlock PostNpaRulesActionName = "block"
)

func (e PostNpaRulesActionName) ToPointer() *PostNpaRulesActionName {
	return &e
}

func (e *PostNpaRulesActionName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = PostNpaRulesActionName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNpaRulesActionName: %v", v)
	}
}

type PostNpaRulesMatchCriteriaAction struct {
	ActionName *PostNpaRulesActionName `json:"action_name,omitempty"`
}

func (o *PostNpaRulesMatchCriteriaAction) GetActionName() *PostNpaRulesActionName {
	if o == nil {
		return nil
	}
	return o.ActionName
}

type PostNpaRulesPolicyType string

const (
	PostNpaRulesPolicyTypePrivateApp PostNpaRulesPolicyType = "private-app"
)

func (e PostNpaRulesPolicyType) ToPointer() *PostNpaRulesPolicyType {
	return &e
}

func (e *PostNpaRulesPolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-app":
		*e = PostNpaRulesPolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNpaRulesPolicyType: %v", v)
	}
}

type PostNpaRulesActivity string

const (
	PostNpaRulesActivityAny PostNpaRulesActivity = "any"
)

func (e PostNpaRulesActivity) ToPointer() *PostNpaRulesActivity {
	return &e
}

func (e *PostNpaRulesActivity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		*e = PostNpaRulesActivity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNpaRulesActivity: %v", v)
	}
}

type PostNpaRulesActivities struct {
	Activity          *PostNpaRulesActivity `json:"activity,omitempty"`
	ListOfConstraints []string              `json:"list_of_constraints,omitempty"`
}

func (o *PostNpaRulesActivities) GetActivity() *PostNpaRulesActivity {
	if o == nil {
		return nil
	}
	return o.Activity
}

func (o *PostNpaRulesActivities) GetListOfConstraints() []string {
	if o == nil {
		return nil
	}
	return o.ListOfConstraints
}

type PostNpaRulesPrivateAppsWithActivities struct {
	Activities []PostNpaRulesActivities `json:"activities,omitempty"`
	AppName    *string                  `json:"appName,omitempty"`
}

func (o *PostNpaRulesPrivateAppsWithActivities) GetActivities() []PostNpaRulesActivities {
	if o == nil {
		return nil
	}
	return o.Activities
}

func (o *PostNpaRulesPrivateAppsWithActivities) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

type PostNpaRulesUserType string

const (
	PostNpaRulesUserTypeUser PostNpaRulesUserType = "user"
)

func (e PostNpaRulesUserType) ToPointer() *PostNpaRulesUserType {
	return &e
}

func (e *PostNpaRulesUserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = PostNpaRulesUserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNpaRulesUserType: %v", v)
	}
}

type PostNpaRulesRuleData struct {
	AccessMethod              *PostNpaRulesAccessMethod               `json:"access_method,omitempty"`
	BNegateNetLocation        *bool                                   `json:"b_negateNetLocation,omitempty"`
	BNegateSrcCountries       *bool                                   `json:"b_negateSrcCountries,omitempty"`
	Classification            *string                                 `json:"classification,omitempty"`
	DlpActions                []PostNpaRulesDlpActions                `json:"dlp_actions,omitempty"`
	ExternalDlp               *bool                                   `json:"external_dlp,omitempty"`
	JSONVersion               *int64                                  `json:"json_version,omitempty"`
	MatchCriteriaAction       *PostNpaRulesMatchCriteriaAction        `json:"match_criteria_action,omitempty"`
	NetLocationObj            []string                                `json:"net_location_obj,omitempty"`
	OrganizationUnits         []string                                `json:"organization_units,omitempty"`
	PolicyType                *PostNpaRulesPolicyType                 `json:"policy_type,omitempty"`
	PrivateAppIds             []string                                `json:"privateAppIds,omitempty"`
	PrivateAppTagIds          []string                                `json:"privateAppTagIds,omitempty"`
	PrivateAppTags            []string                                `json:"privateAppTags,omitempty"`
	PrivateApps               []string                                `json:"privateApps,omitempty"`
	PrivateAppsWithActivities []PostNpaRulesPrivateAppsWithActivities `json:"privateAppsWithActivities,omitempty"`
	ShowDlpProfileActionTable *bool                                   `json:"show_dlp_profile_action_table,omitempty"`
	SrcCountries              []string                                `json:"srcCountries,omitempty"`
	UserGroups                []string                                `json:"userGroups,omitempty"`
	UserType                  *PostNpaRulesUserType                   `json:"userType,omitempty"`
	Users                     []string                                `json:"users,omitempty"`
	Version                   *int64                                  `json:"version,omitempty"`
}

func (o *PostNpaRulesRuleData) GetAccessMethod() *PostNpaRulesAccessMethod {
	if o == nil {
		return nil
	}
	return o.AccessMethod
}

func (o *PostNpaRulesRuleData) GetBNegateNetLocation() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateNetLocation
}

func (o *PostNpaRulesRuleData) GetBNegateSrcCountries() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateSrcCountries
}

func (o *PostNpaRulesRuleData) GetClassification() *string {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *PostNpaRulesRuleData) GetDlpActions() []PostNpaRulesDlpActions {
	if o == nil {
		return nil
	}
	return o.DlpActions
}

func (o *PostNpaRulesRuleData) GetExternalDlp() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalDlp
}

func (o *PostNpaRulesRuleData) GetJSONVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.JSONVersion
}

func (o *PostNpaRulesRuleData) GetMatchCriteriaAction() *PostNpaRulesMatchCriteriaAction {
	if o == nil {
		return nil
	}
	return o.MatchCriteriaAction
}

func (o *PostNpaRulesRuleData) GetNetLocationObj() []string {
	if o == nil {
		return nil
	}
	return o.NetLocationObj
}

func (o *PostNpaRulesRuleData) GetOrganizationUnits() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationUnits
}

func (o *PostNpaRulesRuleData) GetPolicyType() *PostNpaRulesPolicyType {
	if o == nil {
		return nil
	}
	return o.PolicyType
}

func (o *PostNpaRulesRuleData) GetPrivateAppIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppIds
}

func (o *PostNpaRulesRuleData) GetPrivateAppTagIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTagIds
}

func (o *PostNpaRulesRuleData) GetPrivateAppTags() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTags
}

func (o *PostNpaRulesRuleData) GetPrivateApps() []string {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

func (o *PostNpaRulesRuleData) GetPrivateAppsWithActivities() []PostNpaRulesPrivateAppsWithActivities {
	if o == nil {
		return nil
	}
	return o.PrivateAppsWithActivities
}

func (o *PostNpaRulesRuleData) GetShowDlpProfileActionTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowDlpProfileActionTable
}

func (o *PostNpaRulesRuleData) GetSrcCountries() []string {
	if o == nil {
		return nil
	}
	return o.SrcCountries
}

func (o *PostNpaRulesRuleData) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *PostNpaRulesRuleData) GetUserType() *PostNpaRulesUserType {
	if o == nil {
		return nil
	}
	return o.UserType
}

func (o *PostNpaRulesRuleData) GetUsers() []string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *PostNpaRulesRuleData) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}

type PostNpaRulesOrder string

const (
	PostNpaRulesOrderTop    PostNpaRulesOrder = "top"
	PostNpaRulesOrderBottom PostNpaRulesOrder = "bottom"
	PostNpaRulesOrderBefore PostNpaRulesOrder = "before"
	PostNpaRulesOrderAfter  PostNpaRulesOrder = "after"
)

func (e PostNpaRulesOrder) ToPointer() *PostNpaRulesOrder {
	return &e
}

func (e *PostNpaRulesOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "top":
		fallthrough
	case "bottom":
		fallthrough
	case "before":
		fallthrough
	case "after":
		*e = PostNpaRulesOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNpaRulesOrder: %v", v)
	}
}

type PostNpaRulesRuleOrder struct {
	Order    *PostNpaRulesOrder `json:"order,omitempty"`
	Position *int64             `json:"position,omitempty"`
	RuleID   *int64             `json:"rule_id,omitempty"`
	RuleName *string            `json:"rule_name,omitempty"`
}

func (o *PostNpaRulesRuleOrder) GetOrder() *PostNpaRulesOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *PostNpaRulesRuleOrder) GetPosition() *int64 {
	if o == nil {
		return nil
	}
	return o.Position
}

func (o *PostNpaRulesRuleOrder) GetRuleID() *int64 {
	if o == nil {
		return nil
	}
	return o.RuleID
}

func (o *PostNpaRulesRuleOrder) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

type PostNpaRulesRequestBody struct {
	Description *string                `json:"description,omitempty"`
	Enabled     *string                `json:"enabled,omitempty"`
	GroupName   *string                `json:"group_name,omitempty"`
	RuleData    *PostNpaRulesRuleData  `json:"rule_data,omitempty"`
	RuleName    *string                `json:"rule_name,omitempty"`
	RuleOrder   *PostNpaRulesRuleOrder `json:"rule_order,omitempty"`
}

func (o *PostNpaRulesRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PostNpaRulesRequestBody) GetEnabled() *string {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *PostNpaRulesRequestBody) GetGroupName() *string {
	if o == nil {
		return nil
	}
	return o.GroupName
}

func (o *PostNpaRulesRequestBody) GetRuleData() *PostNpaRulesRuleData {
	if o == nil {
		return nil
	}
	return o.RuleData
}

func (o *PostNpaRulesRequestBody) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

func (o *PostNpaRulesRequestBody) GetRuleOrder() *PostNpaRulesRuleOrder {
	if o == nil {
		return nil
	}
	return o.RuleOrder
}

// PostNpaRulesResponseResponseBody - Invalid request
type PostNpaRulesResponseResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *PostNpaRulesResponseResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *PostNpaRulesResponseResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type PostNpaRulesResponseAccessMethod string

const (
	PostNpaRulesResponseAccessMethodClient     PostNpaRulesResponseAccessMethod = "Client"
	PostNpaRulesResponseAccessMethodClientless PostNpaRulesResponseAccessMethod = "Clientless"
)

func (e PostNpaRulesResponseAccessMethod) ToPointer() *PostNpaRulesResponseAccessMethod {
	return &e
}

func (e *PostNpaRulesResponseAccessMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		fallthrough
	case "Clientless":
		*e = PostNpaRulesResponseAccessMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNpaRulesResponseAccessMethod: %v", v)
	}
}

type PostNpaRulesResponseActions string

const (
	PostNpaRulesResponseActionsAllow       PostNpaRulesResponseActions = "allow"
	PostNpaRulesResponseActionsBlock       PostNpaRulesResponseActions = "block"
	PostNpaRulesResponseActionsAlert       PostNpaRulesResponseActions = "alert"
	PostNpaRulesResponseActionsQuanrantine PostNpaRulesResponseActions = "quanrantine"
	PostNpaRulesResponseActionsBypass      PostNpaRulesResponseActions = "bypass"
)

func (e PostNpaRulesResponseActions) ToPointer() *PostNpaRulesResponseActions {
	return &e
}

func (e *PostNpaRulesResponseActions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		fallthrough
	case "alert":
		fallthrough
	case "quanrantine":
		fallthrough
	case "bypass":
		*e = PostNpaRulesResponseActions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNpaRulesResponseActions: %v", v)
	}
}

type PostNpaRulesResponseDlpActions struct {
	Actions    []PostNpaRulesResponseActions `json:"actions,omitempty"`
	DlpProfile *string                       `json:"dlp_profile,omitempty"`
}

func (o *PostNpaRulesResponseDlpActions) GetActions() []PostNpaRulesResponseActions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *PostNpaRulesResponseDlpActions) GetDlpProfile() *string {
	if o == nil {
		return nil
	}
	return o.DlpProfile
}

type PostNpaRulesResponseActionName string

const (
	PostNpaRulesResponseActionNameAllow PostNpaRulesResponseActionName = "allow"
	PostNpaRulesResponseActionNameBlock PostNpaRulesResponseActionName = "block"
)

func (e PostNpaRulesResponseActionName) ToPointer() *PostNpaRulesResponseActionName {
	return &e
}

func (e *PostNpaRulesResponseActionName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = PostNpaRulesResponseActionName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNpaRulesResponseActionName: %v", v)
	}
}

type PostNpaRulesResponseMatchCriteriaAction struct {
	ActionName *PostNpaRulesResponseActionName `json:"action_name,omitempty"`
}

func (o *PostNpaRulesResponseMatchCriteriaAction) GetActionName() *PostNpaRulesResponseActionName {
	if o == nil {
		return nil
	}
	return o.ActionName
}

type PostNpaRulesResponsePolicyType string

const (
	PostNpaRulesResponsePolicyTypePrivateApp PostNpaRulesResponsePolicyType = "private-app"
)

func (e PostNpaRulesResponsePolicyType) ToPointer() *PostNpaRulesResponsePolicyType {
	return &e
}

func (e *PostNpaRulesResponsePolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-app":
		*e = PostNpaRulesResponsePolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNpaRulesResponsePolicyType: %v", v)
	}
}

type PostNpaRulesResponseActivity string

const (
	PostNpaRulesResponseActivityAny PostNpaRulesResponseActivity = "any"
)

func (e PostNpaRulesResponseActivity) ToPointer() *PostNpaRulesResponseActivity {
	return &e
}

func (e *PostNpaRulesResponseActivity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		*e = PostNpaRulesResponseActivity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNpaRulesResponseActivity: %v", v)
	}
}

type PostNpaRulesResponseActivities struct {
	Activity          *PostNpaRulesResponseActivity `json:"activity,omitempty"`
	ListOfConstraints []string                      `json:"list_of_constraints,omitempty"`
}

func (o *PostNpaRulesResponseActivities) GetActivity() *PostNpaRulesResponseActivity {
	if o == nil {
		return nil
	}
	return o.Activity
}

func (o *PostNpaRulesResponseActivities) GetListOfConstraints() []string {
	if o == nil {
		return nil
	}
	return o.ListOfConstraints
}

type PostNpaRulesResponsePrivateAppsWithActivities struct {
	Activities []PostNpaRulesResponseActivities `json:"activities,omitempty"`
	AppName    *string                          `json:"appName,omitempty"`
}

func (o *PostNpaRulesResponsePrivateAppsWithActivities) GetActivities() []PostNpaRulesResponseActivities {
	if o == nil {
		return nil
	}
	return o.Activities
}

func (o *PostNpaRulesResponsePrivateAppsWithActivities) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

type PostNpaRulesResponseUserType string

const (
	PostNpaRulesResponseUserTypeUser PostNpaRulesResponseUserType = "user"
)

func (e PostNpaRulesResponseUserType) ToPointer() *PostNpaRulesResponseUserType {
	return &e
}

func (e *PostNpaRulesResponseUserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = PostNpaRulesResponseUserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNpaRulesResponseUserType: %v", v)
	}
}

type PostNpaRulesResponseRuleData struct {
	AccessMethod              *PostNpaRulesResponseAccessMethod               `json:"access_method,omitempty"`
	BNegateNetLocation        *bool                                           `json:"b_negateNetLocation,omitempty"`
	BNegateSrcCountries       *bool                                           `json:"b_negateSrcCountries,omitempty"`
	Classification            *string                                         `json:"classification,omitempty"`
	DlpActions                []PostNpaRulesResponseDlpActions                `json:"dlp_actions,omitempty"`
	ExternalDlp               *bool                                           `json:"external_dlp,omitempty"`
	JSONVersion               *int64                                          `json:"json_version,omitempty"`
	MatchCriteriaAction       *PostNpaRulesResponseMatchCriteriaAction        `json:"match_criteria_action,omitempty"`
	NetLocationObj            []string                                        `json:"net_location_obj,omitempty"`
	OrganizationUnits         []string                                        `json:"organization_units,omitempty"`
	PolicyType                *PostNpaRulesResponsePolicyType                 `json:"policy_type,omitempty"`
	PrivateAppIds             []string                                        `json:"privateAppIds,omitempty"`
	PrivateAppTagIds          []string                                        `json:"privateAppTagIds,omitempty"`
	PrivateAppTags            []string                                        `json:"privateAppTags,omitempty"`
	PrivateApps               []string                                        `json:"privateApps,omitempty"`
	PrivateAppsWithActivities []PostNpaRulesResponsePrivateAppsWithActivities `json:"privateAppsWithActivities,omitempty"`
	ShowDlpProfileActionTable *bool                                           `json:"show_dlp_profile_action_table,omitempty"`
	SrcCountries              []string                                        `json:"srcCountries,omitempty"`
	UserGroups                []string                                        `json:"userGroups,omitempty"`
	UserType                  *PostNpaRulesResponseUserType                   `json:"userType,omitempty"`
	Users                     []string                                        `json:"users,omitempty"`
	Version                   *int64                                          `json:"version,omitempty"`
}

func (o *PostNpaRulesResponseRuleData) GetAccessMethod() *PostNpaRulesResponseAccessMethod {
	if o == nil {
		return nil
	}
	return o.AccessMethod
}

func (o *PostNpaRulesResponseRuleData) GetBNegateNetLocation() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateNetLocation
}

func (o *PostNpaRulesResponseRuleData) GetBNegateSrcCountries() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateSrcCountries
}

func (o *PostNpaRulesResponseRuleData) GetClassification() *string {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *PostNpaRulesResponseRuleData) GetDlpActions() []PostNpaRulesResponseDlpActions {
	if o == nil {
		return nil
	}
	return o.DlpActions
}

func (o *PostNpaRulesResponseRuleData) GetExternalDlp() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalDlp
}

func (o *PostNpaRulesResponseRuleData) GetJSONVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.JSONVersion
}

func (o *PostNpaRulesResponseRuleData) GetMatchCriteriaAction() *PostNpaRulesResponseMatchCriteriaAction {
	if o == nil {
		return nil
	}
	return o.MatchCriteriaAction
}

func (o *PostNpaRulesResponseRuleData) GetNetLocationObj() []string {
	if o == nil {
		return nil
	}
	return o.NetLocationObj
}

func (o *PostNpaRulesResponseRuleData) GetOrganizationUnits() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationUnits
}

func (o *PostNpaRulesResponseRuleData) GetPolicyType() *PostNpaRulesResponsePolicyType {
	if o == nil {
		return nil
	}
	return o.PolicyType
}

func (o *PostNpaRulesResponseRuleData) GetPrivateAppIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppIds
}

func (o *PostNpaRulesResponseRuleData) GetPrivateAppTagIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTagIds
}

func (o *PostNpaRulesResponseRuleData) GetPrivateAppTags() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTags
}

func (o *PostNpaRulesResponseRuleData) GetPrivateApps() []string {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

func (o *PostNpaRulesResponseRuleData) GetPrivateAppsWithActivities() []PostNpaRulesResponsePrivateAppsWithActivities {
	if o == nil {
		return nil
	}
	return o.PrivateAppsWithActivities
}

func (o *PostNpaRulesResponseRuleData) GetShowDlpProfileActionTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowDlpProfileActionTable
}

func (o *PostNpaRulesResponseRuleData) GetSrcCountries() []string {
	if o == nil {
		return nil
	}
	return o.SrcCountries
}

func (o *PostNpaRulesResponseRuleData) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *PostNpaRulesResponseRuleData) GetUserType() *PostNpaRulesResponseUserType {
	if o == nil {
		return nil
	}
	return o.UserType
}

func (o *PostNpaRulesResponseRuleData) GetUsers() []string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *PostNpaRulesResponseRuleData) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}

// PostNpaRulesResponseBody - successful operation
type PostNpaRulesResponseBody struct {
	RuleData *PostNpaRulesResponseRuleData `json:"rule_data,omitempty"`
	RuleID   *int64                        `json:"rule_id,omitempty"`
	RuleName *string                       `json:"rule_name,omitempty"`
}

func (o *PostNpaRulesResponseBody) GetRuleData() *PostNpaRulesResponseRuleData {
	if o == nil {
		return nil
	}
	return o.RuleData
}

func (o *PostNpaRulesResponseBody) GetRuleID() *int64 {
	if o == nil {
		return nil
	}
	return o.RuleID
}

func (o *PostNpaRulesResponseBody) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

type PostNpaRulesResponse struct {
	// successful operation
	TwoHundredApplicationJSONObject *PostNpaRulesResponseBody
	// Invalid request
	FourHundredApplicationJSONObject *PostNpaRulesResponseResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *PostNpaRulesResponse) GetTwoHundredApplicationJSONObject() *PostNpaRulesResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *PostNpaRulesResponse) GetFourHundredApplicationJSONObject() *PostNpaRulesResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *PostNpaRulesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PostNpaRulesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PostNpaRulesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
