// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PutInfrastructurePublishersPublisherIDTags struct {
	TagID   *int    `json:"tag_id,omitempty"`
	TagName *string `json:"tag_name,omitempty"`
}

func (o *PutInfrastructurePublishersPublisherIDTags) GetTagID() *int {
	if o == nil {
		return nil
	}
	return o.TagID
}

func (o *PutInfrastructurePublishersPublisherIDTags) GetTagName() *string {
	if o == nil {
		return nil
	}
	return o.TagName
}

type PutInfrastructurePublishersPublisherIDRequestBody struct {
	ID             *int                                         `json:"id,omitempty"`
	Lbrokerconnect *bool                                        `json:"lbrokerconnect,omitempty"`
	Name           *string                                      `json:"name,omitempty"`
	Tags           []PutInfrastructurePublishersPublisherIDTags `json:"tags,omitempty"`
}

func (o *PutInfrastructurePublishersPublisherIDRequestBody) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PutInfrastructurePublishersPublisherIDRequestBody) GetLbrokerconnect() *bool {
	if o == nil {
		return nil
	}
	return o.Lbrokerconnect
}

func (o *PutInfrastructurePublishersPublisherIDRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PutInfrastructurePublishersPublisherIDRequestBody) GetTags() []PutInfrastructurePublishersPublisherIDTags {
	if o == nil {
		return nil
	}
	return o.Tags
}

// PutInfrastructurePublishersPublisherIDQueryParamSilent - flag to skip output except status code
type PutInfrastructurePublishersPublisherIDQueryParamSilent string

const (
	PutInfrastructurePublishersPublisherIDQueryParamSilentOne  PutInfrastructurePublishersPublisherIDQueryParamSilent = "1"
	PutInfrastructurePublishersPublisherIDQueryParamSilentZero PutInfrastructurePublishersPublisherIDQueryParamSilent = "0"
)

func (e PutInfrastructurePublishersPublisherIDQueryParamSilent) ToPointer() *PutInfrastructurePublishersPublisherIDQueryParamSilent {
	return &e
}

func (e *PutInfrastructurePublishersPublisherIDQueryParamSilent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "0":
		*e = PutInfrastructurePublishersPublisherIDQueryParamSilent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutInfrastructurePublishersPublisherIDQueryParamSilent: %v", v)
	}
}

type PutInfrastructurePublishersPublisherIDRequest struct {
	RequestBody PutInfrastructurePublishersPublisherIDRequestBody `request:"mediaType=application/json"`
	// publisher id
	PublisherID int `pathParam:"style=simple,explode=false,name=publisher_id"`
	// flag to skip output except status code
	Silent *PutInfrastructurePublishersPublisherIDQueryParamSilent `queryParam:"style=form,explode=true,name=silent"`
}

func (o *PutInfrastructurePublishersPublisherIDRequest) GetRequestBody() PutInfrastructurePublishersPublisherIDRequestBody {
	if o == nil {
		return PutInfrastructurePublishersPublisherIDRequestBody{}
	}
	return o.RequestBody
}

func (o *PutInfrastructurePublishersPublisherIDRequest) GetPublisherID() int {
	if o == nil {
		return 0
	}
	return o.PublisherID
}

func (o *PutInfrastructurePublishersPublisherIDRequest) GetSilent() *PutInfrastructurePublishersPublisherIDQueryParamSilent {
	if o == nil {
		return nil
	}
	return o.Silent
}

// PutInfrastructurePublishersPublisherIDNPAPublishersResponseBody - Invalid request
type PutInfrastructurePublishersPublisherIDNPAPublishersResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *PutInfrastructurePublishersPublisherIDNPAPublishersResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *PutInfrastructurePublishersPublisherIDNPAPublishersResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type PutInfrastructurePublishersPublisherIDStatus string

const (
	PutInfrastructurePublishersPublisherIDStatusConnected     PutInfrastructurePublishersPublisherIDStatus = "connected"
	PutInfrastructurePublishersPublisherIDStatusNotRegistered PutInfrastructurePublishersPublisherIDStatus = "not registered"
)

func (e PutInfrastructurePublishersPublisherIDStatus) ToPointer() *PutInfrastructurePublishersPublisherIDStatus {
	return &e
}

func (e *PutInfrastructurePublishersPublisherIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "connected":
		fallthrough
	case "not registered":
		*e = PutInfrastructurePublishersPublisherIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutInfrastructurePublishersPublisherIDStatus: %v", v)
	}
}

type PutInfrastructurePublishersPublisherIDNPAPublishersTags struct {
	TagID   *int    `json:"tag_id,omitempty"`
	TagName *string `json:"tag_name,omitempty"`
}

func (o *PutInfrastructurePublishersPublisherIDNPAPublishersTags) GetTagID() *int {
	if o == nil {
		return nil
	}
	return o.TagID
}

func (o *PutInfrastructurePublishersPublisherIDNPAPublishersTags) GetTagName() *string {
	if o == nil {
		return nil
	}
	return o.TagName
}

type PutInfrastructurePublishersPublisherIDData struct {
	Assessment                interface{}                                               `json:"assessment,omitempty"`
	CommonName                *string                                                   `json:"common_name,omitempty"`
	ID                        *int                                                      `json:"id,omitempty"`
	Lbrokerconnect            *bool                                                     `json:"lbrokerconnect,omitempty"`
	Name                      *string                                                   `json:"name,omitempty"`
	PublisherUpgradeProfileID *int                                                      `json:"publisher_upgrade_profile_id,omitempty"`
	Registered                *bool                                                     `json:"registered,omitempty"`
	Status                    *PutInfrastructurePublishersPublisherIDStatus             `json:"status,omitempty"`
	StitcherID                *int                                                      `json:"stitcher_id,omitempty"`
	Tags                      []PutInfrastructurePublishersPublisherIDNPAPublishersTags `json:"tags,omitempty"`
}

func (o *PutInfrastructurePublishersPublisherIDData) GetAssessment() interface{} {
	if o == nil {
		return nil
	}
	return o.Assessment
}

func (o *PutInfrastructurePublishersPublisherIDData) GetCommonName() *string {
	if o == nil {
		return nil
	}
	return o.CommonName
}

func (o *PutInfrastructurePublishersPublisherIDData) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PutInfrastructurePublishersPublisherIDData) GetLbrokerconnect() *bool {
	if o == nil {
		return nil
	}
	return o.Lbrokerconnect
}

func (o *PutInfrastructurePublishersPublisherIDData) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PutInfrastructurePublishersPublisherIDData) GetPublisherUpgradeProfileID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherUpgradeProfileID
}

func (o *PutInfrastructurePublishersPublisherIDData) GetRegistered() *bool {
	if o == nil {
		return nil
	}
	return o.Registered
}

func (o *PutInfrastructurePublishersPublisherIDData) GetStatus() *PutInfrastructurePublishersPublisherIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PutInfrastructurePublishersPublisherIDData) GetStitcherID() *int {
	if o == nil {
		return nil
	}
	return o.StitcherID
}

func (o *PutInfrastructurePublishersPublisherIDData) GetTags() []PutInfrastructurePublishersPublisherIDNPAPublishersTags {
	if o == nil {
		return nil
	}
	return o.Tags
}

// PutInfrastructurePublishersPublisherIDResponseBody - successful operation
type PutInfrastructurePublishersPublisherIDResponseBody struct {
	Data *PutInfrastructurePublishersPublisherIDData `json:"data,omitempty"`
}

func (o *PutInfrastructurePublishersPublisherIDResponseBody) GetData() *PutInfrastructurePublishersPublisherIDData {
	if o == nil {
		return nil
	}
	return o.Data
}

type PutInfrastructurePublishersPublisherIDResponse struct {
	// successful operation
	TwoHundredApplicationJSONObject *PutInfrastructurePublishersPublisherIDResponseBody
	// Invalid request
	FourHundredApplicationJSONObject *PutInfrastructurePublishersPublisherIDNPAPublishersResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *PutInfrastructurePublishersPublisherIDResponse) GetTwoHundredApplicationJSONObject() *PutInfrastructurePublishersPublisherIDResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *PutInfrastructurePublishersPublisherIDResponse) GetFourHundredApplicationJSONObject() *PutInfrastructurePublishersPublisherIDNPAPublishersResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *PutInfrastructurePublishersPublisherIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PutInfrastructurePublishersPublisherIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PutInfrastructurePublishersPublisherIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
