// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type DeleteNpaRulesIDRequest struct {
	// npa policy id
	ID int `pathParam:"style=simple,explode=false,name=id"`
}

func (o *DeleteNpaRulesIDRequest) GetID() int {
	if o == nil {
		return 0
	}
	return o.ID
}

// DeleteNpaRulesIDResponseResponseBody - Invalid request
type DeleteNpaRulesIDResponseResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *DeleteNpaRulesIDResponseResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *DeleteNpaRulesIDResponseResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type DeleteNpaRulesIDAccessMethod string

const (
	DeleteNpaRulesIDAccessMethodClient     DeleteNpaRulesIDAccessMethod = "Client"
	DeleteNpaRulesIDAccessMethodClientless DeleteNpaRulesIDAccessMethod = "Clientless"
)

func (e DeleteNpaRulesIDAccessMethod) ToPointer() *DeleteNpaRulesIDAccessMethod {
	return &e
}

func (e *DeleteNpaRulesIDAccessMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		fallthrough
	case "Clientless":
		*e = DeleteNpaRulesIDAccessMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteNpaRulesIDAccessMethod: %v", v)
	}
}

type DeleteNpaRulesIDActions string

const (
	DeleteNpaRulesIDActionsAllow       DeleteNpaRulesIDActions = "allow"
	DeleteNpaRulesIDActionsBlock       DeleteNpaRulesIDActions = "block"
	DeleteNpaRulesIDActionsAlert       DeleteNpaRulesIDActions = "alert"
	DeleteNpaRulesIDActionsQuanrantine DeleteNpaRulesIDActions = "quanrantine"
	DeleteNpaRulesIDActionsBypass      DeleteNpaRulesIDActions = "bypass"
)

func (e DeleteNpaRulesIDActions) ToPointer() *DeleteNpaRulesIDActions {
	return &e
}

func (e *DeleteNpaRulesIDActions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		fallthrough
	case "alert":
		fallthrough
	case "quanrantine":
		fallthrough
	case "bypass":
		*e = DeleteNpaRulesIDActions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteNpaRulesIDActions: %v", v)
	}
}

type DeleteNpaRulesIDDlpActions struct {
	Actions    []DeleteNpaRulesIDActions `json:"actions,omitempty"`
	DlpProfile *string                   `json:"dlp_profile,omitempty"`
}

func (o *DeleteNpaRulesIDDlpActions) GetActions() []DeleteNpaRulesIDActions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *DeleteNpaRulesIDDlpActions) GetDlpProfile() *string {
	if o == nil {
		return nil
	}
	return o.DlpProfile
}

type DeleteNpaRulesIDActionName string

const (
	DeleteNpaRulesIDActionNameAllow DeleteNpaRulesIDActionName = "allow"
	DeleteNpaRulesIDActionNameBlock DeleteNpaRulesIDActionName = "block"
)

func (e DeleteNpaRulesIDActionName) ToPointer() *DeleteNpaRulesIDActionName {
	return &e
}

func (e *DeleteNpaRulesIDActionName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = DeleteNpaRulesIDActionName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteNpaRulesIDActionName: %v", v)
	}
}

type DeleteNpaRulesIDMatchCriteriaAction struct {
	ActionName *DeleteNpaRulesIDActionName `json:"action_name,omitempty"`
}

func (o *DeleteNpaRulesIDMatchCriteriaAction) GetActionName() *DeleteNpaRulesIDActionName {
	if o == nil {
		return nil
	}
	return o.ActionName
}

type DeleteNpaRulesIDPolicyType string

const (
	DeleteNpaRulesIDPolicyTypePrivateApp DeleteNpaRulesIDPolicyType = "private-app"
)

func (e DeleteNpaRulesIDPolicyType) ToPointer() *DeleteNpaRulesIDPolicyType {
	return &e
}

func (e *DeleteNpaRulesIDPolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-app":
		*e = DeleteNpaRulesIDPolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteNpaRulesIDPolicyType: %v", v)
	}
}

type DeleteNpaRulesIDActivity string

const (
	DeleteNpaRulesIDActivityAny DeleteNpaRulesIDActivity = "any"
)

func (e DeleteNpaRulesIDActivity) ToPointer() *DeleteNpaRulesIDActivity {
	return &e
}

func (e *DeleteNpaRulesIDActivity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		*e = DeleteNpaRulesIDActivity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteNpaRulesIDActivity: %v", v)
	}
}

type DeleteNpaRulesIDActivities struct {
	Activity          *DeleteNpaRulesIDActivity `json:"activity,omitempty"`
	ListOfConstraints []string                  `json:"list_of_constraints,omitempty"`
}

func (o *DeleteNpaRulesIDActivities) GetActivity() *DeleteNpaRulesIDActivity {
	if o == nil {
		return nil
	}
	return o.Activity
}

func (o *DeleteNpaRulesIDActivities) GetListOfConstraints() []string {
	if o == nil {
		return nil
	}
	return o.ListOfConstraints
}

type DeleteNpaRulesIDPrivateAppsWithActivities struct {
	Activities []DeleteNpaRulesIDActivities `json:"activities,omitempty"`
	AppName    *string                      `json:"appName,omitempty"`
}

func (o *DeleteNpaRulesIDPrivateAppsWithActivities) GetActivities() []DeleteNpaRulesIDActivities {
	if o == nil {
		return nil
	}
	return o.Activities
}

func (o *DeleteNpaRulesIDPrivateAppsWithActivities) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

type DeleteNpaRulesIDUserType string

const (
	DeleteNpaRulesIDUserTypeUser DeleteNpaRulesIDUserType = "user"
)

func (e DeleteNpaRulesIDUserType) ToPointer() *DeleteNpaRulesIDUserType {
	return &e
}

func (e *DeleteNpaRulesIDUserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = DeleteNpaRulesIDUserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteNpaRulesIDUserType: %v", v)
	}
}

type DeleteNpaRulesIDRuleData struct {
	AccessMethod              *DeleteNpaRulesIDAccessMethod               `json:"access_method,omitempty"`
	BNegateNetLocation        *bool                                       `json:"b_negateNetLocation,omitempty"`
	BNegateSrcCountries       *bool                                       `json:"b_negateSrcCountries,omitempty"`
	Classification            *string                                     `json:"classification,omitempty"`
	DlpActions                []DeleteNpaRulesIDDlpActions                `json:"dlp_actions,omitempty"`
	ExternalDlp               *bool                                       `json:"external_dlp,omitempty"`
	JSONVersion               *int64                                      `json:"json_version,omitempty"`
	MatchCriteriaAction       *DeleteNpaRulesIDMatchCriteriaAction        `json:"match_criteria_action,omitempty"`
	NetLocationObj            []string                                    `json:"net_location_obj,omitempty"`
	OrganizationUnits         []string                                    `json:"organization_units,omitempty"`
	PolicyType                *DeleteNpaRulesIDPolicyType                 `json:"policy_type,omitempty"`
	PrivateAppIds             []string                                    `json:"privateAppIds,omitempty"`
	PrivateAppTagIds          []string                                    `json:"privateAppTagIds,omitempty"`
	PrivateAppTags            []string                                    `json:"privateAppTags,omitempty"`
	PrivateApps               []string                                    `json:"privateApps,omitempty"`
	PrivateAppsWithActivities []DeleteNpaRulesIDPrivateAppsWithActivities `json:"privateAppsWithActivities,omitempty"`
	ShowDlpProfileActionTable *bool                                       `json:"show_dlp_profile_action_table,omitempty"`
	SrcCountries              []string                                    `json:"srcCountries,omitempty"`
	UserGroups                []string                                    `json:"userGroups,omitempty"`
	UserType                  *DeleteNpaRulesIDUserType                   `json:"userType,omitempty"`
	Users                     []string                                    `json:"users,omitempty"`
	Version                   *int64                                      `json:"version,omitempty"`
}

func (o *DeleteNpaRulesIDRuleData) GetAccessMethod() *DeleteNpaRulesIDAccessMethod {
	if o == nil {
		return nil
	}
	return o.AccessMethod
}

func (o *DeleteNpaRulesIDRuleData) GetBNegateNetLocation() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateNetLocation
}

func (o *DeleteNpaRulesIDRuleData) GetBNegateSrcCountries() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateSrcCountries
}

func (o *DeleteNpaRulesIDRuleData) GetClassification() *string {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *DeleteNpaRulesIDRuleData) GetDlpActions() []DeleteNpaRulesIDDlpActions {
	if o == nil {
		return nil
	}
	return o.DlpActions
}

func (o *DeleteNpaRulesIDRuleData) GetExternalDlp() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalDlp
}

func (o *DeleteNpaRulesIDRuleData) GetJSONVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.JSONVersion
}

func (o *DeleteNpaRulesIDRuleData) GetMatchCriteriaAction() *DeleteNpaRulesIDMatchCriteriaAction {
	if o == nil {
		return nil
	}
	return o.MatchCriteriaAction
}

func (o *DeleteNpaRulesIDRuleData) GetNetLocationObj() []string {
	if o == nil {
		return nil
	}
	return o.NetLocationObj
}

func (o *DeleteNpaRulesIDRuleData) GetOrganizationUnits() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationUnits
}

func (o *DeleteNpaRulesIDRuleData) GetPolicyType() *DeleteNpaRulesIDPolicyType {
	if o == nil {
		return nil
	}
	return o.PolicyType
}

func (o *DeleteNpaRulesIDRuleData) GetPrivateAppIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppIds
}

func (o *DeleteNpaRulesIDRuleData) GetPrivateAppTagIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTagIds
}

func (o *DeleteNpaRulesIDRuleData) GetPrivateAppTags() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTags
}

func (o *DeleteNpaRulesIDRuleData) GetPrivateApps() []string {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

func (o *DeleteNpaRulesIDRuleData) GetPrivateAppsWithActivities() []DeleteNpaRulesIDPrivateAppsWithActivities {
	if o == nil {
		return nil
	}
	return o.PrivateAppsWithActivities
}

func (o *DeleteNpaRulesIDRuleData) GetShowDlpProfileActionTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowDlpProfileActionTable
}

func (o *DeleteNpaRulesIDRuleData) GetSrcCountries() []string {
	if o == nil {
		return nil
	}
	return o.SrcCountries
}

func (o *DeleteNpaRulesIDRuleData) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *DeleteNpaRulesIDRuleData) GetUserType() *DeleteNpaRulesIDUserType {
	if o == nil {
		return nil
	}
	return o.UserType
}

func (o *DeleteNpaRulesIDRuleData) GetUsers() []string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *DeleteNpaRulesIDRuleData) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}

type DeleteNpaRulesIDData struct {
	GroupID  *int64                    `json:"group_id,omitempty"`
	RuleData *DeleteNpaRulesIDRuleData `json:"rule_data,omitempty"`
	RuleID   *int64                    `json:"rule_id,omitempty"`
	RuleName *string                   `json:"rule_name,omitempty"`
}

func (o *DeleteNpaRulesIDData) GetGroupID() *int64 {
	if o == nil {
		return nil
	}
	return o.GroupID
}

func (o *DeleteNpaRulesIDData) GetRuleData() *DeleteNpaRulesIDRuleData {
	if o == nil {
		return nil
	}
	return o.RuleData
}

func (o *DeleteNpaRulesIDData) GetRuleID() *int64 {
	if o == nil {
		return nil
	}
	return o.RuleID
}

func (o *DeleteNpaRulesIDData) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

type DeleteNpaRulesIDStatus string

const (
	DeleteNpaRulesIDStatusSuccess DeleteNpaRulesIDStatus = "success"
	DeleteNpaRulesIDStatusError   DeleteNpaRulesIDStatus = "error"
)

func (e DeleteNpaRulesIDStatus) ToPointer() *DeleteNpaRulesIDStatus {
	return &e
}

func (e *DeleteNpaRulesIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "error":
		*e = DeleteNpaRulesIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteNpaRulesIDStatus: %v", v)
	}
}

// DeleteNpaRulesIDResponseBody - successful operation
type DeleteNpaRulesIDResponseBody struct {
	Data   *DeleteNpaRulesIDData   `json:"data,omitempty"`
	Status *DeleteNpaRulesIDStatus `json:"status,omitempty"`
}

func (o *DeleteNpaRulesIDResponseBody) GetData() *DeleteNpaRulesIDData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *DeleteNpaRulesIDResponseBody) GetStatus() *DeleteNpaRulesIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type DeleteNpaRulesIDResponse struct {
	// successful operation
	TwoHundredApplicationJSONObject *DeleteNpaRulesIDResponseBody
	// Invalid request
	FourHundredApplicationJSONObject *DeleteNpaRulesIDResponseResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *DeleteNpaRulesIDResponse) GetTwoHundredApplicationJSONObject() *DeleteNpaRulesIDResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *DeleteNpaRulesIDResponse) GetFourHundredApplicationJSONObject() *DeleteNpaRulesIDResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *DeleteNpaRulesIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *DeleteNpaRulesIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *DeleteNpaRulesIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
