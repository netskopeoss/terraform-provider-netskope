// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"net/http"
	"ns/internal/sdk/pkg/utils"
)

type GetInfrastructurePublishersRequest struct {
	// Return values only from specified fields
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
}

func (o *GetInfrastructurePublishersRequest) GetFields() *string {
	if o == nil {
		return nil
	}
	return o.Fields
}

// GetInfrastructurePublishersNPAPublishersResponseBody - Invalid request
type GetInfrastructurePublishersNPAPublishersResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *GetInfrastructurePublishersNPAPublishersResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetInfrastructurePublishersNPAPublishersResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type Two struct {
}

type GetInfrastructurePublishersNPAPublishersAssessment struct {
	EeeSupport bool   `json:"eee_support"`
	HddFree    string `json:"hdd_free"`
	HddTotal   string `json:"hdd_total"`
	IPAddress  string `json:"ip_address"`
	Latency    int64  `json:"latency"`
	Version    string `json:"version"`
}

func (o *GetInfrastructurePublishersNPAPublishersAssessment) GetEeeSupport() bool {
	if o == nil {
		return false
	}
	return o.EeeSupport
}

func (o *GetInfrastructurePublishersNPAPublishersAssessment) GetHddFree() string {
	if o == nil {
		return ""
	}
	return o.HddFree
}

func (o *GetInfrastructurePublishersNPAPublishersAssessment) GetHddTotal() string {
	if o == nil {
		return ""
	}
	return o.HddTotal
}

func (o *GetInfrastructurePublishersNPAPublishersAssessment) GetIPAddress() string {
	if o == nil {
		return ""
	}
	return o.IPAddress
}

func (o *GetInfrastructurePublishersNPAPublishersAssessment) GetLatency() int64 {
	if o == nil {
		return 0
	}
	return o.Latency
}

func (o *GetInfrastructurePublishersNPAPublishersAssessment) GetVersion() string {
	if o == nil {
		return ""
	}
	return o.Version
}

type GetInfrastructurePublishersAssessmentType string

const (
	GetInfrastructurePublishersAssessmentTypeGetInfrastructurePublishersNPAPublishersAssessment GetInfrastructurePublishersAssessmentType = "get_/infrastructure/publishers_NPAPublishers_Assessment"
	GetInfrastructurePublishersAssessmentTypeTwo                                                GetInfrastructurePublishersAssessmentType = "2"
)

type GetInfrastructurePublishersAssessment struct {
	GetInfrastructurePublishersNPAPublishersAssessment *GetInfrastructurePublishersNPAPublishersAssessment
	Two                                                *Two

	Type GetInfrastructurePublishersAssessmentType
}

func CreateGetInfrastructurePublishersAssessmentGetInfrastructurePublishersNPAPublishersAssessment(getInfrastructurePublishersNPAPublishersAssessment GetInfrastructurePublishersNPAPublishersAssessment) GetInfrastructurePublishersAssessment {
	typ := GetInfrastructurePublishersAssessmentTypeGetInfrastructurePublishersNPAPublishersAssessment

	return GetInfrastructurePublishersAssessment{
		GetInfrastructurePublishersNPAPublishersAssessment: &getInfrastructurePublishersNPAPublishersAssessment,
		Type: typ,
	}
}

func CreateGetInfrastructurePublishersAssessmentTwo(two Two) GetInfrastructurePublishersAssessment {
	typ := GetInfrastructurePublishersAssessmentTypeTwo

	return GetInfrastructurePublishersAssessment{
		Two:  &two,
		Type: typ,
	}
}

func (u *GetInfrastructurePublishersAssessment) UnmarshalJSON(data []byte) error {

	two := new(Two)
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = two
		u.Type = GetInfrastructurePublishersAssessmentTypeTwo
		return nil
	}

	getInfrastructurePublishersNPAPublishersAssessment := new(GetInfrastructurePublishersNPAPublishersAssessment)
	if err := utils.UnmarshalJSON(data, &getInfrastructurePublishersNPAPublishersAssessment, "", true, true); err == nil {
		u.GetInfrastructurePublishersNPAPublishersAssessment = getInfrastructurePublishersNPAPublishersAssessment
		u.Type = GetInfrastructurePublishersAssessmentTypeGetInfrastructurePublishersNPAPublishersAssessment
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetInfrastructurePublishersAssessment) MarshalJSON() ([]byte, error) {
	if u.GetInfrastructurePublishersNPAPublishersAssessment != nil {
		return utils.MarshalJSON(u.GetInfrastructurePublishersNPAPublishersAssessment, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetInfrastructurePublishers2 struct {
}

type StitcherIDType string

const (
	StitcherIDTypeInteger                      StitcherIDType = "integer"
	StitcherIDTypeGetInfrastructurePublishers2 StitcherIDType = "get_/infrastructure/publishers_2"
)

type StitcherID struct {
	Integer                      *int64
	GetInfrastructurePublishers2 *GetInfrastructurePublishers2

	Type StitcherIDType
}

func CreateStitcherIDInteger(integer int64) StitcherID {
	typ := StitcherIDTypeInteger

	return StitcherID{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateStitcherIDGetInfrastructurePublishers2(getInfrastructurePublishers2 GetInfrastructurePublishers2) StitcherID {
	typ := StitcherIDTypeGetInfrastructurePublishers2

	return StitcherID{
		GetInfrastructurePublishers2: &getInfrastructurePublishers2,
		Type:                         typ,
	}
}

func (u *StitcherID) UnmarshalJSON(data []byte) error {

	getInfrastructurePublishers2 := new(GetInfrastructurePublishers2)
	if err := utils.UnmarshalJSON(data, &getInfrastructurePublishers2, "", true, true); err == nil {
		u.GetInfrastructurePublishers2 = getInfrastructurePublishers2
		u.Type = StitcherIDTypeGetInfrastructurePublishers2
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = StitcherIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u StitcherID) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.GetInfrastructurePublishers2 != nil {
		return utils.MarshalJSON(u.GetInfrastructurePublishers2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetInfrastructurePublishersNPAPublishers2 struct {
}

type GetInfrastructurePublishersNPAPublishersUpgradeFailedReason struct {
	Detail    string `json:"detail"`
	ErrorCode int64  `json:"error_code"`
	Timestamp int64  `json:"timestamp"`
	Version   string `json:"version"`
}

func (o *GetInfrastructurePublishersNPAPublishersUpgradeFailedReason) GetDetail() string {
	if o == nil {
		return ""
	}
	return o.Detail
}

func (o *GetInfrastructurePublishersNPAPublishersUpgradeFailedReason) GetErrorCode() int64 {
	if o == nil {
		return 0
	}
	return o.ErrorCode
}

func (o *GetInfrastructurePublishersNPAPublishersUpgradeFailedReason) GetTimestamp() int64 {
	if o == nil {
		return 0
	}
	return o.Timestamp
}

func (o *GetInfrastructurePublishersNPAPublishersUpgradeFailedReason) GetVersion() string {
	if o == nil {
		return ""
	}
	return o.Version
}

type GetInfrastructurePublishersUpgradeFailedReasonType string

const (
	GetInfrastructurePublishersUpgradeFailedReasonTypeGetInfrastructurePublishersNPAPublishersUpgradeFailedReason GetInfrastructurePublishersUpgradeFailedReasonType = "get_/infrastructure/publishers_NPAPublishers_UpgradeFailedReason"
	GetInfrastructurePublishersUpgradeFailedReasonTypeGetInfrastructurePublishersNPAPublishers2                   GetInfrastructurePublishersUpgradeFailedReasonType = "get_/infrastructure/publishers_NPAPublishers_2"
)

type GetInfrastructurePublishersUpgradeFailedReason struct {
	GetInfrastructurePublishersNPAPublishersUpgradeFailedReason *GetInfrastructurePublishersNPAPublishersUpgradeFailedReason
	GetInfrastructurePublishersNPAPublishers2                   *GetInfrastructurePublishersNPAPublishers2

	Type GetInfrastructurePublishersUpgradeFailedReasonType
}

func CreateGetInfrastructurePublishersUpgradeFailedReasonGetInfrastructurePublishersNPAPublishersUpgradeFailedReason(getInfrastructurePublishersNPAPublishersUpgradeFailedReason GetInfrastructurePublishersNPAPublishersUpgradeFailedReason) GetInfrastructurePublishersUpgradeFailedReason {
	typ := GetInfrastructurePublishersUpgradeFailedReasonTypeGetInfrastructurePublishersNPAPublishersUpgradeFailedReason

	return GetInfrastructurePublishersUpgradeFailedReason{
		GetInfrastructurePublishersNPAPublishersUpgradeFailedReason: &getInfrastructurePublishersNPAPublishersUpgradeFailedReason,
		Type: typ,
	}
}

func CreateGetInfrastructurePublishersUpgradeFailedReasonGetInfrastructurePublishersNPAPublishers2(getInfrastructurePublishersNPAPublishers2 GetInfrastructurePublishersNPAPublishers2) GetInfrastructurePublishersUpgradeFailedReason {
	typ := GetInfrastructurePublishersUpgradeFailedReasonTypeGetInfrastructurePublishersNPAPublishers2

	return GetInfrastructurePublishersUpgradeFailedReason{
		GetInfrastructurePublishersNPAPublishers2: &getInfrastructurePublishersNPAPublishers2,
		Type: typ,
	}
}

func (u *GetInfrastructurePublishersUpgradeFailedReason) UnmarshalJSON(data []byte) error {

	getInfrastructurePublishersNPAPublishers2 := new(GetInfrastructurePublishersNPAPublishers2)
	if err := utils.UnmarshalJSON(data, &getInfrastructurePublishersNPAPublishers2, "", true, true); err == nil {
		u.GetInfrastructurePublishersNPAPublishers2 = getInfrastructurePublishersNPAPublishers2
		u.Type = GetInfrastructurePublishersUpgradeFailedReasonTypeGetInfrastructurePublishersNPAPublishers2
		return nil
	}

	getInfrastructurePublishersNPAPublishersUpgradeFailedReason := new(GetInfrastructurePublishersNPAPublishersUpgradeFailedReason)
	if err := utils.UnmarshalJSON(data, &getInfrastructurePublishersNPAPublishersUpgradeFailedReason, "", true, true); err == nil {
		u.GetInfrastructurePublishersNPAPublishersUpgradeFailedReason = getInfrastructurePublishersNPAPublishersUpgradeFailedReason
		u.Type = GetInfrastructurePublishersUpgradeFailedReasonTypeGetInfrastructurePublishersNPAPublishersUpgradeFailedReason
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetInfrastructurePublishersUpgradeFailedReason) MarshalJSON() ([]byte, error) {
	if u.GetInfrastructurePublishersNPAPublishersUpgradeFailedReason != nil {
		return utils.MarshalJSON(u.GetInfrastructurePublishersNPAPublishersUpgradeFailedReason, "", true)
	}

	if u.GetInfrastructurePublishersNPAPublishers2 != nil {
		return utils.MarshalJSON(u.GetInfrastructurePublishersNPAPublishers2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetInfrastructurePublishersUpgradeStatus struct {
	Upstat string `json:"upstat"`
}

func (o *GetInfrastructurePublishersUpgradeStatus) GetUpstat() string {
	if o == nil {
		return ""
	}
	return o.Upstat
}

type Publisher struct {
	AppsCount                          int64                                          `json:"apps_count"`
	Assessment                         GetInfrastructurePublishersAssessment          `json:"assessment"`
	CommonName                         string                                         `json:"common_name"`
	ConnectedApps                      []string                                       `json:"connected_apps"`
	Lbrokerconnect                     bool                                           `json:"lbrokerconnect"`
	PublisherID                        int64                                          `json:"publisher_id"`
	PublisherName                      string                                         `json:"publisher_name"`
	PublisherUpgradeProfilesExternalID int64                                          `json:"publisher_upgrade_profiles_external_id"`
	Registered                         bool                                           `json:"registered"`
	Status                             string                                         `json:"status"`
	StitcherID                         StitcherID                                     `json:"stitcher_id"`
	Tags                               []interface{}                                  `json:"tags"`
	UpgradeFailedReason                GetInfrastructurePublishersUpgradeFailedReason `json:"upgrade_failed_reason"`
	UpgradeRequest                     bool                                           `json:"upgrade_request"`
	UpgradeStatus                      GetInfrastructurePublishersUpgradeStatus       `json:"upgrade_status"`
}

func (o *Publisher) GetAppsCount() int64 {
	if o == nil {
		return 0
	}
	return o.AppsCount
}

func (o *Publisher) GetAssessment() GetInfrastructurePublishersAssessment {
	if o == nil {
		return GetInfrastructurePublishersAssessment{}
	}
	return o.Assessment
}

func (o *Publisher) GetCommonName() string {
	if o == nil {
		return ""
	}
	return o.CommonName
}

func (o *Publisher) GetConnectedApps() []string {
	if o == nil {
		return []string{}
	}
	return o.ConnectedApps
}

func (o *Publisher) GetLbrokerconnect() bool {
	if o == nil {
		return false
	}
	return o.Lbrokerconnect
}

func (o *Publisher) GetPublisherID() int64 {
	if o == nil {
		return 0
	}
	return o.PublisherID
}

func (o *Publisher) GetPublisherName() string {
	if o == nil {
		return ""
	}
	return o.PublisherName
}

func (o *Publisher) GetPublisherUpgradeProfilesExternalID() int64 {
	if o == nil {
		return 0
	}
	return o.PublisherUpgradeProfilesExternalID
}

func (o *Publisher) GetRegistered() bool {
	if o == nil {
		return false
	}
	return o.Registered
}

func (o *Publisher) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *Publisher) GetStitcherID() StitcherID {
	if o == nil {
		return StitcherID{}
	}
	return o.StitcherID
}

func (o *Publisher) GetTags() []interface{} {
	if o == nil {
		return []interface{}{}
	}
	return o.Tags
}

func (o *Publisher) GetUpgradeFailedReason() GetInfrastructurePublishersUpgradeFailedReason {
	if o == nil {
		return GetInfrastructurePublishersUpgradeFailedReason{}
	}
	return o.UpgradeFailedReason
}

func (o *Publisher) GetUpgradeRequest() bool {
	if o == nil {
		return false
	}
	return o.UpgradeRequest
}

func (o *Publisher) GetUpgradeStatus() GetInfrastructurePublishersUpgradeStatus {
	if o == nil {
		return GetInfrastructurePublishersUpgradeStatus{}
	}
	return o.UpgradeStatus
}

type GetInfrastructurePublishersData struct {
	Publishers []Publisher `json:"publishers"`
}

func (o *GetInfrastructurePublishersData) GetPublishers() []Publisher {
	if o == nil {
		return []Publisher{}
	}
	return o.Publishers
}

// GetInfrastructurePublishersResponseBody - successful operation
type GetInfrastructurePublishersResponseBody struct {
	Data   *GetInfrastructurePublishersData `json:"data,omitempty"`
	Status *string                          `json:"status,omitempty"`
	Total  *int                             `json:"total,omitempty"`
}

func (o *GetInfrastructurePublishersResponseBody) GetData() *GetInfrastructurePublishersData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *GetInfrastructurePublishersResponseBody) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetInfrastructurePublishersResponseBody) GetTotal() *int {
	if o == nil {
		return nil
	}
	return o.Total
}

type GetInfrastructurePublishersResponse struct {
	// successful operation
	TwoHundredApplicationJSONObject *GetInfrastructurePublishersResponseBody
	// Invalid request
	FourHundredApplicationJSONObject *GetInfrastructurePublishersNPAPublishersResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetInfrastructurePublishersResponse) GetTwoHundredApplicationJSONObject() *GetInfrastructurePublishersResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *GetInfrastructurePublishersResponse) GetFourHundredApplicationJSONObject() *GetInfrastructurePublishersNPAPublishersResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *GetInfrastructurePublishersResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetInfrastructurePublishersResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetInfrastructurePublishersResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
