// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetIpsecPopsIDRequest struct {
	// Provide comma separated list of fields to be displayed
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// POP id
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *GetIpsecPopsIDRequest) GetFields() *string {
	if o == nil {
		return nil
	}
	return o.Fields
}

func (o *GetIpsecPopsIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// GetIpsecPopsIDResponse500ResponseBody - Internal server error
type GetIpsecPopsIDResponse500ResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *GetIpsecPopsIDResponse500ResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetIpsecPopsIDResponse500ResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

// GetIpsecPopsIDResponse429ResponseBody - Too many requests
type GetIpsecPopsIDResponse429ResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *GetIpsecPopsIDResponse429ResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetIpsecPopsIDResponse429ResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

// GetIpsecPopsIDResponse405ResponseBody - Method not allowed
type GetIpsecPopsIDResponse405ResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *GetIpsecPopsIDResponse405ResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetIpsecPopsIDResponse405ResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

// GetIpsecPopsIDResponse404ResponseBody - Not found
type GetIpsecPopsIDResponse404ResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *GetIpsecPopsIDResponse404ResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetIpsecPopsIDResponse404ResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

// GetIpsecPopsIDResponse403ResponseBody - Access forbidden
type GetIpsecPopsIDResponse403ResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *GetIpsecPopsIDResponse403ResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetIpsecPopsIDResponse403ResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

// GetIpsecPopsIDResponseResponseBody - Invalid request
type GetIpsecPopsIDResponseResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *GetIpsecPopsIDResponseResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetIpsecPopsIDResponseResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type Phase1 struct {
	Dhgroup        *string `json:"dhgroup,omitempty"`
	Dpd            *bool   `json:"dpd,omitempty"`
	Encryptionalgo *string `json:"encryptionalgo,omitempty"`
	Ikeversion     *string `json:"ikeversion,omitempty"`
	Integrityalgo  *string `json:"integrityalgo,omitempty"`
	Salifetime     *string `json:"salifetime,omitempty"`
}

func (o *Phase1) GetDhgroup() *string {
	if o == nil {
		return nil
	}
	return o.Dhgroup
}

func (o *Phase1) GetDpd() *bool {
	if o == nil {
		return nil
	}
	return o.Dpd
}

func (o *Phase1) GetEncryptionalgo() *string {
	if o == nil {
		return nil
	}
	return o.Encryptionalgo
}

func (o *Phase1) GetIkeversion() *string {
	if o == nil {
		return nil
	}
	return o.Ikeversion
}

func (o *Phase1) GetIntegrityalgo() *string {
	if o == nil {
		return nil
	}
	return o.Integrityalgo
}

func (o *Phase1) GetSalifetime() *string {
	if o == nil {
		return nil
	}
	return o.Salifetime
}

type Phase2 struct {
	Dhgroup        *string `json:"dhgroup,omitempty"`
	Encryptionalgo *string `json:"encryptionalgo,omitempty"`
	Integrityalgo  *string `json:"integrityalgo,omitempty"`
	Pfs            *bool   `json:"pfs,omitempty"`
	Salifetime     *string `json:"salifetime,omitempty"`
}

func (o *Phase2) GetDhgroup() *string {
	if o == nil {
		return nil
	}
	return o.Dhgroup
}

func (o *Phase2) GetEncryptionalgo() *string {
	if o == nil {
		return nil
	}
	return o.Encryptionalgo
}

func (o *Phase2) GetIntegrityalgo() *string {
	if o == nil {
		return nil
	}
	return o.Integrityalgo
}

func (o *Phase2) GetPfs() *bool {
	if o == nil {
		return nil
	}
	return o.Pfs
}

func (o *Phase2) GetSalifetime() *string {
	if o == nil {
		return nil
	}
	return o.Salifetime
}

type GetIpsecPopsIDOptions struct {
	Phase1 *Phase1 `json:"phase1,omitempty"`
	Phase2 *Phase2 `json:"phase2,omitempty"`
}

func (o *GetIpsecPopsIDOptions) GetPhase1() *Phase1 {
	if o == nil {
		return nil
	}
	return o.Phase1
}

func (o *GetIpsecPopsIDOptions) GetPhase2() *Phase2 {
	if o == nil {
		return nil
	}
	return o.Phase2
}

type GetIpsecPopsIDResult struct {
	Acceptingtunnels *bool                  `json:"acceptingtunnels,omitempty"`
	Bandwidth        *string                `json:"bandwidth,omitempty"`
	Distance         *string                `json:"distance,omitempty"`
	Gateway          *string                `json:"gateway,omitempty"`
	ID               *string                `json:"id,omitempty"`
	Location         *string                `json:"location,omitempty"`
	Name             *string                `json:"name,omitempty"`
	Options          *GetIpsecPopsIDOptions `json:"options,omitempty"`
	Probeip          *string                `json:"probeip,omitempty"`
	Region           *string                `json:"region,omitempty"`
}

func (o *GetIpsecPopsIDResult) GetAcceptingtunnels() *bool {
	if o == nil {
		return nil
	}
	return o.Acceptingtunnels
}

func (o *GetIpsecPopsIDResult) GetBandwidth() *string {
	if o == nil {
		return nil
	}
	return o.Bandwidth
}

func (o *GetIpsecPopsIDResult) GetDistance() *string {
	if o == nil {
		return nil
	}
	return o.Distance
}

func (o *GetIpsecPopsIDResult) GetGateway() *string {
	if o == nil {
		return nil
	}
	return o.Gateway
}

func (o *GetIpsecPopsIDResult) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetIpsecPopsIDResult) GetLocation() *string {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *GetIpsecPopsIDResult) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetIpsecPopsIDResult) GetOptions() *GetIpsecPopsIDOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *GetIpsecPopsIDResult) GetProbeip() *string {
	if o == nil {
		return nil
	}
	return o.Probeip
}

func (o *GetIpsecPopsIDResult) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

// GetIpsecPopsIDResponseBody - Successful operation
type GetIpsecPopsIDResponseBody struct {
	Result []GetIpsecPopsIDResult `json:"result,omitempty"`
	Status *int64                 `json:"status,omitempty"`
	Total  *int64                 `json:"total,omitempty"`
}

func (o *GetIpsecPopsIDResponseBody) GetResult() []GetIpsecPopsIDResult {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetIpsecPopsIDResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetIpsecPopsIDResponseBody) GetTotal() *int64 {
	if o == nil {
		return nil
	}
	return o.Total
}

type GetIpsecPopsIDResponse struct {
	// Successful operation
	TwoHundredApplicationJSONObject *GetIpsecPopsIDResponseBody
	// Invalid request
	FourHundredApplicationJSONObject *GetIpsecPopsIDResponseResponseBody
	// Access forbidden
	FourHundredAndThreeApplicationJSONObject *GetIpsecPopsIDResponse403ResponseBody
	// Not found
	FourHundredAndFourApplicationJSONObject *GetIpsecPopsIDResponse404ResponseBody
	// Method not allowed
	FourHundredAndFiveApplicationJSONObject *GetIpsecPopsIDResponse405ResponseBody
	// Too many requests
	FourHundredAndTwentyNineApplicationJSONObject *GetIpsecPopsIDResponse429ResponseBody
	// Internal server error
	FiveHundredApplicationJSONObject *GetIpsecPopsIDResponse500ResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetIpsecPopsIDResponse) GetTwoHundredApplicationJSONObject() *GetIpsecPopsIDResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *GetIpsecPopsIDResponse) GetFourHundredApplicationJSONObject() *GetIpsecPopsIDResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *GetIpsecPopsIDResponse) GetFourHundredAndThreeApplicationJSONObject() *GetIpsecPopsIDResponse403ResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *GetIpsecPopsIDResponse) GetFourHundredAndFourApplicationJSONObject() *GetIpsecPopsIDResponse404ResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFourApplicationJSONObject
}

func (o *GetIpsecPopsIDResponse) GetFourHundredAndFiveApplicationJSONObject() *GetIpsecPopsIDResponse405ResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndFiveApplicationJSONObject
}

func (o *GetIpsecPopsIDResponse) GetFourHundredAndTwentyNineApplicationJSONObject() *GetIpsecPopsIDResponse429ResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndTwentyNineApplicationJSONObject
}

func (o *GetIpsecPopsIDResponse) GetFiveHundredApplicationJSONObject() *GetIpsecPopsIDResponse500ResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredApplicationJSONObject
}

func (o *GetIpsecPopsIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetIpsecPopsIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetIpsecPopsIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
