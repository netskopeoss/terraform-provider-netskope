// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNpaRulesIDRequest struct {
	// Return values only from specified fields
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// npa policy id
	ID int `pathParam:"style=simple,explode=false,name=id"`
}

func (o *GetNpaRulesIDRequest) GetFields() *string {
	if o == nil {
		return nil
	}
	return o.Fields
}

func (o *GetNpaRulesIDRequest) GetID() int {
	if o == nil {
		return 0
	}
	return o.ID
}

// GetNpaRulesIDResponseResponseBody - Invalid request
type GetNpaRulesIDResponseResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *GetNpaRulesIDResponseResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetNpaRulesIDResponseResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type GetNpaRulesIDAccessMethod string

const (
	GetNpaRulesIDAccessMethodClient     GetNpaRulesIDAccessMethod = "Client"
	GetNpaRulesIDAccessMethodClientless GetNpaRulesIDAccessMethod = "Clientless"
)

func (e GetNpaRulesIDAccessMethod) ToPointer() *GetNpaRulesIDAccessMethod {
	return &e
}

func (e *GetNpaRulesIDAccessMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		fallthrough
	case "Clientless":
		*e = GetNpaRulesIDAccessMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNpaRulesIDAccessMethod: %v", v)
	}
}

type GetNpaRulesIDActions string

const (
	GetNpaRulesIDActionsAllow       GetNpaRulesIDActions = "allow"
	GetNpaRulesIDActionsBlock       GetNpaRulesIDActions = "block"
	GetNpaRulesIDActionsAlert       GetNpaRulesIDActions = "alert"
	GetNpaRulesIDActionsQuanrantine GetNpaRulesIDActions = "quanrantine"
	GetNpaRulesIDActionsBypass      GetNpaRulesIDActions = "bypass"
)

func (e GetNpaRulesIDActions) ToPointer() *GetNpaRulesIDActions {
	return &e
}

func (e *GetNpaRulesIDActions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		fallthrough
	case "alert":
		fallthrough
	case "quanrantine":
		fallthrough
	case "bypass":
		*e = GetNpaRulesIDActions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNpaRulesIDActions: %v", v)
	}
}

type GetNpaRulesIDDlpActions struct {
	Actions    []GetNpaRulesIDActions `json:"actions,omitempty"`
	DlpProfile *string                `json:"dlp_profile,omitempty"`
}

func (o *GetNpaRulesIDDlpActions) GetActions() []GetNpaRulesIDActions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *GetNpaRulesIDDlpActions) GetDlpProfile() *string {
	if o == nil {
		return nil
	}
	return o.DlpProfile
}

type GetNpaRulesIDActionName string

const (
	GetNpaRulesIDActionNameAllow GetNpaRulesIDActionName = "allow"
	GetNpaRulesIDActionNameBlock GetNpaRulesIDActionName = "block"
)

func (e GetNpaRulesIDActionName) ToPointer() *GetNpaRulesIDActionName {
	return &e
}

func (e *GetNpaRulesIDActionName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = GetNpaRulesIDActionName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNpaRulesIDActionName: %v", v)
	}
}

type GetNpaRulesIDMatchCriteriaAction struct {
	ActionName *GetNpaRulesIDActionName `json:"action_name,omitempty"`
}

func (o *GetNpaRulesIDMatchCriteriaAction) GetActionName() *GetNpaRulesIDActionName {
	if o == nil {
		return nil
	}
	return o.ActionName
}

type GetNpaRulesIDPolicyType string

const (
	GetNpaRulesIDPolicyTypePrivateApp GetNpaRulesIDPolicyType = "private-app"
)

func (e GetNpaRulesIDPolicyType) ToPointer() *GetNpaRulesIDPolicyType {
	return &e
}

func (e *GetNpaRulesIDPolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-app":
		*e = GetNpaRulesIDPolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNpaRulesIDPolicyType: %v", v)
	}
}

type GetNpaRulesIDActivity string

const (
	GetNpaRulesIDActivityAny GetNpaRulesIDActivity = "any"
)

func (e GetNpaRulesIDActivity) ToPointer() *GetNpaRulesIDActivity {
	return &e
}

func (e *GetNpaRulesIDActivity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		*e = GetNpaRulesIDActivity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNpaRulesIDActivity: %v", v)
	}
}

type GetNpaRulesIDActivities struct {
	Activity          *GetNpaRulesIDActivity `json:"activity,omitempty"`
	ListOfConstraints []string               `json:"list_of_constraints,omitempty"`
}

func (o *GetNpaRulesIDActivities) GetActivity() *GetNpaRulesIDActivity {
	if o == nil {
		return nil
	}
	return o.Activity
}

func (o *GetNpaRulesIDActivities) GetListOfConstraints() []string {
	if o == nil {
		return nil
	}
	return o.ListOfConstraints
}

type GetNpaRulesIDPrivateAppsWithActivities struct {
	Activities []GetNpaRulesIDActivities `json:"activities,omitempty"`
	AppName    *string                   `json:"appName,omitempty"`
}

func (o *GetNpaRulesIDPrivateAppsWithActivities) GetActivities() []GetNpaRulesIDActivities {
	if o == nil {
		return nil
	}
	return o.Activities
}

func (o *GetNpaRulesIDPrivateAppsWithActivities) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

type GetNpaRulesIDUserType string

const (
	GetNpaRulesIDUserTypeUser GetNpaRulesIDUserType = "user"
)

func (e GetNpaRulesIDUserType) ToPointer() *GetNpaRulesIDUserType {
	return &e
}

func (e *GetNpaRulesIDUserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = GetNpaRulesIDUserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNpaRulesIDUserType: %v", v)
	}
}

type GetNpaRulesIDRuleData struct {
	AccessMethod              *GetNpaRulesIDAccessMethod               `json:"access_method,omitempty"`
	BNegateNetLocation        *bool                                    `json:"b_negateNetLocation,omitempty"`
	BNegateSrcCountries       *bool                                    `json:"b_negateSrcCountries,omitempty"`
	Classification            *string                                  `json:"classification,omitempty"`
	DlpActions                []GetNpaRulesIDDlpActions                `json:"dlp_actions,omitempty"`
	ExternalDlp               *bool                                    `json:"external_dlp,omitempty"`
	JSONVersion               *int64                                   `json:"json_version,omitempty"`
	MatchCriteriaAction       *GetNpaRulesIDMatchCriteriaAction        `json:"match_criteria_action,omitempty"`
	NetLocationObj            []string                                 `json:"net_location_obj,omitempty"`
	OrganizationUnits         []string                                 `json:"organization_units,omitempty"`
	PolicyType                *GetNpaRulesIDPolicyType                 `json:"policy_type,omitempty"`
	PrivateAppIds             []string                                 `json:"privateAppIds,omitempty"`
	PrivateAppTagIds          []string                                 `json:"privateAppTagIds,omitempty"`
	PrivateAppTags            []string                                 `json:"privateAppTags,omitempty"`
	PrivateApps               []string                                 `json:"privateApps,omitempty"`
	PrivateAppsWithActivities []GetNpaRulesIDPrivateAppsWithActivities `json:"privateAppsWithActivities,omitempty"`
	ShowDlpProfileActionTable *bool                                    `json:"show_dlp_profile_action_table,omitempty"`
	SrcCountries              []string                                 `json:"srcCountries,omitempty"`
	UserGroups                []string                                 `json:"userGroups,omitempty"`
	UserType                  *GetNpaRulesIDUserType                   `json:"userType,omitempty"`
	Users                     []string                                 `json:"users,omitempty"`
	Version                   *int64                                   `json:"version,omitempty"`
}

func (o *GetNpaRulesIDRuleData) GetAccessMethod() *GetNpaRulesIDAccessMethod {
	if o == nil {
		return nil
	}
	return o.AccessMethod
}

func (o *GetNpaRulesIDRuleData) GetBNegateNetLocation() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateNetLocation
}

func (o *GetNpaRulesIDRuleData) GetBNegateSrcCountries() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateSrcCountries
}

func (o *GetNpaRulesIDRuleData) GetClassification() *string {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *GetNpaRulesIDRuleData) GetDlpActions() []GetNpaRulesIDDlpActions {
	if o == nil {
		return nil
	}
	return o.DlpActions
}

func (o *GetNpaRulesIDRuleData) GetExternalDlp() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalDlp
}

func (o *GetNpaRulesIDRuleData) GetJSONVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.JSONVersion
}

func (o *GetNpaRulesIDRuleData) GetMatchCriteriaAction() *GetNpaRulesIDMatchCriteriaAction {
	if o == nil {
		return nil
	}
	return o.MatchCriteriaAction
}

func (o *GetNpaRulesIDRuleData) GetNetLocationObj() []string {
	if o == nil {
		return nil
	}
	return o.NetLocationObj
}

func (o *GetNpaRulesIDRuleData) GetOrganizationUnits() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationUnits
}

func (o *GetNpaRulesIDRuleData) GetPolicyType() *GetNpaRulesIDPolicyType {
	if o == nil {
		return nil
	}
	return o.PolicyType
}

func (o *GetNpaRulesIDRuleData) GetPrivateAppIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppIds
}

func (o *GetNpaRulesIDRuleData) GetPrivateAppTagIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTagIds
}

func (o *GetNpaRulesIDRuleData) GetPrivateAppTags() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTags
}

func (o *GetNpaRulesIDRuleData) GetPrivateApps() []string {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

func (o *GetNpaRulesIDRuleData) GetPrivateAppsWithActivities() []GetNpaRulesIDPrivateAppsWithActivities {
	if o == nil {
		return nil
	}
	return o.PrivateAppsWithActivities
}

func (o *GetNpaRulesIDRuleData) GetShowDlpProfileActionTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowDlpProfileActionTable
}

func (o *GetNpaRulesIDRuleData) GetSrcCountries() []string {
	if o == nil {
		return nil
	}
	return o.SrcCountries
}

func (o *GetNpaRulesIDRuleData) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *GetNpaRulesIDRuleData) GetUserType() *GetNpaRulesIDUserType {
	if o == nil {
		return nil
	}
	return o.UserType
}

func (o *GetNpaRulesIDRuleData) GetUsers() []string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *GetNpaRulesIDRuleData) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}

type GetNpaRulesIDData struct {
	GroupID  *int64                 `json:"group_id,omitempty"`
	RuleData *GetNpaRulesIDRuleData `json:"rule_data,omitempty"`
	RuleID   *int64                 `json:"rule_id,omitempty"`
	RuleName *string                `json:"rule_name,omitempty"`
}

func (o *GetNpaRulesIDData) GetGroupID() *int64 {
	if o == nil {
		return nil
	}
	return o.GroupID
}

func (o *GetNpaRulesIDData) GetRuleData() *GetNpaRulesIDRuleData {
	if o == nil {
		return nil
	}
	return o.RuleData
}

func (o *GetNpaRulesIDData) GetRuleID() *int64 {
	if o == nil {
		return nil
	}
	return o.RuleID
}

func (o *GetNpaRulesIDData) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

type GetNpaRulesIDStatus string

const (
	GetNpaRulesIDStatusSuccess GetNpaRulesIDStatus = "success"
	GetNpaRulesIDStatusError   GetNpaRulesIDStatus = "error"
)

func (e GetNpaRulesIDStatus) ToPointer() *GetNpaRulesIDStatus {
	return &e
}

func (e *GetNpaRulesIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "error":
		*e = GetNpaRulesIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNpaRulesIDStatus: %v", v)
	}
}

// GetNpaRulesIDResponseBody - successful operation
type GetNpaRulesIDResponseBody struct {
	Data   *GetNpaRulesIDData   `json:"data,omitempty"`
	Status *GetNpaRulesIDStatus `json:"status,omitempty"`
}

func (o *GetNpaRulesIDResponseBody) GetData() *GetNpaRulesIDData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *GetNpaRulesIDResponseBody) GetStatus() *GetNpaRulesIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type GetNpaRulesIDResponse struct {
	// successful operation
	TwoHundredApplicationJSONObject *GetNpaRulesIDResponseBody
	// Invalid request
	FourHundredApplicationJSONObject *GetNpaRulesIDResponseResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetNpaRulesIDResponse) GetTwoHundredApplicationJSONObject() *GetNpaRulesIDResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *GetNpaRulesIDResponse) GetFourHundredApplicationJSONObject() *GetNpaRulesIDResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *GetNpaRulesIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetNpaRulesIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetNpaRulesIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
