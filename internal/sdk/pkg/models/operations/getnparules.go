// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNpaRulesRequest struct {
	// Return values only from specified fields
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Query string based on query operaters
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// Max number of policies to retrieve. Default will be all policies.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// The offset of the first policy in the list to retrieve.
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
	// Sort retrieved policies by specified field. Default is policy id
	Sortby *string `queryParam:"style=form,explode=true,name=sortby"`
	// Sort in either asc or desc order. The default is asc order
	Sortorder *string `queryParam:"style=form,explode=true,name=sortorder"`
}

func (o *GetNpaRulesRequest) GetFields() *string {
	if o == nil {
		return nil
	}
	return o.Fields
}

func (o *GetNpaRulesRequest) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *GetNpaRulesRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetNpaRulesRequest) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetNpaRulesRequest) GetSortby() *string {
	if o == nil {
		return nil
	}
	return o.Sortby
}

func (o *GetNpaRulesRequest) GetSortorder() *string {
	if o == nil {
		return nil
	}
	return o.Sortorder
}

// GetNpaRulesResponseBody - Invalid request
type GetNpaRulesResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *GetNpaRulesResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetNpaRulesResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type GetNpaRulesAccessMethod string

const (
	GetNpaRulesAccessMethodClient     GetNpaRulesAccessMethod = "Client"
	GetNpaRulesAccessMethodClientless GetNpaRulesAccessMethod = "Clientless"
)

func (e GetNpaRulesAccessMethod) ToPointer() *GetNpaRulesAccessMethod {
	return &e
}

func (e *GetNpaRulesAccessMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		fallthrough
	case "Clientless":
		*e = GetNpaRulesAccessMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNpaRulesAccessMethod: %v", v)
	}
}

type GetNpaRulesActions string

const (
	GetNpaRulesActionsAllow       GetNpaRulesActions = "allow"
	GetNpaRulesActionsBlock       GetNpaRulesActions = "block"
	GetNpaRulesActionsAlert       GetNpaRulesActions = "alert"
	GetNpaRulesActionsQuanrantine GetNpaRulesActions = "quanrantine"
	GetNpaRulesActionsBypass      GetNpaRulesActions = "bypass"
)

func (e GetNpaRulesActions) ToPointer() *GetNpaRulesActions {
	return &e
}

func (e *GetNpaRulesActions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		fallthrough
	case "alert":
		fallthrough
	case "quanrantine":
		fallthrough
	case "bypass":
		*e = GetNpaRulesActions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNpaRulesActions: %v", v)
	}
}

type GetNpaRulesDlpActions struct {
	Actions    []GetNpaRulesActions `json:"actions,omitempty"`
	DlpProfile *string              `json:"dlp_profile,omitempty"`
}

func (o *GetNpaRulesDlpActions) GetActions() []GetNpaRulesActions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *GetNpaRulesDlpActions) GetDlpProfile() *string {
	if o == nil {
		return nil
	}
	return o.DlpProfile
}

type GetNpaRulesActionName string

const (
	GetNpaRulesActionNameAllow GetNpaRulesActionName = "allow"
	GetNpaRulesActionNameBlock GetNpaRulesActionName = "block"
)

func (e GetNpaRulesActionName) ToPointer() *GetNpaRulesActionName {
	return &e
}

func (e *GetNpaRulesActionName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = GetNpaRulesActionName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNpaRulesActionName: %v", v)
	}
}

type GetNpaRulesMatchCriteriaAction struct {
	ActionName *GetNpaRulesActionName `json:"action_name,omitempty"`
}

func (o *GetNpaRulesMatchCriteriaAction) GetActionName() *GetNpaRulesActionName {
	if o == nil {
		return nil
	}
	return o.ActionName
}

type GetNpaRulesPolicyType string

const (
	GetNpaRulesPolicyTypePrivateApp GetNpaRulesPolicyType = "private-app"
)

func (e GetNpaRulesPolicyType) ToPointer() *GetNpaRulesPolicyType {
	return &e
}

func (e *GetNpaRulesPolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-app":
		*e = GetNpaRulesPolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNpaRulesPolicyType: %v", v)
	}
}

type GetNpaRulesActivity string

const (
	GetNpaRulesActivityAny GetNpaRulesActivity = "any"
)

func (e GetNpaRulesActivity) ToPointer() *GetNpaRulesActivity {
	return &e
}

func (e *GetNpaRulesActivity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		*e = GetNpaRulesActivity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNpaRulesActivity: %v", v)
	}
}

type GetNpaRulesActivities struct {
	Activity          *GetNpaRulesActivity `json:"activity,omitempty"`
	ListOfConstraints []string             `json:"list_of_constraints,omitempty"`
}

func (o *GetNpaRulesActivities) GetActivity() *GetNpaRulesActivity {
	if o == nil {
		return nil
	}
	return o.Activity
}

func (o *GetNpaRulesActivities) GetListOfConstraints() []string {
	if o == nil {
		return nil
	}
	return o.ListOfConstraints
}

type GetNpaRulesPrivateAppsWithActivities struct {
	Activities []GetNpaRulesActivities `json:"activities,omitempty"`
	AppName    *string                 `json:"appName,omitempty"`
}

func (o *GetNpaRulesPrivateAppsWithActivities) GetActivities() []GetNpaRulesActivities {
	if o == nil {
		return nil
	}
	return o.Activities
}

func (o *GetNpaRulesPrivateAppsWithActivities) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

type GetNpaRulesUserType string

const (
	GetNpaRulesUserTypeUser GetNpaRulesUserType = "user"
)

func (e GetNpaRulesUserType) ToPointer() *GetNpaRulesUserType {
	return &e
}

func (e *GetNpaRulesUserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = GetNpaRulesUserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNpaRulesUserType: %v", v)
	}
}

type GetNpaRulesRuleData struct {
	AccessMethod              *GetNpaRulesAccessMethod               `json:"access_method,omitempty"`
	BNegateNetLocation        *bool                                  `json:"b_negateNetLocation,omitempty"`
	BNegateSrcCountries       *bool                                  `json:"b_negateSrcCountries,omitempty"`
	Classification            *string                                `json:"classification,omitempty"`
	DlpActions                []GetNpaRulesDlpActions                `json:"dlp_actions,omitempty"`
	ExternalDlp               *bool                                  `json:"external_dlp,omitempty"`
	JSONVersion               *int64                                 `json:"json_version,omitempty"`
	MatchCriteriaAction       *GetNpaRulesMatchCriteriaAction        `json:"match_criteria_action,omitempty"`
	NetLocationObj            []string                               `json:"net_location_obj,omitempty"`
	OrganizationUnits         []string                               `json:"organization_units,omitempty"`
	PolicyType                *GetNpaRulesPolicyType                 `json:"policy_type,omitempty"`
	PrivateAppIds             []string                               `json:"privateAppIds,omitempty"`
	PrivateAppTagIds          []string                               `json:"privateAppTagIds,omitempty"`
	PrivateAppTags            []string                               `json:"privateAppTags,omitempty"`
	PrivateApps               []string                               `json:"privateApps,omitempty"`
	PrivateAppsWithActivities []GetNpaRulesPrivateAppsWithActivities `json:"privateAppsWithActivities,omitempty"`
	ShowDlpProfileActionTable *bool                                  `json:"show_dlp_profile_action_table,omitempty"`
	SrcCountries              []string                               `json:"srcCountries,omitempty"`
	UserGroups                []string                               `json:"userGroups,omitempty"`
	UserType                  *GetNpaRulesUserType                   `json:"userType,omitempty"`
	Users                     []string                               `json:"users,omitempty"`
	Version                   *int64                                 `json:"version,omitempty"`
}

func (o *GetNpaRulesRuleData) GetAccessMethod() *GetNpaRulesAccessMethod {
	if o == nil {
		return nil
	}
	return o.AccessMethod
}

func (o *GetNpaRulesRuleData) GetBNegateNetLocation() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateNetLocation
}

func (o *GetNpaRulesRuleData) GetBNegateSrcCountries() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateSrcCountries
}

func (o *GetNpaRulesRuleData) GetClassification() *string {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *GetNpaRulesRuleData) GetDlpActions() []GetNpaRulesDlpActions {
	if o == nil {
		return nil
	}
	return o.DlpActions
}

func (o *GetNpaRulesRuleData) GetExternalDlp() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalDlp
}

func (o *GetNpaRulesRuleData) GetJSONVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.JSONVersion
}

func (o *GetNpaRulesRuleData) GetMatchCriteriaAction() *GetNpaRulesMatchCriteriaAction {
	if o == nil {
		return nil
	}
	return o.MatchCriteriaAction
}

func (o *GetNpaRulesRuleData) GetNetLocationObj() []string {
	if o == nil {
		return nil
	}
	return o.NetLocationObj
}

func (o *GetNpaRulesRuleData) GetOrganizationUnits() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationUnits
}

func (o *GetNpaRulesRuleData) GetPolicyType() *GetNpaRulesPolicyType {
	if o == nil {
		return nil
	}
	return o.PolicyType
}

func (o *GetNpaRulesRuleData) GetPrivateAppIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppIds
}

func (o *GetNpaRulesRuleData) GetPrivateAppTagIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTagIds
}

func (o *GetNpaRulesRuleData) GetPrivateAppTags() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTags
}

func (o *GetNpaRulesRuleData) GetPrivateApps() []string {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

func (o *GetNpaRulesRuleData) GetPrivateAppsWithActivities() []GetNpaRulesPrivateAppsWithActivities {
	if o == nil {
		return nil
	}
	return o.PrivateAppsWithActivities
}

func (o *GetNpaRulesRuleData) GetShowDlpProfileActionTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowDlpProfileActionTable
}

func (o *GetNpaRulesRuleData) GetSrcCountries() []string {
	if o == nil {
		return nil
	}
	return o.SrcCountries
}

func (o *GetNpaRulesRuleData) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *GetNpaRulesRuleData) GetUserType() *GetNpaRulesUserType {
	if o == nil {
		return nil
	}
	return o.UserType
}

func (o *GetNpaRulesRuleData) GetUsers() []string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *GetNpaRulesRuleData) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}

type GetNpaRulesResponseResponseBody struct {
	GroupID  *int64               `json:"group_id,omitempty"`
	RuleData *GetNpaRulesRuleData `json:"rule_data,omitempty"`
	RuleID   *int64               `json:"rule_id,omitempty"`
	RuleName *string              `json:"rule_name,omitempty"`
}

func (o *GetNpaRulesResponseResponseBody) GetGroupID() *int64 {
	if o == nil {
		return nil
	}
	return o.GroupID
}

func (o *GetNpaRulesResponseResponseBody) GetRuleData() *GetNpaRulesRuleData {
	if o == nil {
		return nil
	}
	return o.RuleData
}

func (o *GetNpaRulesResponseResponseBody) GetRuleID() *int64 {
	if o == nil {
		return nil
	}
	return o.RuleID
}

func (o *GetNpaRulesResponseResponseBody) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

type GetNpaRulesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// successful operation
	Classes []GetNpaRulesResponseResponseBody
	// Invalid request
	Object *GetNpaRulesResponseBody
}

func (o *GetNpaRulesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetNpaRulesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetNpaRulesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetNpaRulesResponse) GetClasses() []GetNpaRulesResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.Classes
}

func (o *GetNpaRulesResponse) GetObject() *GetNpaRulesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
