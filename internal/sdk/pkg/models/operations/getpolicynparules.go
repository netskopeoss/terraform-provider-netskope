// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetPolicyNpaRulesRequest struct {
	// Return values only from specified fields
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Query string based on query operaters
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// Max number of policies to retrieve. Default will be all policies.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// The offset of the first policy in the list to retrieve.
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
	// Sort retrieved policies by specified field. Default is policy id
	Sortby *string `queryParam:"style=form,explode=true,name=sortby"`
	// Sort in either asc or desc order. The default is asc order
	Sortorder *string `queryParam:"style=form,explode=true,name=sortorder"`
}

func (o *GetPolicyNpaRulesRequest) GetFields() *string {
	if o == nil {
		return nil
	}
	return o.Fields
}

func (o *GetPolicyNpaRulesRequest) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *GetPolicyNpaRulesRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetPolicyNpaRulesRequest) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetPolicyNpaRulesRequest) GetSortby() *string {
	if o == nil {
		return nil
	}
	return o.Sortby
}

func (o *GetPolicyNpaRulesRequest) GetSortorder() *string {
	if o == nil {
		return nil
	}
	return o.Sortorder
}

// GetPolicyNpaRulesResponseResponseBody - Invalid request
type GetPolicyNpaRulesResponseResponseBody struct {
	Result *string `json:"result,omitempty"`
	Status *int64  `json:"status,omitempty"`
}

func (o *GetPolicyNpaRulesResponseResponseBody) GetResult() *string {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetPolicyNpaRulesResponseResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type GetPolicyNpaRulesAccessMethod string

const (
	GetPolicyNpaRulesAccessMethodClient     GetPolicyNpaRulesAccessMethod = "Client"
	GetPolicyNpaRulesAccessMethodClientless GetPolicyNpaRulesAccessMethod = "Clientless"
)

func (e GetPolicyNpaRulesAccessMethod) ToPointer() *GetPolicyNpaRulesAccessMethod {
	return &e
}

func (e *GetPolicyNpaRulesAccessMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		fallthrough
	case "Clientless":
		*e = GetPolicyNpaRulesAccessMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPolicyNpaRulesAccessMethod: %v", v)
	}
}

type GetPolicyNpaRulesActions string

const (
	GetPolicyNpaRulesActionsAllow       GetPolicyNpaRulesActions = "allow"
	GetPolicyNpaRulesActionsBlock       GetPolicyNpaRulesActions = "block"
	GetPolicyNpaRulesActionsAlert       GetPolicyNpaRulesActions = "alert"
	GetPolicyNpaRulesActionsQuanrantine GetPolicyNpaRulesActions = "quanrantine"
	GetPolicyNpaRulesActionsBypass      GetPolicyNpaRulesActions = "bypass"
)

func (e GetPolicyNpaRulesActions) ToPointer() *GetPolicyNpaRulesActions {
	return &e
}

func (e *GetPolicyNpaRulesActions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		fallthrough
	case "alert":
		fallthrough
	case "quanrantine":
		fallthrough
	case "bypass":
		*e = GetPolicyNpaRulesActions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPolicyNpaRulesActions: %v", v)
	}
}

type GetPolicyNpaRulesDlpActions struct {
	Actions    []GetPolicyNpaRulesActions `json:"actions,omitempty"`
	DlpProfile *string                    `json:"dlp_profile,omitempty"`
}

func (o *GetPolicyNpaRulesDlpActions) GetActions() []GetPolicyNpaRulesActions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *GetPolicyNpaRulesDlpActions) GetDlpProfile() *string {
	if o == nil {
		return nil
	}
	return o.DlpProfile
}

type GetPolicyNpaRulesActionName string

const (
	GetPolicyNpaRulesActionNameAllow GetPolicyNpaRulesActionName = "allow"
	GetPolicyNpaRulesActionNameBlock GetPolicyNpaRulesActionName = "block"
)

func (e GetPolicyNpaRulesActionName) ToPointer() *GetPolicyNpaRulesActionName {
	return &e
}

func (e *GetPolicyNpaRulesActionName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = GetPolicyNpaRulesActionName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPolicyNpaRulesActionName: %v", v)
	}
}

type GetPolicyNpaRulesMatchCriteriaAction struct {
	ActionName *GetPolicyNpaRulesActionName `json:"action_name,omitempty"`
}

func (o *GetPolicyNpaRulesMatchCriteriaAction) GetActionName() *GetPolicyNpaRulesActionName {
	if o == nil {
		return nil
	}
	return o.ActionName
}

type GetPolicyNpaRulesPolicyType string

const (
	GetPolicyNpaRulesPolicyTypePrivateApp GetPolicyNpaRulesPolicyType = "private-app"
)

func (e GetPolicyNpaRulesPolicyType) ToPointer() *GetPolicyNpaRulesPolicyType {
	return &e
}

func (e *GetPolicyNpaRulesPolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-app":
		*e = GetPolicyNpaRulesPolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPolicyNpaRulesPolicyType: %v", v)
	}
}

type GetPolicyNpaRulesActivity string

const (
	GetPolicyNpaRulesActivityAny GetPolicyNpaRulesActivity = "any"
)

func (e GetPolicyNpaRulesActivity) ToPointer() *GetPolicyNpaRulesActivity {
	return &e
}

func (e *GetPolicyNpaRulesActivity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		*e = GetPolicyNpaRulesActivity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPolicyNpaRulesActivity: %v", v)
	}
}

type GetPolicyNpaRulesActivities struct {
	Activity          *GetPolicyNpaRulesActivity `json:"activity,omitempty"`
	ListOfConstraints []string                   `json:"list_of_constraints,omitempty"`
}

func (o *GetPolicyNpaRulesActivities) GetActivity() *GetPolicyNpaRulesActivity {
	if o == nil {
		return nil
	}
	return o.Activity
}

func (o *GetPolicyNpaRulesActivities) GetListOfConstraints() []string {
	if o == nil {
		return nil
	}
	return o.ListOfConstraints
}

type GetPolicyNpaRulesPrivateAppsWithActivities struct {
	Activities []GetPolicyNpaRulesActivities `json:"activities,omitempty"`
	AppName    *string                       `json:"appName,omitempty"`
}

func (o *GetPolicyNpaRulesPrivateAppsWithActivities) GetActivities() []GetPolicyNpaRulesActivities {
	if o == nil {
		return nil
	}
	return o.Activities
}

func (o *GetPolicyNpaRulesPrivateAppsWithActivities) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

type GetPolicyNpaRulesUserType string

const (
	GetPolicyNpaRulesUserTypeUser GetPolicyNpaRulesUserType = "user"
)

func (e GetPolicyNpaRulesUserType) ToPointer() *GetPolicyNpaRulesUserType {
	return &e
}

func (e *GetPolicyNpaRulesUserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = GetPolicyNpaRulesUserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPolicyNpaRulesUserType: %v", v)
	}
}

type GetPolicyNpaRulesRuleData struct {
	AccessMethod              *GetPolicyNpaRulesAccessMethod               `json:"access_method,omitempty"`
	BNegateNetLocation        *bool                                        `json:"b_negateNetLocation,omitempty"`
	BNegateSrcCountries       *bool                                        `json:"b_negateSrcCountries,omitempty"`
	Classification            *string                                      `json:"classification,omitempty"`
	DlpActions                []GetPolicyNpaRulesDlpActions                `json:"dlp_actions,omitempty"`
	ExternalDlp               *bool                                        `json:"external_dlp,omitempty"`
	JSONVersion               *int64                                       `json:"json_version,omitempty"`
	MatchCriteriaAction       *GetPolicyNpaRulesMatchCriteriaAction        `json:"match_criteria_action,omitempty"`
	NetLocationObj            []string                                     `json:"net_location_obj,omitempty"`
	OrganizationUnits         []string                                     `json:"organization_units,omitempty"`
	PolicyType                *GetPolicyNpaRulesPolicyType                 `json:"policy_type,omitempty"`
	PrivateAppIds             []string                                     `json:"privateAppIds,omitempty"`
	PrivateAppTagIds          []string                                     `json:"privateAppTagIds,omitempty"`
	PrivateAppTags            []string                                     `json:"privateAppTags,omitempty"`
	PrivateApps               []string                                     `json:"privateApps,omitempty"`
	PrivateAppsWithActivities []GetPolicyNpaRulesPrivateAppsWithActivities `json:"privateAppsWithActivities,omitempty"`
	ShowDlpProfileActionTable *bool                                        `json:"show_dlp_profile_action_table,omitempty"`
	SrcCountries              []string                                     `json:"srcCountries,omitempty"`
	UserGroups                []string                                     `json:"userGroups,omitempty"`
	UserType                  *GetPolicyNpaRulesUserType                   `json:"userType,omitempty"`
	Users                     []string                                     `json:"users,omitempty"`
	Version                   *int64                                       `json:"version,omitempty"`
}

func (o *GetPolicyNpaRulesRuleData) GetAccessMethod() *GetPolicyNpaRulesAccessMethod {
	if o == nil {
		return nil
	}
	return o.AccessMethod
}

func (o *GetPolicyNpaRulesRuleData) GetBNegateNetLocation() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateNetLocation
}

func (o *GetPolicyNpaRulesRuleData) GetBNegateSrcCountries() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateSrcCountries
}

func (o *GetPolicyNpaRulesRuleData) GetClassification() *string {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *GetPolicyNpaRulesRuleData) GetDlpActions() []GetPolicyNpaRulesDlpActions {
	if o == nil {
		return nil
	}
	return o.DlpActions
}

func (o *GetPolicyNpaRulesRuleData) GetExternalDlp() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalDlp
}

func (o *GetPolicyNpaRulesRuleData) GetJSONVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.JSONVersion
}

func (o *GetPolicyNpaRulesRuleData) GetMatchCriteriaAction() *GetPolicyNpaRulesMatchCriteriaAction {
	if o == nil {
		return nil
	}
	return o.MatchCriteriaAction
}

func (o *GetPolicyNpaRulesRuleData) GetNetLocationObj() []string {
	if o == nil {
		return nil
	}
	return o.NetLocationObj
}

func (o *GetPolicyNpaRulesRuleData) GetOrganizationUnits() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationUnits
}

func (o *GetPolicyNpaRulesRuleData) GetPolicyType() *GetPolicyNpaRulesPolicyType {
	if o == nil {
		return nil
	}
	return o.PolicyType
}

func (o *GetPolicyNpaRulesRuleData) GetPrivateAppIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppIds
}

func (o *GetPolicyNpaRulesRuleData) GetPrivateAppTagIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTagIds
}

func (o *GetPolicyNpaRulesRuleData) GetPrivateAppTags() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTags
}

func (o *GetPolicyNpaRulesRuleData) GetPrivateApps() []string {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

func (o *GetPolicyNpaRulesRuleData) GetPrivateAppsWithActivities() []GetPolicyNpaRulesPrivateAppsWithActivities {
	if o == nil {
		return nil
	}
	return o.PrivateAppsWithActivities
}

func (o *GetPolicyNpaRulesRuleData) GetShowDlpProfileActionTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowDlpProfileActionTable
}

func (o *GetPolicyNpaRulesRuleData) GetSrcCountries() []string {
	if o == nil {
		return nil
	}
	return o.SrcCountries
}

func (o *GetPolicyNpaRulesRuleData) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *GetPolicyNpaRulesRuleData) GetUserType() *GetPolicyNpaRulesUserType {
	if o == nil {
		return nil
	}
	return o.UserType
}

func (o *GetPolicyNpaRulesRuleData) GetUsers() []string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *GetPolicyNpaRulesRuleData) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}

type GetPolicyNpaRulesData struct {
	RuleData *GetPolicyNpaRulesRuleData `json:"rule_data,omitempty"`
	RuleID   *int64                     `json:"rule_id,omitempty"`
	RuleName *string                    `json:"rule_name,omitempty"`
}

func (o *GetPolicyNpaRulesData) GetRuleData() *GetPolicyNpaRulesRuleData {
	if o == nil {
		return nil
	}
	return o.RuleData
}

func (o *GetPolicyNpaRulesData) GetRuleID() *int64 {
	if o == nil {
		return nil
	}
	return o.RuleID
}

func (o *GetPolicyNpaRulesData) GetRuleName() *string {
	if o == nil {
		return nil
	}
	return o.RuleName
}

// GetPolicyNpaRulesResponseBody - successful operation
type GetPolicyNpaRulesResponseBody struct {
	Data []GetPolicyNpaRulesData `json:"data,omitempty"`
}

func (o *GetPolicyNpaRulesResponseBody) GetData() []GetPolicyNpaRulesData {
	if o == nil {
		return nil
	}
	return o.Data
}

type GetPolicyNpaRulesResponse struct {
	// successful operation
	TwoHundredApplicationJSONObject *GetPolicyNpaRulesResponseBody
	// Invalid request
	FourHundredApplicationJSONObject *GetPolicyNpaRulesResponseResponseBody
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetPolicyNpaRulesResponse) GetTwoHundredApplicationJSONObject() *GetPolicyNpaRulesResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *GetPolicyNpaRulesResponse) GetFourHundredApplicationJSONObject() *GetPolicyNpaRulesResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *GetPolicyNpaRulesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetPolicyNpaRulesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetPolicyNpaRulesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
