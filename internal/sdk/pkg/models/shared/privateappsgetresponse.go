// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PrivateAppsGetResponseData struct {
	PrivateApps []interface{} `json:"private_apps,omitempty"`
}

func (o *PrivateAppsGetResponseData) GetPrivateApps() []interface{} {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

type Status string

const (
	StatusSuccess  Status = "success"
	StatusNotFound Status = "not found"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "not found":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type PrivateAppsGetResponse struct {
	Data   *PrivateAppsGetResponseData `json:"data,omitempty"`
	Status *Status                     `json:"status,omitempty"`
	Total  *int                        `json:"total,omitempty"`
}

func (o *PrivateAppsGetResponse) GetData() *PrivateAppsGetResponseData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *PrivateAppsGetResponse) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PrivateAppsGetResponse) GetTotal() *int {
	if o == nil {
		return nil
	}
	return o.Total
}
