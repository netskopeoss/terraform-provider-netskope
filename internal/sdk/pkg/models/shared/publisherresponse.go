// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PublisherResponseAssessment struct {
}

type PublisherResponseStatus string

const (
	PublisherResponseStatusConnected     PublisherResponseStatus = "connected"
	PublisherResponseStatusNotRegistered PublisherResponseStatus = "not registered"
)

func (e PublisherResponseStatus) ToPointer() *PublisherResponseStatus {
	return &e
}

func (e *PublisherResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "connected":
		fallthrough
	case "not registered":
		*e = PublisherResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublisherResponseStatus: %v", v)
	}
}

type PublisherResponse struct {
	Assessment                *PublisherResponseAssessment `json:"assessment,omitempty"`
	CommonName                *string                      `json:"common_name,omitempty"`
	Lbrokerconnect            *bool                        `json:"lbrokerconnect,omitempty"`
	PublisherID               *int                         `json:"publisher_id,omitempty"`
	PublisherName             *string                      `json:"publisher_name,omitempty"`
	PublisherUpgradeProfileID *int                         `json:"publisher_upgrade_profile_id,omitempty"`
	Registered                *bool                        `json:"registered,omitempty"`
	Status                    *PublisherResponseStatus     `json:"status,omitempty"`
	StitcherID                *int                         `json:"stitcher_id,omitempty"`
	Tags                      []TagItem                    `json:"tags,omitempty"`
}

func (o *PublisherResponse) GetAssessment() *PublisherResponseAssessment {
	if o == nil {
		return nil
	}
	return o.Assessment
}

func (o *PublisherResponse) GetCommonName() *string {
	if o == nil {
		return nil
	}
	return o.CommonName
}

func (o *PublisherResponse) GetLbrokerconnect() *bool {
	if o == nil {
		return nil
	}
	return o.Lbrokerconnect
}

func (o *PublisherResponse) GetPublisherID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherID
}

func (o *PublisherResponse) GetPublisherName() *string {
	if o == nil {
		return nil
	}
	return o.PublisherName
}

func (o *PublisherResponse) GetPublisherUpgradeProfileID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherUpgradeProfileID
}

func (o *PublisherResponse) GetRegistered() *bool {
	if o == nil {
		return nil
	}
	return o.Registered
}

func (o *PublisherResponse) GetStatus() *PublisherResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PublisherResponse) GetStitcherID() *int {
	if o == nil {
		return nil
	}
	return o.StitcherID
}

func (o *PublisherResponse) GetTags() []TagItem {
	if o == nil {
		return nil
	}
	return o.Tags
}
