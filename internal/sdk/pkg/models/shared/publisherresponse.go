// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PublisherResponseStatus string

const (
	PublisherResponseStatusConnected     PublisherResponseStatus = "connected"
	PublisherResponseStatusNotRegistered PublisherResponseStatus = "not registered"
)

func (e PublisherResponseStatus) ToPointer() *PublisherResponseStatus {
	return &e
}

func (e *PublisherResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "connected":
		fallthrough
	case "not registered":
		*e = PublisherResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublisherResponseStatus: %v", v)
	}
}

type PublisherResponseData struct {
	Assessment                interface{}              `json:"assessment,omitempty"`
	CommonName                *string                  `json:"common_name,omitempty"`
	ID                        *int                     `json:"id,omitempty"`
	Lbrokerconnect            *bool                    `json:"lbrokerconnect,omitempty"`
	Name                      *string                  `json:"name,omitempty"`
	PublisherUpgradeProfileID *int                     `json:"publisher_upgrade_profile_id,omitempty"`
	Registered                *bool                    `json:"registered,omitempty"`
	Status                    *PublisherResponseStatus `json:"status,omitempty"`
	StitcherID                *int                     `json:"stitcher_id,omitempty"`
	Tags                      []TagItem                `json:"tags,omitempty"`
}

func (o *PublisherResponseData) GetAssessment() interface{} {
	if o == nil {
		return nil
	}
	return o.Assessment
}

func (o *PublisherResponseData) GetCommonName() *string {
	if o == nil {
		return nil
	}
	return o.CommonName
}

func (o *PublisherResponseData) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PublisherResponseData) GetLbrokerconnect() *bool {
	if o == nil {
		return nil
	}
	return o.Lbrokerconnect
}

func (o *PublisherResponseData) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PublisherResponseData) GetPublisherUpgradeProfileID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherUpgradeProfileID
}

func (o *PublisherResponseData) GetRegistered() *bool {
	if o == nil {
		return nil
	}
	return o.Registered
}

func (o *PublisherResponseData) GetStatus() *PublisherResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PublisherResponseData) GetStitcherID() *int {
	if o == nil {
		return nil
	}
	return o.StitcherID
}

func (o *PublisherResponseData) GetTags() []TagItem {
	if o == nil {
		return nil
	}
	return o.Tags
}

type PublisherResponse struct {
	Data *PublisherResponseData `json:"data,omitempty"`
}

func (o *PublisherResponse) GetData() *PublisherResponseData {
	if o == nil {
		return nil
	}
	return o.Data
}
