// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ActionName string

const (
	ActionNameAllow ActionName = "allow"
	ActionNameBlock ActionName = "block"
)

func (e ActionName) ToPointer() *ActionName {
	return &e
}

func (e *ActionName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = ActionName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionName: %v", v)
	}
}

type MatchCriteriaAction struct {
	ActionName *ActionName `json:"action_name,omitempty"`
}

func (o *MatchCriteriaAction) GetActionName() *ActionName {
	if o == nil {
		return nil
	}
	return o.ActionName
}

type PolicyType string

const (
	PolicyTypePrivateApp PolicyType = "private-app"
)

func (e PolicyType) ToPointer() *PolicyType {
	return &e
}

func (e *PolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-app":
		*e = PolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyType: %v", v)
	}
}

type Activity string

const (
	ActivityAny Activity = "any"
)

func (e Activity) ToPointer() *Activity {
	return &e
}

func (e *Activity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		*e = Activity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Activity: %v", v)
	}
}

type Activities struct {
	Activity          *Activity `json:"activity,omitempty"`
	ListOfConstraints []string  `json:"list_of_constraints,omitempty"`
}

func (o *Activities) GetActivity() *Activity {
	if o == nil {
		return nil
	}
	return o.Activity
}

func (o *Activities) GetListOfConstraints() []string {
	if o == nil {
		return nil
	}
	return o.ListOfConstraints
}

type PrivateAppsWithActivities struct {
	Activities []Activities `json:"activities,omitempty"`
	AppName    *string      `json:"appName,omitempty"`
}

func (o *PrivateAppsWithActivities) GetActivities() []Activities {
	if o == nil {
		return nil
	}
	return o.Activities
}

func (o *PrivateAppsWithActivities) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

type UserType string

const (
	UserTypeUser UserType = "user"
)

func (e UserType) ToPointer() *UserType {
	return &e
}

func (e *UserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = UserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserType: %v", v)
	}
}

type NpaPolicyRuleData struct {
	AccessMethod              []string                    `json:"access_method,omitempty"`
	BNegateNetLocation        *bool                       `json:"b_negateNetLocation,omitempty"`
	BNegateSrcCountries       *bool                       `json:"b_negateSrcCountries,omitempty"`
	Classification            *string                     `json:"classification,omitempty"`
	DlpActions                []NpaPolicyRuleDlp          `json:"dlp_actions,omitempty"`
	ExternalDlp               *bool                       `json:"external_dlp,omitempty"`
	JSONVersion               *int64                      `json:"json_version,omitempty"`
	MatchCriteriaAction       *MatchCriteriaAction        `json:"match_criteria_action,omitempty"`
	NetLocationObj            []string                    `json:"net_location_obj,omitempty"`
	OrganizationUnits         []string                    `json:"organization_units,omitempty"`
	PolicyType                *PolicyType                 `json:"policy_type,omitempty"`
	PrivateAppIds             []string                    `json:"privateAppIds,omitempty"`
	PrivateAppTagIds          []string                    `json:"privateAppTagIds,omitempty"`
	PrivateAppTags            []string                    `json:"privateAppTags,omitempty"`
	PrivateApps               []string                    `json:"privateApps,omitempty"`
	PrivateAppsWithActivities []PrivateAppsWithActivities `json:"privateAppsWithActivities,omitempty"`
	ShowDlpProfileActionTable *bool                       `json:"show_dlp_profile_action_table,omitempty"`
	SrcCountries              []string                    `json:"srcCountries,omitempty"`
	UserGroups                []string                    `json:"userGroups,omitempty"`
	UserType                  *UserType                   `json:"userType,omitempty"`
	Users                     []string                    `json:"users,omitempty"`
	Version                   *int64                      `json:"version,omitempty"`
}

func (o *NpaPolicyRuleData) GetAccessMethod() []string {
	if o == nil {
		return nil
	}
	return o.AccessMethod
}

func (o *NpaPolicyRuleData) GetBNegateNetLocation() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateNetLocation
}

func (o *NpaPolicyRuleData) GetBNegateSrcCountries() *bool {
	if o == nil {
		return nil
	}
	return o.BNegateSrcCountries
}

func (o *NpaPolicyRuleData) GetClassification() *string {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *NpaPolicyRuleData) GetDlpActions() []NpaPolicyRuleDlp {
	if o == nil {
		return nil
	}
	return o.DlpActions
}

func (o *NpaPolicyRuleData) GetExternalDlp() *bool {
	if o == nil {
		return nil
	}
	return o.ExternalDlp
}

func (o *NpaPolicyRuleData) GetJSONVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.JSONVersion
}

func (o *NpaPolicyRuleData) GetMatchCriteriaAction() *MatchCriteriaAction {
	if o == nil {
		return nil
	}
	return o.MatchCriteriaAction
}

func (o *NpaPolicyRuleData) GetNetLocationObj() []string {
	if o == nil {
		return nil
	}
	return o.NetLocationObj
}

func (o *NpaPolicyRuleData) GetOrganizationUnits() []string {
	if o == nil {
		return nil
	}
	return o.OrganizationUnits
}

func (o *NpaPolicyRuleData) GetPolicyType() *PolicyType {
	if o == nil {
		return nil
	}
	return o.PolicyType
}

func (o *NpaPolicyRuleData) GetPrivateAppIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppIds
}

func (o *NpaPolicyRuleData) GetPrivateAppTagIds() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTagIds
}

func (o *NpaPolicyRuleData) GetPrivateAppTags() []string {
	if o == nil {
		return nil
	}
	return o.PrivateAppTags
}

func (o *NpaPolicyRuleData) GetPrivateApps() []string {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

func (o *NpaPolicyRuleData) GetPrivateAppsWithActivities() []PrivateAppsWithActivities {
	if o == nil {
		return nil
	}
	return o.PrivateAppsWithActivities
}

func (o *NpaPolicyRuleData) GetShowDlpProfileActionTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowDlpProfileActionTable
}

func (o *NpaPolicyRuleData) GetSrcCountries() []string {
	if o == nil {
		return nil
	}
	return o.SrcCountries
}

func (o *NpaPolicyRuleData) GetUserGroups() []string {
	if o == nil {
		return nil
	}
	return o.UserGroups
}

func (o *NpaPolicyRuleData) GetUserType() *UserType {
	if o == nil {
		return nil
	}
	return o.UserType
}

func (o *NpaPolicyRuleData) GetUsers() []string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *NpaPolicyRuleData) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}
