// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/netskope/terraform-provider-ns/internal/sdk/pkg/utils"
)

type Two struct {
}

type PublisherAssessmentType string

const (
	PublisherAssessmentTypeAssessment PublisherAssessmentType = "Assessment"
	PublisherAssessmentTypeTwo        PublisherAssessmentType = "2"
)

type PublisherAssessment struct {
	Assessment *Assessment
	Two        *Two

	Type PublisherAssessmentType
}

func CreatePublisherAssessmentAssessment(assessment Assessment) PublisherAssessment {
	typ := PublisherAssessmentTypeAssessment

	return PublisherAssessment{
		Assessment: &assessment,
		Type:       typ,
	}
}

func CreatePublisherAssessmentTwo(two Two) PublisherAssessment {
	typ := PublisherAssessmentTypeTwo

	return PublisherAssessment{
		Two:  &two,
		Type: typ,
	}
}

func (u *PublisherAssessment) UnmarshalJSON(data []byte) error {

	two := new(Two)
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = two
		u.Type = PublisherAssessmentTypeTwo
		return nil
	}

	assessment := new(Assessment)
	if err := utils.UnmarshalJSON(data, &assessment, "", true, true); err == nil {
		u.Assessment = assessment
		u.Type = PublisherAssessmentTypeAssessment
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PublisherAssessment) MarshalJSON() ([]byte, error) {
	if u.Assessment != nil {
		return utils.MarshalJSON(u.Assessment, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Publisher2 struct {
}

type StitcherIDType string

const (
	StitcherIDTypeInteger    StitcherIDType = "integer"
	StitcherIDTypePublisher2 StitcherIDType = "Publisher_2"
)

type StitcherID struct {
	Integer    *int64
	Publisher2 *Publisher2

	Type StitcherIDType
}

func CreateStitcherIDInteger(integer int64) StitcherID {
	typ := StitcherIDTypeInteger

	return StitcherID{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateStitcherIDPublisher2(publisher2 Publisher2) StitcherID {
	typ := StitcherIDTypePublisher2

	return StitcherID{
		Publisher2: &publisher2,
		Type:       typ,
	}
}

func (u *StitcherID) UnmarshalJSON(data []byte) error {

	publisher2 := new(Publisher2)
	if err := utils.UnmarshalJSON(data, &publisher2, "", true, true); err == nil {
		u.Publisher2 = publisher2
		u.Type = StitcherIDTypePublisher2
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = StitcherIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u StitcherID) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Publisher2 != nil {
		return utils.MarshalJSON(u.Publisher2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type PublisherSchemas2 struct {
}

type PublisherUpgradeFailedReasonType string

const (
	PublisherUpgradeFailedReasonTypeUpgradeFailedReason PublisherUpgradeFailedReasonType = "UpgradeFailedReason"
	PublisherUpgradeFailedReasonTypePublisherSchemas2   PublisherUpgradeFailedReasonType = "Publisher_Schemas_2"
)

type PublisherUpgradeFailedReason struct {
	UpgradeFailedReason *UpgradeFailedReason
	PublisherSchemas2   *PublisherSchemas2

	Type PublisherUpgradeFailedReasonType
}

func CreatePublisherUpgradeFailedReasonUpgradeFailedReason(upgradeFailedReason UpgradeFailedReason) PublisherUpgradeFailedReason {
	typ := PublisherUpgradeFailedReasonTypeUpgradeFailedReason

	return PublisherUpgradeFailedReason{
		UpgradeFailedReason: &upgradeFailedReason,
		Type:                typ,
	}
}

func CreatePublisherUpgradeFailedReasonPublisherSchemas2(publisherSchemas2 PublisherSchemas2) PublisherUpgradeFailedReason {
	typ := PublisherUpgradeFailedReasonTypePublisherSchemas2

	return PublisherUpgradeFailedReason{
		PublisherSchemas2: &publisherSchemas2,
		Type:              typ,
	}
}

func (u *PublisherUpgradeFailedReason) UnmarshalJSON(data []byte) error {

	publisherSchemas2 := new(PublisherSchemas2)
	if err := utils.UnmarshalJSON(data, &publisherSchemas2, "", true, true); err == nil {
		u.PublisherSchemas2 = publisherSchemas2
		u.Type = PublisherUpgradeFailedReasonTypePublisherSchemas2
		return nil
	}

	upgradeFailedReason := new(UpgradeFailedReason)
	if err := utils.UnmarshalJSON(data, &upgradeFailedReason, "", true, true); err == nil {
		u.UpgradeFailedReason = upgradeFailedReason
		u.Type = PublisherUpgradeFailedReasonTypeUpgradeFailedReason
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PublisherUpgradeFailedReason) MarshalJSON() ([]byte, error) {
	if u.UpgradeFailedReason != nil {
		return utils.MarshalJSON(u.UpgradeFailedReason, "", true)
	}

	if u.PublisherSchemas2 != nil {
		return utils.MarshalJSON(u.PublisherSchemas2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Publisher struct {
	AppsCount                          int64                        `json:"apps_count"`
	Assessment                         PublisherAssessment          `json:"assessment"`
	CommonName                         string                       `json:"common_name"`
	ConnectedApps                      []string                     `json:"connected_apps"`
	Lbrokerconnect                     bool                         `json:"lbrokerconnect"`
	PublisherID                        int64                        `json:"publisher_id"`
	PublisherName                      string                       `json:"publisher_name"`
	PublisherUpgradeProfilesExternalID int64                        `json:"publisher_upgrade_profiles_external_id"`
	Registered                         bool                         `json:"registered"`
	Status                             string                       `json:"status"`
	StitcherID                         StitcherID                   `json:"stitcher_id"`
	Tags                               []interface{}                `json:"tags"`
	UpgradeFailedReason                PublisherUpgradeFailedReason `json:"upgrade_failed_reason"`
	UpgradeRequest                     bool                         `json:"upgrade_request"`
	UpgradeStatus                      UpgradeStatus                `json:"upgrade_status"`
}

func (o *Publisher) GetAppsCount() int64 {
	if o == nil {
		return 0
	}
	return o.AppsCount
}

func (o *Publisher) GetAssessment() PublisherAssessment {
	if o == nil {
		return PublisherAssessment{}
	}
	return o.Assessment
}

func (o *Publisher) GetCommonName() string {
	if o == nil {
		return ""
	}
	return o.CommonName
}

func (o *Publisher) GetConnectedApps() []string {
	if o == nil {
		return []string{}
	}
	return o.ConnectedApps
}

func (o *Publisher) GetLbrokerconnect() bool {
	if o == nil {
		return false
	}
	return o.Lbrokerconnect
}

func (o *Publisher) GetPublisherID() int64 {
	if o == nil {
		return 0
	}
	return o.PublisherID
}

func (o *Publisher) GetPublisherName() string {
	if o == nil {
		return ""
	}
	return o.PublisherName
}

func (o *Publisher) GetPublisherUpgradeProfilesExternalID() int64 {
	if o == nil {
		return 0
	}
	return o.PublisherUpgradeProfilesExternalID
}

func (o *Publisher) GetRegistered() bool {
	if o == nil {
		return false
	}
	return o.Registered
}

func (o *Publisher) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *Publisher) GetStitcherID() StitcherID {
	if o == nil {
		return StitcherID{}
	}
	return o.StitcherID
}

func (o *Publisher) GetTags() []interface{} {
	if o == nil {
		return []interface{}{}
	}
	return o.Tags
}

func (o *Publisher) GetUpgradeFailedReason() PublisherUpgradeFailedReason {
	if o == nil {
		return PublisherUpgradeFailedReason{}
	}
	return o.UpgradeFailedReason
}

func (o *Publisher) GetUpgradeRequest() bool {
	if o == nil {
		return false
	}
	return o.UpgradeRequest
}

func (o *Publisher) GetUpgradeStatus() UpgradeStatus {
	if o == nil {
		return UpgradeStatus{}
	}
	return o.UpgradeStatus
}
