// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PutSCIMGroupsByIDSchemas string

const (
	PutSCIMGroupsByIDSchemasUrnIetfParamsScimSchemasCore20Group PutSCIMGroupsByIDSchemas = "urn:ietf:params:scim:schemas:core:2.0:Group"
)

func (e PutSCIMGroupsByIDSchemas) ToPointer() *PutSCIMGroupsByIDSchemas {
	return &e
}

func (e *PutSCIMGroupsByIDSchemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:schemas:core:2.0:Group":
		*e = PutSCIMGroupsByIDSchemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutSCIMGroupsByIDSchemas: %v", v)
	}
}

type PutSCIMGroupsByIDMembers struct {
	Value *string `json:"value,omitempty"`
}

func (o *PutSCIMGroupsByIDMembers) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// PutSCIMGroupsByIDMeta - meta information
type PutSCIMGroupsByIDMeta struct {
	// resource type Group.
	ResourceType *string `json:"resourceType,omitempty"`
}

func (o *PutSCIMGroupsByIDMeta) GetResourceType() *string {
	if o == nil {
		return nil
	}
	return o.ResourceType
}

// PutSCIMGroupsByIDRequestBody - User object
type PutSCIMGroupsByIDRequestBody struct {
	// schema of the resource
	Schemas []PutSCIMGroupsByIDSchemas `json:"schemas,omitempty"`
	// Display name for group.
	DisplayName *string                    `json:"displayName,omitempty"`
	Members     []PutSCIMGroupsByIDMembers `json:"members,omitempty"`
	// Optional - Scim External ID
	ExternalID *string `json:"externalId,omitempty"`
	// meta information
	Meta *PutSCIMGroupsByIDMeta `json:"meta,omitempty"`
}

func (o *PutSCIMGroupsByIDRequestBody) GetSchemas() []PutSCIMGroupsByIDSchemas {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *PutSCIMGroupsByIDRequestBody) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *PutSCIMGroupsByIDRequestBody) GetMembers() []PutSCIMGroupsByIDMembers {
	if o == nil {
		return nil
	}
	return o.Members
}

func (o *PutSCIMGroupsByIDRequestBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *PutSCIMGroupsByIDRequestBody) GetMeta() *PutSCIMGroupsByIDMeta {
	if o == nil {
		return nil
	}
	return o.Meta
}

type PutSCIMGroupsByIDRequest struct {
	// SCIM Used ID should be specified
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// group to update
	RequestBody *PutSCIMGroupsByIDRequestBody `request:"mediaType=application/json"`
}

func (o *PutSCIMGroupsByIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PutSCIMGroupsByIDRequest) GetRequestBody() *PutSCIMGroupsByIDRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type PutSCIMGroupsByIDSCIMGroupsResponseStatus string

const (
	PutSCIMGroupsByIDSCIMGroupsResponseStatusFailed            PutSCIMGroupsByIDSCIMGroupsResponseStatus = "failed"
	PutSCIMGroupsByIDSCIMGroupsResponseStatusFiveHundredAndOne PutSCIMGroupsByIDSCIMGroupsResponseStatus = "501"
)

func (e PutSCIMGroupsByIDSCIMGroupsResponseStatus) ToPointer() *PutSCIMGroupsByIDSCIMGroupsResponseStatus {
	return &e
}

func (e *PutSCIMGroupsByIDSCIMGroupsResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "failed":
		fallthrough
	case "501":
		*e = PutSCIMGroupsByIDSCIMGroupsResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutSCIMGroupsByIDSCIMGroupsResponseStatus: %v", v)
	}
}

// PutSCIMGroupsByIDSCIMGroupsResponse501ResponseBody - Internal error Failed
type PutSCIMGroupsByIDSCIMGroupsResponse501ResponseBody struct {
	Status  *PutSCIMGroupsByIDSCIMGroupsResponseStatus `json:"status,omitempty"`
	Schemas *string                                    `json:"schemas,omitempty"`
	Detail  *string                                    `json:"detail,omitempty"`
}

func (o *PutSCIMGroupsByIDSCIMGroupsResponse501ResponseBody) GetStatus() *PutSCIMGroupsByIDSCIMGroupsResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PutSCIMGroupsByIDSCIMGroupsResponse501ResponseBody) GetSchemas() *string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *PutSCIMGroupsByIDSCIMGroupsResponse501ResponseBody) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

// PutSCIMGroupsByIDSCIMGroupsResponseResponseBody - Not authorized to execte the specific API.
type PutSCIMGroupsByIDSCIMGroupsResponseResponseBody struct {
	Message *string `json:"message,omitempty"`
}

func (o *PutSCIMGroupsByIDSCIMGroupsResponseResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

type PutSCIMGroupsByIDSCIMGroupsStatus string

const (
	PutSCIMGroupsByIDSCIMGroupsStatusFourHundred PutSCIMGroupsByIDSCIMGroupsStatus = "400"
	PutSCIMGroupsByIDSCIMGroupsStatusFailed      PutSCIMGroupsByIDSCIMGroupsStatus = "failed"
)

func (e PutSCIMGroupsByIDSCIMGroupsStatus) ToPointer() *PutSCIMGroupsByIDSCIMGroupsStatus {
	return &e
}

func (e *PutSCIMGroupsByIDSCIMGroupsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "400":
		fallthrough
	case "failed":
		*e = PutSCIMGroupsByIDSCIMGroupsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutSCIMGroupsByIDSCIMGroupsStatus: %v", v)
	}
}

// PutSCIMGroupsByIDSCIMGroupsResponseBody - Failed
type PutSCIMGroupsByIDSCIMGroupsResponseBody struct {
	Status      *PutSCIMGroupsByIDSCIMGroupsStatus `json:"status,omitempty"`
	Description *string                            `json:"description,omitempty"`
	// schema of the resource
	Schemas []string `json:"schemas,omitempty"`
}

func (o *PutSCIMGroupsByIDSCIMGroupsResponseBody) GetStatus() *PutSCIMGroupsByIDSCIMGroupsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PutSCIMGroupsByIDSCIMGroupsResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PutSCIMGroupsByIDSCIMGroupsResponseBody) GetSchemas() []string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

type PutSCIMGroupsByIDSCIMGroupsSchemas string

const (
	PutSCIMGroupsByIDSCIMGroupsSchemasUrnIetfParamsScimSchemasCore20Group PutSCIMGroupsByIDSCIMGroupsSchemas = "urn:ietf:params:scim:schemas:core:2.0:Group"
)

func (e PutSCIMGroupsByIDSCIMGroupsSchemas) ToPointer() *PutSCIMGroupsByIDSCIMGroupsSchemas {
	return &e
}

func (e *PutSCIMGroupsByIDSCIMGroupsSchemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:schemas:core:2.0:Group":
		*e = PutSCIMGroupsByIDSCIMGroupsSchemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutSCIMGroupsByIDSCIMGroupsSchemas: %v", v)
	}
}

type PutSCIMGroupsByIDSCIMGroupsMembers struct {
	Value *string `json:"value,omitempty"`
}

func (o *PutSCIMGroupsByIDSCIMGroupsMembers) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// PutSCIMGroupsByIDSCIMGroupsMeta - meta information
type PutSCIMGroupsByIDSCIMGroupsMeta struct {
	// resource type User/Group.
	ResourceType *string `json:"resourceType,omitempty"`
}

func (o *PutSCIMGroupsByIDSCIMGroupsMeta) GetResourceType() *string {
	if o == nil {
		return nil
	}
	return o.ResourceType
}

type PutSCIMGroupsByIDStatus int64

const (
	PutSCIMGroupsByIDStatusTwoHundredAndOne PutSCIMGroupsByIDStatus = 201
	PutSCIMGroupsByIDStatusTwoHundred       PutSCIMGroupsByIDStatus = 200
)

func (e PutSCIMGroupsByIDStatus) ToPointer() *PutSCIMGroupsByIDStatus {
	return &e
}

func (e *PutSCIMGroupsByIDStatus) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 201:
		fallthrough
	case 200:
		*e = PutSCIMGroupsByIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutSCIMGroupsByIDStatus: %v", v)
	}
}

// PutSCIMGroupsByIDResponseBody - Successfully updated the User.
type PutSCIMGroupsByIDResponseBody struct {
	// SCIM Group ID
	ID *string `json:"id,omitempty"`
	// schema of the resource
	Schemas []PutSCIMGroupsByIDSCIMGroupsSchemas `json:"schemas,omitempty"`
	// Display name for group.
	DisplayName *string                              `json:"displayName,omitempty"`
	Members     []PutSCIMGroupsByIDSCIMGroupsMembers `json:"members,omitempty"`
	// Optional - Scim External ID
	ExternalID *string `json:"externalId,omitempty"`
	// meta information
	Meta   *PutSCIMGroupsByIDSCIMGroupsMeta `json:"meta,omitempty"`
	Status *PutSCIMGroupsByIDStatus         `json:"status,omitempty"`
}

func (o *PutSCIMGroupsByIDResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PutSCIMGroupsByIDResponseBody) GetSchemas() []PutSCIMGroupsByIDSCIMGroupsSchemas {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *PutSCIMGroupsByIDResponseBody) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *PutSCIMGroupsByIDResponseBody) GetMembers() []PutSCIMGroupsByIDSCIMGroupsMembers {
	if o == nil {
		return nil
	}
	return o.Members
}

func (o *PutSCIMGroupsByIDResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *PutSCIMGroupsByIDResponseBody) GetMeta() *PutSCIMGroupsByIDSCIMGroupsMeta {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *PutSCIMGroupsByIDResponseBody) GetStatus() *PutSCIMGroupsByIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type PutSCIMGroupsByIDResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successfully updated the User.
	TwoHundredApplicationJSONObject *PutSCIMGroupsByIDResponseBody
	// Failed
	FourHundredApplicationJSONObject *PutSCIMGroupsByIDSCIMGroupsResponseBody
	// Not authorized to execte the specific API.
	FourHundredAndThreeApplicationJSONObject *PutSCIMGroupsByIDSCIMGroupsResponseResponseBody
	// Internal error Failed
	FiveHundredAndOneApplicationJSONObject *PutSCIMGroupsByIDSCIMGroupsResponse501ResponseBody
}

func (o *PutSCIMGroupsByIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PutSCIMGroupsByIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PutSCIMGroupsByIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PutSCIMGroupsByIDResponse) GetTwoHundredApplicationJSONObject() *PutSCIMGroupsByIDResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *PutSCIMGroupsByIDResponse) GetFourHundredApplicationJSONObject() *PutSCIMGroupsByIDSCIMGroupsResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *PutSCIMGroupsByIDResponse) GetFourHundredAndThreeApplicationJSONObject() *PutSCIMGroupsByIDSCIMGroupsResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *PutSCIMGroupsByIDResponse) GetFiveHundredAndOneApplicationJSONObject() *PutSCIMGroupsByIDSCIMGroupsResponse501ResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredAndOneApplicationJSONObject
}
