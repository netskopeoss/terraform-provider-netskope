// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetUsersIDRequest struct {
	// SCIM Used ID should be specified
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *GetUsersIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetUsersIDStatus string

const (
	GetUsersIDStatusFailed            GetUsersIDStatus = "failed"
	GetUsersIDStatusFiveHundredAndOne GetUsersIDStatus = "501"
)

func (e GetUsersIDStatus) ToPointer() *GetUsersIDStatus {
	return &e
}

func (e *GetUsersIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "failed":
		fallthrough
	case "501":
		*e = GetUsersIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUsersIDStatus: %v", v)
	}
}

// GetUsersIDScimUsersResponseResponseBody - Internal error Failed
type GetUsersIDScimUsersResponseResponseBody struct {
	Status  *GetUsersIDStatus `json:"status,omitempty"`
	Schemas *string           `json:"schemas,omitempty"`
	Detail  *string           `json:"detail,omitempty"`
}

func (o *GetUsersIDScimUsersResponseResponseBody) GetStatus() *GetUsersIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetUsersIDScimUsersResponseResponseBody) GetSchemas() *string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *GetUsersIDScimUsersResponseResponseBody) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

// GetUsersIDScimUsersResponseBody - Not authorized to execte the specific API.
type GetUsersIDScimUsersResponseBody struct {
	Message *string `json:"message,omitempty"`
}

func (o *GetUsersIDScimUsersResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

type GetUsersIDSchemas string

const (
	GetUsersIDSchemasUrnIetfParamsScimSchemasCore20User GetUsersIDSchemas = "urn:ietf:params:scim:schemas:core:2.0:User"
)

func (e GetUsersIDSchemas) ToPointer() *GetUsersIDSchemas {
	return &e
}

func (e *GetUsersIDSchemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:schemas:core:2.0:User":
		*e = GetUsersIDSchemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUsersIDSchemas: %v", v)
	}
}

// GetUsersIDName - Family_name and given_name for the User
type GetUsersIDName struct {
	// last_name of the SCIM User.
	FamilyName *string `json:"familyName,omitempty"`
	// first_name of the SCIM User.
	GivenName *string `json:"givenName,omitempty"`
}

func (o *GetUsersIDName) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *GetUsersIDName) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

type GetUsersIDEmails struct {
	// Email ID of the SCIM user
	Value   *string `json:"value,omitempty"`
	Primary *bool   `json:"primary,omitempty"`
}

func (o *GetUsersIDEmails) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *GetUsersIDEmails) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

// GetUsersIDMeta - meta information
type GetUsersIDMeta struct {
	// resource type User/Group.
	ResourceType *string `json:"resourceType,omitempty"`
}

func (o *GetUsersIDMeta) GetResourceType() *string {
	if o == nil {
		return nil
	}
	return o.ResourceType
}

// GetUsersIDResponseBody - Successfully deleted the User.
type GetUsersIDResponseBody struct {
	// schema of the resource
	Schemas []GetUsersIDSchemas `json:"schemas,omitempty"`
	// SCIM User ID
	ID *string `json:"id,omitempty"`
	// UPN name of the SCIM User
	UserName *string `json:"userName,omitempty"`
	// Family_name and given_name for the User
	Name   *GetUsersIDName    `json:"name,omitempty"`
	Active *bool              `json:"active,omitempty"`
	Emails []GetUsersIDEmails `json:"emails,omitempty"`
	// Optional - Scim External ID
	ExternalID *string `json:"externalId,omitempty"`
	// meta information
	Meta *GetUsersIDMeta `json:"meta,omitempty"`
}

func (o *GetUsersIDResponseBody) GetSchemas() []GetUsersIDSchemas {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *GetUsersIDResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetUsersIDResponseBody) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *GetUsersIDResponseBody) GetName() *GetUsersIDName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetUsersIDResponseBody) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *GetUsersIDResponseBody) GetEmails() []GetUsersIDEmails {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *GetUsersIDResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *GetUsersIDResponseBody) GetMeta() *GetUsersIDMeta {
	if o == nil {
		return nil
	}
	return o.Meta
}

type GetUsersIDResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successfully deleted the User.
	TwoHundredApplicationScimPlusJSONObject *GetUsersIDResponseBody
	// Not authorized to execte the specific API.
	FourHundredAndThreeApplicationJSONObject *GetUsersIDScimUsersResponseBody
	// Internal error Failed
	FiveHundredAndOneApplicationJSONObject *GetUsersIDScimUsersResponseResponseBody
}

func (o *GetUsersIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetUsersIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetUsersIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetUsersIDResponse) GetTwoHundredApplicationScimPlusJSONObject() *GetUsersIDResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationScimPlusJSONObject
}

func (o *GetUsersIDResponse) GetFourHundredAndThreeApplicationJSONObject() *GetUsersIDScimUsersResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *GetUsersIDResponse) GetFiveHundredAndOneApplicationJSONObject() *GetUsersIDScimUsersResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredAndOneApplicationJSONObject
}
