// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetSCIMUsersByIDRequest struct {
	// SCIM Used ID should be specified
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *GetSCIMUsersByIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetSCIMUsersByIDStatus string

const (
	GetSCIMUsersByIDStatusFailed            GetSCIMUsersByIDStatus = "failed"
	GetSCIMUsersByIDStatusFiveHundredAndOne GetSCIMUsersByIDStatus = "501"
)

func (e GetSCIMUsersByIDStatus) ToPointer() *GetSCIMUsersByIDStatus {
	return &e
}

func (e *GetSCIMUsersByIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "failed":
		fallthrough
	case "501":
		*e = GetSCIMUsersByIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSCIMUsersByIDStatus: %v", v)
	}
}

// GetSCIMUsersByIDSCIMUsersResponseResponseBody - Internal error Failed
type GetSCIMUsersByIDSCIMUsersResponseResponseBody struct {
	Status  *GetSCIMUsersByIDStatus `json:"status,omitempty"`
	Schemas *string                 `json:"schemas,omitempty"`
	Detail  *string                 `json:"detail,omitempty"`
}

func (o *GetSCIMUsersByIDSCIMUsersResponseResponseBody) GetStatus() *GetSCIMUsersByIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetSCIMUsersByIDSCIMUsersResponseResponseBody) GetSchemas() *string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *GetSCIMUsersByIDSCIMUsersResponseResponseBody) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

// GetSCIMUsersByIDSCIMUsersResponseBody - Not authorized to execte the specific API.
type GetSCIMUsersByIDSCIMUsersResponseBody struct {
	Message *string `json:"message,omitempty"`
}

func (o *GetSCIMUsersByIDSCIMUsersResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

type GetSCIMUsersByIDSchemas string

const (
	GetSCIMUsersByIDSchemasUrnIetfParamsScimSchemasCore20User GetSCIMUsersByIDSchemas = "urn:ietf:params:scim:schemas:core:2.0:User"
)

func (e GetSCIMUsersByIDSchemas) ToPointer() *GetSCIMUsersByIDSchemas {
	return &e
}

func (e *GetSCIMUsersByIDSchemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:schemas:core:2.0:User":
		*e = GetSCIMUsersByIDSchemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSCIMUsersByIDSchemas: %v", v)
	}
}

// GetSCIMUsersByIDName - Family_name and given_name for the User
type GetSCIMUsersByIDName struct {
	// last_name of the SCIM User.
	FamilyName *string `json:"familyName,omitempty"`
	// first_name of the SCIM User.
	GivenName *string `json:"givenName,omitempty"`
}

func (o *GetSCIMUsersByIDName) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *GetSCIMUsersByIDName) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

type GetSCIMUsersByIDEmails struct {
	// Email ID of the SCIM user
	Value   *string `json:"value,omitempty"`
	Primary *bool   `json:"primary,omitempty"`
}

func (o *GetSCIMUsersByIDEmails) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *GetSCIMUsersByIDEmails) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

// GetSCIMUsersByIDMeta - meta information
type GetSCIMUsersByIDMeta struct {
	// resource type User/Group.
	ResourceType *string `json:"resourceType,omitempty"`
}

func (o *GetSCIMUsersByIDMeta) GetResourceType() *string {
	if o == nil {
		return nil
	}
	return o.ResourceType
}

// GetSCIMUsersByIDResponseBody - Successfully deleted the User.
type GetSCIMUsersByIDResponseBody struct {
	// schema of the resource
	Schemas []GetSCIMUsersByIDSchemas `json:"schemas,omitempty"`
	// SCIM User ID
	ID *string `json:"id,omitempty"`
	// UPN name of the SCIM User
	UserName *string `json:"userName,omitempty"`
	// Family_name and given_name for the User
	Name   *GetSCIMUsersByIDName    `json:"name,omitempty"`
	Active *bool                    `json:"active,omitempty"`
	Emails []GetSCIMUsersByIDEmails `json:"emails,omitempty"`
	// Optional - Scim External ID
	ExternalID *string `json:"externalId,omitempty"`
	// meta information
	Meta *GetSCIMUsersByIDMeta `json:"meta,omitempty"`
}

func (o *GetSCIMUsersByIDResponseBody) GetSchemas() []GetSCIMUsersByIDSchemas {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *GetSCIMUsersByIDResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetSCIMUsersByIDResponseBody) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *GetSCIMUsersByIDResponseBody) GetName() *GetSCIMUsersByIDName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetSCIMUsersByIDResponseBody) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *GetSCIMUsersByIDResponseBody) GetEmails() []GetSCIMUsersByIDEmails {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *GetSCIMUsersByIDResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *GetSCIMUsersByIDResponseBody) GetMeta() *GetSCIMUsersByIDMeta {
	if o == nil {
		return nil
	}
	return o.Meta
}

type GetSCIMUsersByIDResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successfully deleted the User.
	TwoHundredApplicationJSONObject *GetSCIMUsersByIDResponseBody
	// Not authorized to execte the specific API.
	FourHundredAndThreeApplicationJSONObject *GetSCIMUsersByIDSCIMUsersResponseBody
	// Internal error Failed
	FiveHundredAndOneApplicationJSONObject *GetSCIMUsersByIDSCIMUsersResponseResponseBody
}

func (o *GetSCIMUsersByIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetSCIMUsersByIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetSCIMUsersByIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetSCIMUsersByIDResponse) GetTwoHundredApplicationJSONObject() *GetSCIMUsersByIDResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *GetSCIMUsersByIDResponse) GetFourHundredAndThreeApplicationJSONObject() *GetSCIMUsersByIDSCIMUsersResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *GetSCIMUsersByIDResponse) GetFiveHundredAndOneApplicationJSONObject() *GetSCIMUsersByIDSCIMUsersResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredAndOneApplicationJSONObject
}
