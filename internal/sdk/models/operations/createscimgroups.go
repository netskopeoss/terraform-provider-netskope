// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CreateSCIMGroupsSchemas string

const (
	CreateSCIMGroupsSchemasUrnIetfParamsScimSchemasCore20Group CreateSCIMGroupsSchemas = "urn:ietf:params:scim:schemas:core:2.0:Group"
)

func (e CreateSCIMGroupsSchemas) ToPointer() *CreateSCIMGroupsSchemas {
	return &e
}

func (e *CreateSCIMGroupsSchemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:schemas:core:2.0:Group":
		*e = CreateSCIMGroupsSchemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSCIMGroupsSchemas: %v", v)
	}
}

type Members struct {
	Value *string `json:"value,omitempty"`
}

func (o *Members) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateSCIMGroupsMeta - meta information
type CreateSCIMGroupsMeta struct {
	// resource type User/Group.
	ResourceType *string `json:"resourceType,omitempty"`
}

func (o *CreateSCIMGroupsMeta) GetResourceType() *string {
	if o == nil {
		return nil
	}
	return o.ResourceType
}

// CreateSCIMGroupsRequestBody - Group object
type CreateSCIMGroupsRequestBody struct {
	// schema of the resource
	Schemas []CreateSCIMGroupsSchemas `json:"schemas,omitempty"`
	// Display name for group.
	DisplayName *string   `json:"displayName,omitempty"`
	Members     []Members `json:"members,omitempty"`
	// Optional - Scim External ID
	ExternalID *string `json:"externalId,omitempty"`
	// meta information
	Meta *CreateSCIMGroupsMeta `json:"meta,omitempty"`
}

func (o *CreateSCIMGroupsRequestBody) GetSchemas() []CreateSCIMGroupsSchemas {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *CreateSCIMGroupsRequestBody) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CreateSCIMGroupsRequestBody) GetMembers() []Members {
	if o == nil {
		return nil
	}
	return o.Members
}

func (o *CreateSCIMGroupsRequestBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *CreateSCIMGroupsRequestBody) GetMeta() *CreateSCIMGroupsMeta {
	if o == nil {
		return nil
	}
	return o.Meta
}

type CreateSCIMGroupsSCIMGroupsResponseStatus string

const (
	CreateSCIMGroupsSCIMGroupsResponseStatusFailed            CreateSCIMGroupsSCIMGroupsResponseStatus = "failed"
	CreateSCIMGroupsSCIMGroupsResponseStatusFiveHundredAndOne CreateSCIMGroupsSCIMGroupsResponseStatus = "501"
)

func (e CreateSCIMGroupsSCIMGroupsResponseStatus) ToPointer() *CreateSCIMGroupsSCIMGroupsResponseStatus {
	return &e
}

func (e *CreateSCIMGroupsSCIMGroupsResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "failed":
		fallthrough
	case "501":
		*e = CreateSCIMGroupsSCIMGroupsResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSCIMGroupsSCIMGroupsResponseStatus: %v", v)
	}
}

// CreateSCIMGroupsSCIMGroupsResponse501ResponseBody - Internal error Failed
type CreateSCIMGroupsSCIMGroupsResponse501ResponseBody struct {
	Status  *CreateSCIMGroupsSCIMGroupsResponseStatus `json:"status,omitempty"`
	Schemas *string                                   `json:"schemas,omitempty"`
	Detail  *string                                   `json:"detail,omitempty"`
}

func (o *CreateSCIMGroupsSCIMGroupsResponse501ResponseBody) GetStatus() *CreateSCIMGroupsSCIMGroupsResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateSCIMGroupsSCIMGroupsResponse501ResponseBody) GetSchemas() *string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *CreateSCIMGroupsSCIMGroupsResponse501ResponseBody) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

// CreateSCIMGroupsSCIMGroupsResponseResponseBody - Not authorized to execte the specific API.
type CreateSCIMGroupsSCIMGroupsResponseResponseBody struct {
	Message *string `json:"message,omitempty"`
}

func (o *CreateSCIMGroupsSCIMGroupsResponseResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

type CreateSCIMGroupsSCIMGroupsStatus string

const (
	CreateSCIMGroupsSCIMGroupsStatusFourHundred CreateSCIMGroupsSCIMGroupsStatus = "400"
	CreateSCIMGroupsSCIMGroupsStatusFailed      CreateSCIMGroupsSCIMGroupsStatus = "failed"
)

func (e CreateSCIMGroupsSCIMGroupsStatus) ToPointer() *CreateSCIMGroupsSCIMGroupsStatus {
	return &e
}

func (e *CreateSCIMGroupsSCIMGroupsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "400":
		fallthrough
	case "failed":
		*e = CreateSCIMGroupsSCIMGroupsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSCIMGroupsSCIMGroupsStatus: %v", v)
	}
}

// CreateSCIMGroupsSCIMGroupsResponseBody - Failed
type CreateSCIMGroupsSCIMGroupsResponseBody struct {
	Status      *CreateSCIMGroupsSCIMGroupsStatus `json:"status,omitempty"`
	Description *string                           `json:"description,omitempty"`
	// schema of the resource
	Schemas []string `json:"schemas,omitempty"`
}

func (o *CreateSCIMGroupsSCIMGroupsResponseBody) GetStatus() *CreateSCIMGroupsSCIMGroupsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateSCIMGroupsSCIMGroupsResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateSCIMGroupsSCIMGroupsResponseBody) GetSchemas() []string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

type CreateSCIMGroupsSCIMGroupsSchemas string

const (
	CreateSCIMGroupsSCIMGroupsSchemasUrnIetfParamsScimSchemasCore20Group CreateSCIMGroupsSCIMGroupsSchemas = "urn:ietf:params:scim:schemas:core:2.0:Group"
)

func (e CreateSCIMGroupsSCIMGroupsSchemas) ToPointer() *CreateSCIMGroupsSCIMGroupsSchemas {
	return &e
}

func (e *CreateSCIMGroupsSCIMGroupsSchemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:schemas:core:2.0:Group":
		*e = CreateSCIMGroupsSCIMGroupsSchemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSCIMGroupsSCIMGroupsSchemas: %v", v)
	}
}

type CreateSCIMGroupsMembers struct {
	Value *string `json:"value,omitempty"`
}

func (o *CreateSCIMGroupsMembers) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateSCIMGroupsSCIMGroupsMeta - meta information
type CreateSCIMGroupsSCIMGroupsMeta struct {
	// resource type Group.
	ResourceType *string `json:"resourceType,omitempty"`
}

func (o *CreateSCIMGroupsSCIMGroupsMeta) GetResourceType() *string {
	if o == nil {
		return nil
	}
	return o.ResourceType
}

type CreateSCIMGroupsStatus int64

const (
	CreateSCIMGroupsStatusTwoHundredAndOne CreateSCIMGroupsStatus = 201
	CreateSCIMGroupsStatusTwoHundred       CreateSCIMGroupsStatus = 200
)

func (e CreateSCIMGroupsStatus) ToPointer() *CreateSCIMGroupsStatus {
	return &e
}

func (e *CreateSCIMGroupsStatus) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 201:
		fallthrough
	case 200:
		*e = CreateSCIMGroupsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSCIMGroupsStatus: %v", v)
	}
}

// CreateSCIMGroupsResponseBody - Successfully added the User.
type CreateSCIMGroupsResponseBody struct {
	// SCIM Group ID
	ID *string `json:"id,omitempty"`
	// schema of the resource
	Schemas []CreateSCIMGroupsSCIMGroupsSchemas `json:"schemas,omitempty"`
	// Display name for group.
	DisplayName *string                   `json:"displayName,omitempty"`
	Members     []CreateSCIMGroupsMembers `json:"members,omitempty"`
	// Optional - Scim External ID
	ExternalID *string `json:"externalId,omitempty"`
	// meta information
	Meta   *CreateSCIMGroupsSCIMGroupsMeta `json:"meta,omitempty"`
	Status *CreateSCIMGroupsStatus         `json:"status,omitempty"`
}

func (o *CreateSCIMGroupsResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateSCIMGroupsResponseBody) GetSchemas() []CreateSCIMGroupsSCIMGroupsSchemas {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *CreateSCIMGroupsResponseBody) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CreateSCIMGroupsResponseBody) GetMembers() []CreateSCIMGroupsMembers {
	if o == nil {
		return nil
	}
	return o.Members
}

func (o *CreateSCIMGroupsResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *CreateSCIMGroupsResponseBody) GetMeta() *CreateSCIMGroupsSCIMGroupsMeta {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *CreateSCIMGroupsResponseBody) GetStatus() *CreateSCIMGroupsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type CreateSCIMGroupsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successfully added the User.
	TwoHundredAndOneApplicationJSONObject *CreateSCIMGroupsResponseBody
	// Failed
	FourHundredApplicationJSONObject *CreateSCIMGroupsSCIMGroupsResponseBody
	// Not authorized to execte the specific API.
	FourHundredAndThreeApplicationJSONObject *CreateSCIMGroupsSCIMGroupsResponseResponseBody
	// Internal error Failed
	FiveHundredAndOneApplicationJSONObject *CreateSCIMGroupsSCIMGroupsResponse501ResponseBody
}

func (o *CreateSCIMGroupsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateSCIMGroupsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateSCIMGroupsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateSCIMGroupsResponse) GetTwoHundredAndOneApplicationJSONObject() *CreateSCIMGroupsResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredAndOneApplicationJSONObject
}

func (o *CreateSCIMGroupsResponse) GetFourHundredApplicationJSONObject() *CreateSCIMGroupsSCIMGroupsResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *CreateSCIMGroupsResponse) GetFourHundredAndThreeApplicationJSONObject() *CreateSCIMGroupsSCIMGroupsResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *CreateSCIMGroupsResponse) GetFiveHundredAndOneApplicationJSONObject() *CreateSCIMGroupsSCIMGroupsResponse501ResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredAndOneApplicationJSONObject
}
