// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/internal/utils"
	"net/http"
)

type UpdateSCIMUsersByIDSchemas string

const (
	UpdateSCIMUsersByIDSchemasUrnIetfParamsScimAPIMessages20PatchOp UpdateSCIMUsersByIDSchemas = "urn:ietf:params:scim:api:messages:2.0:PatchOp"
)

func (e UpdateSCIMUsersByIDSchemas) ToPointer() *UpdateSCIMUsersByIDSchemas {
	return &e
}

func (e *UpdateSCIMUsersByIDSchemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:api:messages:2.0:PatchOp":
		*e = UpdateSCIMUsersByIDSchemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSCIMUsersByIDSchemas: %v", v)
	}
}

type Path string

const (
	PathUserName              Path = "userName"
	PathNameGivenname         Path = "name.givenname"
	PathNameFamilyname        Path = "name.familyname"
	PathExternalid            Path = "externalid"
	PathEmailsTypeEqWorkValue Path = "emails[type eq work].value"
)

func (e Path) ToPointer() *Path {
	return &e
}

func (e *Path) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "userName":
		fallthrough
	case "name.givenname":
		fallthrough
	case "name.familyname":
		fallthrough
	case "externalid":
		fallthrough
	case "emails[type eq work].value":
		*e = Path(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Path: %v", v)
	}
}

type Op string

const (
	OpAdd     Op = "add"
	OpRemove  Op = "remove"
	OpReplace Op = "replace"
)

func (e Op) ToPointer() *Op {
	return &e
}

func (e *Op) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "add":
		fallthrough
	case "remove":
		fallthrough
	case "replace":
		*e = Op(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Op: %v", v)
	}
}

type Two struct {
}

type ValueType string

const (
	ValueTypeStr ValueType = "str"
	ValueTypeTwo ValueType = "2"
)

// Value - value either string or object
type Value struct {
	Str *string
	Two *Two

	Type ValueType
}

func CreateValueStr(str string) Value {
	typ := ValueTypeStr

	return Value{
		Str:  &str,
		Type: typ,
	}
}

func CreateValueTwo(two Two) Value {
	typ := ValueTypeTwo

	return Value{
		Two:  &two,
		Type: typ,
	}
}

func (u *Value) UnmarshalJSON(data []byte) error {

	two := Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = ValueTypeTwo
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ValueTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Value) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Operations struct {
	Path *Path `json:"path,omitempty"`
	Op   *Op   `json:"op,omitempty"`
	// value either string or object
	Value *Value `json:"value,omitempty"`
}

func (o *Operations) GetPath() *Path {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *Operations) GetOp() *Op {
	if o == nil {
		return nil
	}
	return o.Op
}

func (o *Operations) GetValue() *Value {
	if o == nil {
		return nil
	}
	return o.Value
}

// UpdateSCIMUsersByIDRequestBody - attribute to be modified.
type UpdateSCIMUsersByIDRequestBody struct {
	// schema of the resource
	Schemas    []UpdateSCIMUsersByIDSchemas `json:"schemas,omitempty"`
	Operations []Operations                 `json:"Operations,omitempty"`
}

func (o *UpdateSCIMUsersByIDRequestBody) GetSchemas() []UpdateSCIMUsersByIDSchemas {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *UpdateSCIMUsersByIDRequestBody) GetOperations() []Operations {
	if o == nil {
		return nil
	}
	return o.Operations
}

type UpdateSCIMUsersByIDRequest struct {
	// SCIM Used ID should be specified
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// attributes to be modified.
	RequestBody *UpdateSCIMUsersByIDRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateSCIMUsersByIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateSCIMUsersByIDRequest) GetRequestBody() *UpdateSCIMUsersByIDRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateSCIMUsersByIDSCIMUsersStatus string

const (
	UpdateSCIMUsersByIDSCIMUsersStatusFailed            UpdateSCIMUsersByIDSCIMUsersStatus = "failed"
	UpdateSCIMUsersByIDSCIMUsersStatusFiveHundredAndOne UpdateSCIMUsersByIDSCIMUsersStatus = "501"
)

func (e UpdateSCIMUsersByIDSCIMUsersStatus) ToPointer() *UpdateSCIMUsersByIDSCIMUsersStatus {
	return &e
}

func (e *UpdateSCIMUsersByIDSCIMUsersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "failed":
		fallthrough
	case "501":
		*e = UpdateSCIMUsersByIDSCIMUsersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSCIMUsersByIDSCIMUsersStatus: %v", v)
	}
}

// UpdateSCIMUsersByIDSCIMUsersResponseResponseBody - Internal error Failed
type UpdateSCIMUsersByIDSCIMUsersResponseResponseBody struct {
	Status  *UpdateSCIMUsersByIDSCIMUsersStatus `json:"status,omitempty"`
	Schemas *string                             `json:"schemas,omitempty"`
	Detail  *string                             `json:"detail,omitempty"`
}

func (o *UpdateSCIMUsersByIDSCIMUsersResponseResponseBody) GetStatus() *UpdateSCIMUsersByIDSCIMUsersStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateSCIMUsersByIDSCIMUsersResponseResponseBody) GetSchemas() *string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *UpdateSCIMUsersByIDSCIMUsersResponseResponseBody) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

// UpdateSCIMUsersByIDSCIMUsersResponseBody - Not authorized to execte the specific API.
type UpdateSCIMUsersByIDSCIMUsersResponseBody struct {
	Message *string `json:"message,omitempty"`
}

func (o *UpdateSCIMUsersByIDSCIMUsersResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

type UpdateSCIMUsersByIDStatus string

const (
	UpdateSCIMUsersByIDStatusFourHundred UpdateSCIMUsersByIDStatus = "400"
	UpdateSCIMUsersByIDStatusFailed      UpdateSCIMUsersByIDStatus = "failed"
)

func (e UpdateSCIMUsersByIDStatus) ToPointer() *UpdateSCIMUsersByIDStatus {
	return &e
}

func (e *UpdateSCIMUsersByIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "400":
		fallthrough
	case "failed":
		*e = UpdateSCIMUsersByIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSCIMUsersByIDStatus: %v", v)
	}
}

// UpdateSCIMUsersByIDResponseBody - Failed
type UpdateSCIMUsersByIDResponseBody struct {
	Status      *UpdateSCIMUsersByIDStatus `json:"status,omitempty"`
	Description *string                    `json:"description,omitempty"`
	// schema of the resource
	Schemas []string `json:"schemas,omitempty"`
}

func (o *UpdateSCIMUsersByIDResponseBody) GetStatus() *UpdateSCIMUsersByIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateSCIMUsersByIDResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateSCIMUsersByIDResponseBody) GetSchemas() []string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

type UpdateSCIMUsersByIDResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Failed
	FourHundredApplicationJSONObject *UpdateSCIMUsersByIDResponseBody
	// Not authorized to execte the specific API.
	FourHundredAndThreeApplicationJSONObject *UpdateSCIMUsersByIDSCIMUsersResponseBody
	// Internal error Failed
	FiveHundredAndOneApplicationJSONObject *UpdateSCIMUsersByIDSCIMUsersResponseResponseBody
}

func (o *UpdateSCIMUsersByIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateSCIMUsersByIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateSCIMUsersByIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateSCIMUsersByIDResponse) GetFourHundredApplicationJSONObject() *UpdateSCIMUsersByIDResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *UpdateSCIMUsersByIDResponse) GetFourHundredAndThreeApplicationJSONObject() *UpdateSCIMUsersByIDSCIMUsersResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *UpdateSCIMUsersByIDResponse) GetFiveHundredAndOneApplicationJSONObject() *UpdateSCIMUsersByIDSCIMUsersResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredAndOneApplicationJSONObject
}
