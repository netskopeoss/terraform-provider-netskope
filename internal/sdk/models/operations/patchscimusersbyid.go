// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/internal/utils"
	"net/http"
)

type PatchSCIMUsersByIDSchemas string

const (
	PatchSCIMUsersByIDSchemasUrnIetfParamsScimAPIMessages20PatchOp PatchSCIMUsersByIDSchemas = "urn:ietf:params:scim:api:messages:2.0:PatchOp"
)

func (e PatchSCIMUsersByIDSchemas) ToPointer() *PatchSCIMUsersByIDSchemas {
	return &e
}

func (e *PatchSCIMUsersByIDSchemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:api:messages:2.0:PatchOp":
		*e = PatchSCIMUsersByIDSchemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSCIMUsersByIDSchemas: %v", v)
	}
}

type PatchSCIMUsersByIDPath string

const (
	PatchSCIMUsersByIDPathMembers     PatchSCIMUsersByIDPath = "members"
	PatchSCIMUsersByIDPathExternalid  PatchSCIMUsersByIDPath = "externalid"
	PatchSCIMUsersByIDPathDisplayname PatchSCIMUsersByIDPath = "displayname"
)

func (e PatchSCIMUsersByIDPath) ToPointer() *PatchSCIMUsersByIDPath {
	return &e
}

func (e *PatchSCIMUsersByIDPath) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "members":
		fallthrough
	case "externalid":
		fallthrough
	case "displayname":
		*e = PatchSCIMUsersByIDPath(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSCIMUsersByIDPath: %v", v)
	}
}

type PatchSCIMUsersByIDOp string

const (
	PatchSCIMUsersByIDOpAdd     PatchSCIMUsersByIDOp = "add"
	PatchSCIMUsersByIDOpRemove  PatchSCIMUsersByIDOp = "remove"
	PatchSCIMUsersByIDOpReplace PatchSCIMUsersByIDOp = "replace"
)

func (e PatchSCIMUsersByIDOp) ToPointer() *PatchSCIMUsersByIDOp {
	return &e
}

func (e *PatchSCIMUsersByIDOp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "add":
		fallthrough
	case "remove":
		fallthrough
	case "replace":
		*e = PatchSCIMUsersByIDOp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSCIMUsersByIDOp: %v", v)
	}
}

type Value2 struct {
}

type PatchSCIMUsersByIDValueType string

const (
	PatchSCIMUsersByIDValueTypeStr    PatchSCIMUsersByIDValueType = "str"
	PatchSCIMUsersByIDValueTypeValue2 PatchSCIMUsersByIDValueType = "value_2"
)

// PatchSCIMUsersByIDValue - value either string or object
type PatchSCIMUsersByIDValue struct {
	Str    *string
	Value2 *Value2

	Type PatchSCIMUsersByIDValueType
}

func CreatePatchSCIMUsersByIDValueStr(str string) PatchSCIMUsersByIDValue {
	typ := PatchSCIMUsersByIDValueTypeStr

	return PatchSCIMUsersByIDValue{
		Str:  &str,
		Type: typ,
	}
}

func CreatePatchSCIMUsersByIDValueValue2(value2 Value2) PatchSCIMUsersByIDValue {
	typ := PatchSCIMUsersByIDValueTypeValue2

	return PatchSCIMUsersByIDValue{
		Value2: &value2,
		Type:   typ,
	}
}

func (u *PatchSCIMUsersByIDValue) UnmarshalJSON(data []byte) error {

	value2 := Value2{}
	if err := utils.UnmarshalJSON(data, &value2, "", true, true); err == nil {
		u.Value2 = &value2
		u.Type = PatchSCIMUsersByIDValueTypeValue2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PatchSCIMUsersByIDValueTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PatchSCIMUsersByIDValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Value2 != nil {
		return utils.MarshalJSON(u.Value2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type PatchSCIMUsersByIDOperations struct {
	Path *PatchSCIMUsersByIDPath `json:"path,omitempty"`
	Op   *PatchSCIMUsersByIDOp   `json:"op,omitempty"`
	// value either string or object
	Value *PatchSCIMUsersByIDValue `json:"value,omitempty"`
}

func (o *PatchSCIMUsersByIDOperations) GetPath() *PatchSCIMUsersByIDPath {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *PatchSCIMUsersByIDOperations) GetOp() *PatchSCIMUsersByIDOp {
	if o == nil {
		return nil
	}
	return o.Op
}

func (o *PatchSCIMUsersByIDOperations) GetValue() *PatchSCIMUsersByIDValue {
	if o == nil {
		return nil
	}
	return o.Value
}

// PatchSCIMUsersByIDRequestBody - group request body
type PatchSCIMUsersByIDRequestBody struct {
	// schema of the resource
	Schemas    []PatchSCIMUsersByIDSchemas    `json:"schemas,omitempty"`
	Operations []PatchSCIMUsersByIDOperations `json:"Operations,omitempty"`
}

func (o *PatchSCIMUsersByIDRequestBody) GetSchemas() []PatchSCIMUsersByIDSchemas {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *PatchSCIMUsersByIDRequestBody) GetOperations() []PatchSCIMUsersByIDOperations {
	if o == nil {
		return nil
	}
	return o.Operations
}

type PatchSCIMUsersByIDRequest struct {
	// SCIM Used ID should be specified
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// attributed to be added.
	RequestBody *PatchSCIMUsersByIDRequestBody `request:"mediaType=application/json"`
}

func (o *PatchSCIMUsersByIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PatchSCIMUsersByIDRequest) GetRequestBody() *PatchSCIMUsersByIDRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type PatchSCIMUsersByIDSCIMGroupsStatus string

const (
	PatchSCIMUsersByIDSCIMGroupsStatusFailed            PatchSCIMUsersByIDSCIMGroupsStatus = "failed"
	PatchSCIMUsersByIDSCIMGroupsStatusFiveHundredAndOne PatchSCIMUsersByIDSCIMGroupsStatus = "501"
)

func (e PatchSCIMUsersByIDSCIMGroupsStatus) ToPointer() *PatchSCIMUsersByIDSCIMGroupsStatus {
	return &e
}

func (e *PatchSCIMUsersByIDSCIMGroupsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "failed":
		fallthrough
	case "501":
		*e = PatchSCIMUsersByIDSCIMGroupsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSCIMUsersByIDSCIMGroupsStatus: %v", v)
	}
}

// PatchSCIMUsersByIDSCIMGroupsResponseResponseBody - Internal error Failed
type PatchSCIMUsersByIDSCIMGroupsResponseResponseBody struct {
	Status  *PatchSCIMUsersByIDSCIMGroupsStatus `json:"status,omitempty"`
	Schemas *string                             `json:"schemas,omitempty"`
	Detail  *string                             `json:"detail,omitempty"`
}

func (o *PatchSCIMUsersByIDSCIMGroupsResponseResponseBody) GetStatus() *PatchSCIMUsersByIDSCIMGroupsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PatchSCIMUsersByIDSCIMGroupsResponseResponseBody) GetSchemas() *string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *PatchSCIMUsersByIDSCIMGroupsResponseResponseBody) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

// PatchSCIMUsersByIDSCIMGroupsResponseBody - Not authorized to execte the specific API.
type PatchSCIMUsersByIDSCIMGroupsResponseBody struct {
	Message *string `json:"message,omitempty"`
}

func (o *PatchSCIMUsersByIDSCIMGroupsResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

type PatchSCIMUsersByIDStatus string

const (
	PatchSCIMUsersByIDStatusFourHundred PatchSCIMUsersByIDStatus = "400"
	PatchSCIMUsersByIDStatusFailed      PatchSCIMUsersByIDStatus = "failed"
)

func (e PatchSCIMUsersByIDStatus) ToPointer() *PatchSCIMUsersByIDStatus {
	return &e
}

func (e *PatchSCIMUsersByIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "400":
		fallthrough
	case "failed":
		*e = PatchSCIMUsersByIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSCIMUsersByIDStatus: %v", v)
	}
}

// PatchSCIMUsersByIDResponseBody - Failed
type PatchSCIMUsersByIDResponseBody struct {
	Status      *PatchSCIMUsersByIDStatus `json:"status,omitempty"`
	Description *string                   `json:"description,omitempty"`
	// schema of the resource
	Schemas []string `json:"schemas,omitempty"`
}

func (o *PatchSCIMUsersByIDResponseBody) GetStatus() *PatchSCIMUsersByIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PatchSCIMUsersByIDResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PatchSCIMUsersByIDResponseBody) GetSchemas() []string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

type PatchSCIMUsersByIDResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Failed
	FourHundredApplicationJSONObject *PatchSCIMUsersByIDResponseBody
	// Not authorized to execte the specific API.
	FourHundredAndThreeApplicationJSONObject *PatchSCIMUsersByIDSCIMGroupsResponseBody
	// Internal error Failed
	FiveHundredAndOneApplicationJSONObject *PatchSCIMUsersByIDSCIMGroupsResponseResponseBody
}

func (o *PatchSCIMUsersByIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PatchSCIMUsersByIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PatchSCIMUsersByIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PatchSCIMUsersByIDResponse) GetFourHundredApplicationJSONObject() *PatchSCIMUsersByIDResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *PatchSCIMUsersByIDResponse) GetFourHundredAndThreeApplicationJSONObject() *PatchSCIMUsersByIDSCIMGroupsResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *PatchSCIMUsersByIDResponse) GetFiveHundredAndOneApplicationJSONObject() *PatchSCIMUsersByIDSCIMGroupsResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredAndOneApplicationJSONObject
}
