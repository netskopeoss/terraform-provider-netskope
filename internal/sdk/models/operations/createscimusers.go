// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type Schemas string

const (
	SchemasUrnIetfParamsScimSchemasCore20User Schemas = "urn:ietf:params:scim:schemas:core:2.0:User"
)

func (e Schemas) ToPointer() *Schemas {
	return &e
}

func (e *Schemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:schemas:core:2.0:User":
		*e = Schemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Schemas: %v", v)
	}
}

// Name - Family_name and given_name for the User
type Name struct {
	// last_name of the SCIM User.
	FamilyName *string `json:"familyName,omitempty"`
	// first_name of the SCIM User.
	GivenName *string `json:"givenName,omitempty"`
}

func (o *Name) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *Name) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

type Emails struct {
	// Email ID of the SCIM user
	Value   *string `json:"value,omitempty"`
	Primary *bool   `json:"primary,omitempty"`
}

func (o *Emails) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *Emails) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

// Meta - meta information
type Meta struct {
	// resource type User/Group.
	ResourceType *string `json:"resourceType,omitempty"`
}

func (o *Meta) GetResourceType() *string {
	if o == nil {
		return nil
	}
	return o.ResourceType
}

// CreateSCIMUsersRequestBody - user request body
type CreateSCIMUsersRequestBody struct {
	// schema of the resource
	Schemas []Schemas `json:"schemas,omitempty"`
	// UPN name of the SCIM User
	UserName *string `json:"userName,omitempty"`
	// Family_name and given_name for the User
	Name   *Name    `json:"name,omitempty"`
	Active *bool    `json:"active,omitempty"`
	Emails []Emails `json:"emails,omitempty"`
	// Optional - Scim External ID
	ExternalID *string `json:"externalId,omitempty"`
	// meta information
	Meta *Meta `json:"meta,omitempty"`
}

func (o *CreateSCIMUsersRequestBody) GetSchemas() []Schemas {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *CreateSCIMUsersRequestBody) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *CreateSCIMUsersRequestBody) GetName() *Name {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateSCIMUsersRequestBody) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *CreateSCIMUsersRequestBody) GetEmails() []Emails {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *CreateSCIMUsersRequestBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *CreateSCIMUsersRequestBody) GetMeta() *Meta {
	if o == nil {
		return nil
	}
	return o.Meta
}

type CreateSCIMUsersSCIMUsersResponseStatus string

const (
	CreateSCIMUsersSCIMUsersResponseStatusFailed            CreateSCIMUsersSCIMUsersResponseStatus = "failed"
	CreateSCIMUsersSCIMUsersResponseStatusFiveHundredAndOne CreateSCIMUsersSCIMUsersResponseStatus = "501"
)

func (e CreateSCIMUsersSCIMUsersResponseStatus) ToPointer() *CreateSCIMUsersSCIMUsersResponseStatus {
	return &e
}

func (e *CreateSCIMUsersSCIMUsersResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "failed":
		fallthrough
	case "501":
		*e = CreateSCIMUsersSCIMUsersResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSCIMUsersSCIMUsersResponseStatus: %v", v)
	}
}

// CreateSCIMUsersSCIMUsersResponse501ResponseBody - Internal error Failed
type CreateSCIMUsersSCIMUsersResponse501ResponseBody struct {
	Status  *CreateSCIMUsersSCIMUsersResponseStatus `json:"status,omitempty"`
	Schemas *string                                 `json:"schemas,omitempty"`
	Detail  *string                                 `json:"detail,omitempty"`
}

func (o *CreateSCIMUsersSCIMUsersResponse501ResponseBody) GetStatus() *CreateSCIMUsersSCIMUsersResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateSCIMUsersSCIMUsersResponse501ResponseBody) GetSchemas() *string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *CreateSCIMUsersSCIMUsersResponse501ResponseBody) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

// CreateSCIMUsersSCIMUsersResponseResponseBody - Not authorized to execte the specific API.
type CreateSCIMUsersSCIMUsersResponseResponseBody struct {
	Message *string `json:"message,omitempty"`
}

func (o *CreateSCIMUsersSCIMUsersResponseResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

type CreateSCIMUsersSCIMUsersStatus string

const (
	CreateSCIMUsersSCIMUsersStatusFourHundred CreateSCIMUsersSCIMUsersStatus = "400"
	CreateSCIMUsersSCIMUsersStatusFailed      CreateSCIMUsersSCIMUsersStatus = "failed"
)

func (e CreateSCIMUsersSCIMUsersStatus) ToPointer() *CreateSCIMUsersSCIMUsersStatus {
	return &e
}

func (e *CreateSCIMUsersSCIMUsersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "400":
		fallthrough
	case "failed":
		*e = CreateSCIMUsersSCIMUsersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSCIMUsersSCIMUsersStatus: %v", v)
	}
}

// CreateSCIMUsersSCIMUsersResponseBody - Failed
type CreateSCIMUsersSCIMUsersResponseBody struct {
	Status      *CreateSCIMUsersSCIMUsersStatus `json:"status,omitempty"`
	Description *string                         `json:"description,omitempty"`
	// schema of the resource
	Schemas []string `json:"schemas,omitempty"`
}

func (o *CreateSCIMUsersSCIMUsersResponseBody) GetStatus() *CreateSCIMUsersSCIMUsersStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateSCIMUsersSCIMUsersResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateSCIMUsersSCIMUsersResponseBody) GetSchemas() []string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

// CreateSCIMUsersName - Family_name and given_name for the User
type CreateSCIMUsersName struct {
	// last_name of the SCIM User.
	FamilyName *string `json:"familyName,omitempty"`
	// first_name of the SCIM User.
	GivenName *string `json:"givenName,omitempty"`
}

func (o *CreateSCIMUsersName) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *CreateSCIMUsersName) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

type CreateSCIMUsersEmails struct {
	// Email ID of the SCIM user
	Value   *string `json:"value,omitempty"`
	Primary *bool   `json:"primary,omitempty"`
}

func (o *CreateSCIMUsersEmails) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *CreateSCIMUsersEmails) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

type CreateSCIMUsersStatus int64

const (
	CreateSCIMUsersStatusTwoHundredAndOne CreateSCIMUsersStatus = 201
	CreateSCIMUsersStatusTwoHundred       CreateSCIMUsersStatus = 200
)

func (e CreateSCIMUsersStatus) ToPointer() *CreateSCIMUsersStatus {
	return &e
}

func (e *CreateSCIMUsersStatus) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 201:
		fallthrough
	case 200:
		*e = CreateSCIMUsersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSCIMUsersStatus: %v", v)
	}
}

// CreateSCIMUsersResponseBody - Successfully added the User.
type CreateSCIMUsersResponseBody struct {
	// schema of the resource
	Schemas []string `json:"schemas,omitempty"`
	// SCIM User ID
	ID *string `json:"id,omitempty"`
	// UPN name of the SCIM User
	UserName *string `json:"userName,omitempty"`
	// Family_name and given_name for the User
	Name   *CreateSCIMUsersName    `json:"name,omitempty"`
	Active *bool                   `json:"active,omitempty"`
	Emails []CreateSCIMUsersEmails `json:"emails,omitempty"`
	// Optional - Scim External ID
	ExternalID *string                `json:"externalId,omitempty"`
	Status     *CreateSCIMUsersStatus `json:"status,omitempty"`
}

func (o *CreateSCIMUsersResponseBody) GetSchemas() []string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *CreateSCIMUsersResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateSCIMUsersResponseBody) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *CreateSCIMUsersResponseBody) GetName() *CreateSCIMUsersName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateSCIMUsersResponseBody) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *CreateSCIMUsersResponseBody) GetEmails() []CreateSCIMUsersEmails {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *CreateSCIMUsersResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *CreateSCIMUsersResponseBody) GetStatus() *CreateSCIMUsersStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type CreateSCIMUsersResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successfully added the User.
	TwoHundredAndOneApplicationJSONObject *CreateSCIMUsersResponseBody
	// Failed
	FourHundredApplicationJSONObject *CreateSCIMUsersSCIMUsersResponseBody
	// Not authorized to execte the specific API.
	FourHundredAndThreeApplicationJSONObject *CreateSCIMUsersSCIMUsersResponseResponseBody
	// Internal error Failed
	FiveHundredAndOneApplicationJSONObject *CreateSCIMUsersSCIMUsersResponse501ResponseBody
}

func (o *CreateSCIMUsersResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateSCIMUsersResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateSCIMUsersResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateSCIMUsersResponse) GetTwoHundredAndOneApplicationJSONObject() *CreateSCIMUsersResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredAndOneApplicationJSONObject
}

func (o *CreateSCIMUsersResponse) GetFourHundredApplicationJSONObject() *CreateSCIMUsersSCIMUsersResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *CreateSCIMUsersResponse) GetFourHundredAndThreeApplicationJSONObject() *CreateSCIMUsersSCIMUsersResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *CreateSCIMUsersResponse) GetFiveHundredAndOneApplicationJSONObject() *CreateSCIMUsersSCIMUsersResponse501ResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredAndOneApplicationJSONObject
}
