// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/shared"
	"net/http"
)

// UpdateNPAPolicyGroupsQueryParamSilent - flag to skip output except status code
type UpdateNPAPolicyGroupsQueryParamSilent string

const (
	UpdateNPAPolicyGroupsQueryParamSilentOne  UpdateNPAPolicyGroupsQueryParamSilent = "1"
	UpdateNPAPolicyGroupsQueryParamSilentZero UpdateNPAPolicyGroupsQueryParamSilent = "0"
)

func (e UpdateNPAPolicyGroupsQueryParamSilent) ToPointer() *UpdateNPAPolicyGroupsQueryParamSilent {
	return &e
}
func (e *UpdateNPAPolicyGroupsQueryParamSilent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "0":
		*e = UpdateNPAPolicyGroupsQueryParamSilent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNPAPolicyGroupsQueryParamSilent: %v", v)
	}
}

type UpdateNPAPolicyGroupsRequest struct {
	// policy group rule id
	GroupID string `pathParam:"style=simple,explode=false,name=id"`
	// flag to skip output except status code
	Silent                *UpdateNPAPolicyGroupsQueryParamSilent `queryParam:"style=form,explode=true,name=silent"`
	NpaPolicygroupRequest shared.NpaPolicygroupRequest           `request:"mediaType=application/json"`
}

func (o *UpdateNPAPolicyGroupsRequest) GetGroupID() string {
	if o == nil {
		return ""
	}
	return o.GroupID
}

func (o *UpdateNPAPolicyGroupsRequest) GetSilent() *UpdateNPAPolicyGroupsQueryParamSilent {
	if o == nil {
		return nil
	}
	return o.Silent
}

func (o *UpdateNPAPolicyGroupsRequest) GetNpaPolicygroupRequest() shared.NpaPolicygroupRequest {
	if o == nil {
		return shared.NpaPolicygroupRequest{}
	}
	return o.NpaPolicygroupRequest
}

type UpdateNPAPolicyGroupsStatus string

const (
	UpdateNPAPolicyGroupsStatusSuccess UpdateNPAPolicyGroupsStatus = "success"
	UpdateNPAPolicyGroupsStatusError   UpdateNPAPolicyGroupsStatus = "error"
)

func (e UpdateNPAPolicyGroupsStatus) ToPointer() *UpdateNPAPolicyGroupsStatus {
	return &e
}
func (e *UpdateNPAPolicyGroupsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "error":
		*e = UpdateNPAPolicyGroupsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNPAPolicyGroupsStatus: %v", v)
	}
}

// UpdateNPAPolicyGroupsResponseBody - successful operation
type UpdateNPAPolicyGroupsResponseBody struct {
	Data   *shared.NpaPolicygroupResponseItem `json:"data,omitempty"`
	Status *UpdateNPAPolicyGroupsStatus       `json:"status,omitempty"`
}

func (o *UpdateNPAPolicyGroupsResponseBody) GetData() *shared.NpaPolicygroupResponseItem {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *UpdateNPAPolicyGroupsResponseBody) GetStatus() *UpdateNPAPolicyGroupsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type UpdateNPAPolicyGroupsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// successful operation
	Object *UpdateNPAPolicyGroupsResponseBody
	// Invalid request
	NpaPolicygroupResponse400 *shared.NpaPolicygroupResponse400
}

func (o *UpdateNPAPolicyGroupsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateNPAPolicyGroupsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateNPAPolicyGroupsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateNPAPolicyGroupsResponse) GetObject() *UpdateNPAPolicyGroupsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *UpdateNPAPolicyGroupsResponse) GetNpaPolicygroupResponse400() *shared.NpaPolicygroupResponse400 {
	if o == nil {
		return nil
	}
	return o.NpaPolicygroupResponse400
}
