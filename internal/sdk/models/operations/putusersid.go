// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PutUsersIDSchemas string

const (
	PutUsersIDSchemasUrnIetfParamsScimSchemasCore20User PutUsersIDSchemas = "urn:ietf:params:scim:schemas:core:2.0:User"
)

func (e PutUsersIDSchemas) ToPointer() *PutUsersIDSchemas {
	return &e
}

func (e *PutUsersIDSchemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:schemas:core:2.0:User":
		*e = PutUsersIDSchemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutUsersIDSchemas: %v", v)
	}
}

// PutUsersIDName - Family_name and given_name for the User
type PutUsersIDName struct {
	// last_name of the SCIM User.
	FamilyName *string `json:"familyName,omitempty"`
	// first_name of the SCIM User.
	GivenName *string `json:"givenName,omitempty"`
}

func (o *PutUsersIDName) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *PutUsersIDName) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

type PutUsersIDEmails struct {
	// Email ID of the SCIM user
	Value   *string `json:"value,omitempty"`
	Primary *bool   `json:"primary,omitempty"`
}

func (o *PutUsersIDEmails) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *PutUsersIDEmails) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

// PutUsersIDMeta - meta information
type PutUsersIDMeta struct {
	// resource type User/Group.
	ResourceType *string `json:"resourceType,omitempty"`
}

func (o *PutUsersIDMeta) GetResourceType() *string {
	if o == nil {
		return nil
	}
	return o.ResourceType
}

// PutUsersIDRequestBody - User object
type PutUsersIDRequestBody struct {
	// schema of the resource
	Schemas []PutUsersIDSchemas `json:"schemas,omitempty"`
	// UPN name of the SCIM User
	UserName *string `json:"userName,omitempty"`
	// Family_name and given_name for the User
	Name   *PutUsersIDName    `json:"name,omitempty"`
	Active *bool              `json:"active,omitempty"`
	Emails []PutUsersIDEmails `json:"emails,omitempty"`
	// Optional - Scim External ID
	ExternalID *string `json:"externalId,omitempty"`
	// meta information
	Meta *PutUsersIDMeta `json:"meta,omitempty"`
}

func (o *PutUsersIDRequestBody) GetSchemas() []PutUsersIDSchemas {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *PutUsersIDRequestBody) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *PutUsersIDRequestBody) GetName() *PutUsersIDName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PutUsersIDRequestBody) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *PutUsersIDRequestBody) GetEmails() []PutUsersIDEmails {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *PutUsersIDRequestBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *PutUsersIDRequestBody) GetMeta() *PutUsersIDMeta {
	if o == nil {
		return nil
	}
	return o.Meta
}

type PutUsersIDRequest struct {
	// SCIM Used ID should be specified
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// user to update
	RequestBody *PutUsersIDRequestBody `request:"mediaType=application/scim+json"`
}

func (o *PutUsersIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PutUsersIDRequest) GetRequestBody() *PutUsersIDRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type PutUsersIDScimUsersResponseStatus string

const (
	PutUsersIDScimUsersResponseStatusFailed            PutUsersIDScimUsersResponseStatus = "failed"
	PutUsersIDScimUsersResponseStatusFiveHundredAndOne PutUsersIDScimUsersResponseStatus = "501"
)

func (e PutUsersIDScimUsersResponseStatus) ToPointer() *PutUsersIDScimUsersResponseStatus {
	return &e
}

func (e *PutUsersIDScimUsersResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "failed":
		fallthrough
	case "501":
		*e = PutUsersIDScimUsersResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutUsersIDScimUsersResponseStatus: %v", v)
	}
}

// PutUsersIDScimUsersResponse501ResponseBody - Internal error Failed
type PutUsersIDScimUsersResponse501ResponseBody struct {
	Status  *PutUsersIDScimUsersResponseStatus `json:"status,omitempty"`
	Schemas *string                            `json:"schemas,omitempty"`
	Detail  *string                            `json:"detail,omitempty"`
}

func (o *PutUsersIDScimUsersResponse501ResponseBody) GetStatus() *PutUsersIDScimUsersResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PutUsersIDScimUsersResponse501ResponseBody) GetSchemas() *string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *PutUsersIDScimUsersResponse501ResponseBody) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

// PutUsersIDScimUsersResponseResponseBody - Not authorized to execte the specific API.
type PutUsersIDScimUsersResponseResponseBody struct {
	Message *string `json:"message,omitempty"`
}

func (o *PutUsersIDScimUsersResponseResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

type PutUsersIDScimUsersStatus string

const (
	PutUsersIDScimUsersStatusFourHundred PutUsersIDScimUsersStatus = "400"
	PutUsersIDScimUsersStatusFailed      PutUsersIDScimUsersStatus = "failed"
)

func (e PutUsersIDScimUsersStatus) ToPointer() *PutUsersIDScimUsersStatus {
	return &e
}

func (e *PutUsersIDScimUsersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "400":
		fallthrough
	case "failed":
		*e = PutUsersIDScimUsersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutUsersIDScimUsersStatus: %v", v)
	}
}

// PutUsersIDScimUsersResponseBody - Failed
type PutUsersIDScimUsersResponseBody struct {
	Status      *PutUsersIDScimUsersStatus `json:"status,omitempty"`
	Description *string                    `json:"description,omitempty"`
	// schema of the resource
	Schemas []string `json:"schemas,omitempty"`
}

func (o *PutUsersIDScimUsersResponseBody) GetStatus() *PutUsersIDScimUsersStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PutUsersIDScimUsersResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PutUsersIDScimUsersResponseBody) GetSchemas() []string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

// PutUsersIDScimUsersName - Family_name and given_name for the User
type PutUsersIDScimUsersName struct {
	// last_name of the SCIM User.
	FamilyName *string `json:"familyName,omitempty"`
	// first_name of the SCIM User.
	GivenName *string `json:"givenName,omitempty"`
}

func (o *PutUsersIDScimUsersName) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *PutUsersIDScimUsersName) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

type PutUsersIDScimUsersEmails struct {
	// Email ID of the SCIM user
	Value   *string `json:"value,omitempty"`
	Primary *bool   `json:"primary,omitempty"`
}

func (o *PutUsersIDScimUsersEmails) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *PutUsersIDScimUsersEmails) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

type PutUsersIDStatus int64

const (
	PutUsersIDStatusTwoHundred PutUsersIDStatus = 200
)

func (e PutUsersIDStatus) ToPointer() *PutUsersIDStatus {
	return &e
}

func (e *PutUsersIDStatus) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 200:
		*e = PutUsersIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutUsersIDStatus: %v", v)
	}
}

// PutUsersIDResponseBody - Successfully updated the User.
type PutUsersIDResponseBody struct {
	// schema of the resource
	Schemas []string `json:"schemas,omitempty"`
	// SCIM User ID
	ID *string `json:"id,omitempty"`
	// UPN name of the SCIM User
	UserName *string `json:"userName,omitempty"`
	// Family_name and given_name for the User
	Name   *PutUsersIDScimUsersName    `json:"name,omitempty"`
	Active *bool                       `json:"active,omitempty"`
	Emails []PutUsersIDScimUsersEmails `json:"emails,omitempty"`
	// Optional - Scim External ID
	ExternalID *string           `json:"externalId,omitempty"`
	Status     *PutUsersIDStatus `json:"status,omitempty"`
}

func (o *PutUsersIDResponseBody) GetSchemas() []string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *PutUsersIDResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PutUsersIDResponseBody) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *PutUsersIDResponseBody) GetName() *PutUsersIDScimUsersName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PutUsersIDResponseBody) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *PutUsersIDResponseBody) GetEmails() []PutUsersIDScimUsersEmails {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *PutUsersIDResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *PutUsersIDResponseBody) GetStatus() *PutUsersIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type PutUsersIDResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successfully updated the User.
	TwoHundredApplicationScimPlusJSONObject *PutUsersIDResponseBody
	// Failed
	FourHundredApplicationJSONObject *PutUsersIDScimUsersResponseBody
	// Not authorized to execte the specific API.
	FourHundredAndThreeApplicationJSONObject *PutUsersIDScimUsersResponseResponseBody
	// Internal error Failed
	FiveHundredAndOneApplicationJSONObject *PutUsersIDScimUsersResponse501ResponseBody
}

func (o *PutUsersIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PutUsersIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PutUsersIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PutUsersIDResponse) GetTwoHundredApplicationScimPlusJSONObject() *PutUsersIDResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationScimPlusJSONObject
}

func (o *PutUsersIDResponse) GetFourHundredApplicationJSONObject() *PutUsersIDScimUsersResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *PutUsersIDResponse) GetFourHundredAndThreeApplicationJSONObject() *PutUsersIDScimUsersResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *PutUsersIDResponse) GetFiveHundredAndOneApplicationJSONObject() *PutUsersIDScimUsersResponse501ResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredAndOneApplicationJSONObject
}
