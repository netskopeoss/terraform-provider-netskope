// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PutSCIMUsersByIDSchemas string

const (
	PutSCIMUsersByIDSchemasUrnIetfParamsScimSchemasCore20User PutSCIMUsersByIDSchemas = "urn:ietf:params:scim:schemas:core:2.0:User"
)

func (e PutSCIMUsersByIDSchemas) ToPointer() *PutSCIMUsersByIDSchemas {
	return &e
}

func (e *PutSCIMUsersByIDSchemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:schemas:core:2.0:User":
		*e = PutSCIMUsersByIDSchemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutSCIMUsersByIDSchemas: %v", v)
	}
}

// PutSCIMUsersByIDName - Family_name and given_name for the User
type PutSCIMUsersByIDName struct {
	// last_name of the SCIM User.
	FamilyName *string `json:"familyName,omitempty"`
	// first_name of the SCIM User.
	GivenName *string `json:"givenName,omitempty"`
}

func (o *PutSCIMUsersByIDName) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *PutSCIMUsersByIDName) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

type PutSCIMUsersByIDEmails struct {
	// Email ID of the SCIM user
	Value   *string `json:"value,omitempty"`
	Primary *bool   `json:"primary,omitempty"`
}

func (o *PutSCIMUsersByIDEmails) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *PutSCIMUsersByIDEmails) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

// PutSCIMUsersByIDMeta - meta information
type PutSCIMUsersByIDMeta struct {
	// resource type User/Group.
	ResourceType *string `json:"resourceType,omitempty"`
}

func (o *PutSCIMUsersByIDMeta) GetResourceType() *string {
	if o == nil {
		return nil
	}
	return o.ResourceType
}

// PutSCIMUsersByIDRequestBody - User object
type PutSCIMUsersByIDRequestBody struct {
	// schema of the resource
	Schemas []PutSCIMUsersByIDSchemas `json:"schemas,omitempty"`
	// UPN name of the SCIM User
	UserName *string `json:"userName,omitempty"`
	// Family_name and given_name for the User
	Name   *PutSCIMUsersByIDName    `json:"name,omitempty"`
	Active *bool                    `json:"active,omitempty"`
	Emails []PutSCIMUsersByIDEmails `json:"emails,omitempty"`
	// Optional - Scim External ID
	ExternalID *string `json:"externalId,omitempty"`
	// meta information
	Meta *PutSCIMUsersByIDMeta `json:"meta,omitempty"`
}

func (o *PutSCIMUsersByIDRequestBody) GetSchemas() []PutSCIMUsersByIDSchemas {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *PutSCIMUsersByIDRequestBody) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *PutSCIMUsersByIDRequestBody) GetName() *PutSCIMUsersByIDName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PutSCIMUsersByIDRequestBody) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *PutSCIMUsersByIDRequestBody) GetEmails() []PutSCIMUsersByIDEmails {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *PutSCIMUsersByIDRequestBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *PutSCIMUsersByIDRequestBody) GetMeta() *PutSCIMUsersByIDMeta {
	if o == nil {
		return nil
	}
	return o.Meta
}

type PutSCIMUsersByIDRequest struct {
	// SCIM Used ID should be specified
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// user to update
	RequestBody *PutSCIMUsersByIDRequestBody `request:"mediaType=application/json"`
}

func (o *PutSCIMUsersByIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PutSCIMUsersByIDRequest) GetRequestBody() *PutSCIMUsersByIDRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type PutSCIMUsersByIDSCIMUsersResponseStatus string

const (
	PutSCIMUsersByIDSCIMUsersResponseStatusFailed            PutSCIMUsersByIDSCIMUsersResponseStatus = "failed"
	PutSCIMUsersByIDSCIMUsersResponseStatusFiveHundredAndOne PutSCIMUsersByIDSCIMUsersResponseStatus = "501"
)

func (e PutSCIMUsersByIDSCIMUsersResponseStatus) ToPointer() *PutSCIMUsersByIDSCIMUsersResponseStatus {
	return &e
}

func (e *PutSCIMUsersByIDSCIMUsersResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "failed":
		fallthrough
	case "501":
		*e = PutSCIMUsersByIDSCIMUsersResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutSCIMUsersByIDSCIMUsersResponseStatus: %v", v)
	}
}

// PutSCIMUsersByIDSCIMUsersResponse501ResponseBody - Internal error Failed
type PutSCIMUsersByIDSCIMUsersResponse501ResponseBody struct {
	Status  *PutSCIMUsersByIDSCIMUsersResponseStatus `json:"status,omitempty"`
	Schemas *string                                  `json:"schemas,omitempty"`
	Detail  *string                                  `json:"detail,omitempty"`
}

func (o *PutSCIMUsersByIDSCIMUsersResponse501ResponseBody) GetStatus() *PutSCIMUsersByIDSCIMUsersResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PutSCIMUsersByIDSCIMUsersResponse501ResponseBody) GetSchemas() *string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *PutSCIMUsersByIDSCIMUsersResponse501ResponseBody) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

// PutSCIMUsersByIDSCIMUsersResponseResponseBody - Not authorized to execte the specific API.
type PutSCIMUsersByIDSCIMUsersResponseResponseBody struct {
	Message *string `json:"message,omitempty"`
}

func (o *PutSCIMUsersByIDSCIMUsersResponseResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

type PutSCIMUsersByIDSCIMUsersStatus string

const (
	PutSCIMUsersByIDSCIMUsersStatusFourHundred PutSCIMUsersByIDSCIMUsersStatus = "400"
	PutSCIMUsersByIDSCIMUsersStatusFailed      PutSCIMUsersByIDSCIMUsersStatus = "failed"
)

func (e PutSCIMUsersByIDSCIMUsersStatus) ToPointer() *PutSCIMUsersByIDSCIMUsersStatus {
	return &e
}

func (e *PutSCIMUsersByIDSCIMUsersStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "400":
		fallthrough
	case "failed":
		*e = PutSCIMUsersByIDSCIMUsersStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutSCIMUsersByIDSCIMUsersStatus: %v", v)
	}
}

// PutSCIMUsersByIDSCIMUsersResponseBody - Failed
type PutSCIMUsersByIDSCIMUsersResponseBody struct {
	Status      *PutSCIMUsersByIDSCIMUsersStatus `json:"status,omitempty"`
	Description *string                          `json:"description,omitempty"`
	// schema of the resource
	Schemas []string `json:"schemas,omitempty"`
}

func (o *PutSCIMUsersByIDSCIMUsersResponseBody) GetStatus() *PutSCIMUsersByIDSCIMUsersStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PutSCIMUsersByIDSCIMUsersResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PutSCIMUsersByIDSCIMUsersResponseBody) GetSchemas() []string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

// PutSCIMUsersByIDSCIMUsersName - Family_name and given_name for the User
type PutSCIMUsersByIDSCIMUsersName struct {
	// last_name of the SCIM User.
	FamilyName *string `json:"familyName,omitempty"`
	// first_name of the SCIM User.
	GivenName *string `json:"givenName,omitempty"`
}

func (o *PutSCIMUsersByIDSCIMUsersName) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *PutSCIMUsersByIDSCIMUsersName) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

type PutSCIMUsersByIDSCIMUsersEmails struct {
	// Email ID of the SCIM user
	Value   *string `json:"value,omitempty"`
	Primary *bool   `json:"primary,omitempty"`
}

func (o *PutSCIMUsersByIDSCIMUsersEmails) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *PutSCIMUsersByIDSCIMUsersEmails) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

type PutSCIMUsersByIDStatus int64

const (
	PutSCIMUsersByIDStatusTwoHundred PutSCIMUsersByIDStatus = 200
)

func (e PutSCIMUsersByIDStatus) ToPointer() *PutSCIMUsersByIDStatus {
	return &e
}

func (e *PutSCIMUsersByIDStatus) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 200:
		*e = PutSCIMUsersByIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutSCIMUsersByIDStatus: %v", v)
	}
}

// PutSCIMUsersByIDResponseBody - Successfully updated the User.
type PutSCIMUsersByIDResponseBody struct {
	// schema of the resource
	Schemas []string `json:"schemas,omitempty"`
	// SCIM User ID
	ID *string `json:"id,omitempty"`
	// UPN name of the SCIM User
	UserName *string `json:"userName,omitempty"`
	// Family_name and given_name for the User
	Name   *PutSCIMUsersByIDSCIMUsersName    `json:"name,omitempty"`
	Active *bool                             `json:"active,omitempty"`
	Emails []PutSCIMUsersByIDSCIMUsersEmails `json:"emails,omitempty"`
	// Optional - Scim External ID
	ExternalID *string                 `json:"externalId,omitempty"`
	Status     *PutSCIMUsersByIDStatus `json:"status,omitempty"`
}

func (o *PutSCIMUsersByIDResponseBody) GetSchemas() []string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *PutSCIMUsersByIDResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PutSCIMUsersByIDResponseBody) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *PutSCIMUsersByIDResponseBody) GetName() *PutSCIMUsersByIDSCIMUsersName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PutSCIMUsersByIDResponseBody) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *PutSCIMUsersByIDResponseBody) GetEmails() []PutSCIMUsersByIDSCIMUsersEmails {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *PutSCIMUsersByIDResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *PutSCIMUsersByIDResponseBody) GetStatus() *PutSCIMUsersByIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type PutSCIMUsersByIDResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successfully updated the User.
	TwoHundredApplicationJSONObject *PutSCIMUsersByIDResponseBody
	// Failed
	FourHundredApplicationJSONObject *PutSCIMUsersByIDSCIMUsersResponseBody
	// Not authorized to execte the specific API.
	FourHundredAndThreeApplicationJSONObject *PutSCIMUsersByIDSCIMUsersResponseResponseBody
	// Internal error Failed
	FiveHundredAndOneApplicationJSONObject *PutSCIMUsersByIDSCIMUsersResponse501ResponseBody
}

func (o *PutSCIMUsersByIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PutSCIMUsersByIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PutSCIMUsersByIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PutSCIMUsersByIDResponse) GetTwoHundredApplicationJSONObject() *PutSCIMUsersByIDResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *PutSCIMUsersByIDResponse) GetFourHundredApplicationJSONObject() *PutSCIMUsersByIDSCIMUsersResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredApplicationJSONObject
}

func (o *PutSCIMUsersByIDResponse) GetFourHundredAndThreeApplicationJSONObject() *PutSCIMUsersByIDSCIMUsersResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *PutSCIMUsersByIDResponse) GetFiveHundredAndOneApplicationJSONObject() *PutSCIMUsersByIDSCIMUsersResponse501ResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredAndOneApplicationJSONObject
}
