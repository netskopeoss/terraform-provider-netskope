// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/netskopeoss/terraform-provider-netskope/internal/sdk/models/shared"
	"net/http"
)

// UpdateNPARulesByIDQueryParamSilent - flag to skip output except status code
type UpdateNPARulesByIDQueryParamSilent string

const (
	UpdateNPARulesByIDQueryParamSilentOne  UpdateNPARulesByIDQueryParamSilent = "1"
	UpdateNPARulesByIDQueryParamSilentZero UpdateNPARulesByIDQueryParamSilent = "0"
)

func (e UpdateNPARulesByIDQueryParamSilent) ToPointer() *UpdateNPARulesByIDQueryParamSilent {
	return &e
}
func (e *UpdateNPARulesByIDQueryParamSilent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "0":
		*e = UpdateNPARulesByIDQueryParamSilent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNPARulesByIDQueryParamSilent: %v", v)
	}
}

type UpdateNPARulesByIDRequest struct {
	// npa policy id
	RuleID string `pathParam:"style=simple,explode=false,name=id"`
	// flag to skip output except status code
	Silent           *UpdateNPARulesByIDQueryParamSilent `queryParam:"style=form,explode=true,name=silent"`
	NpaPolicyRequest shared.NpaPolicyRequest             `request:"mediaType=application/json"`
}

func (o *UpdateNPARulesByIDRequest) GetRuleID() string {
	if o == nil {
		return ""
	}
	return o.RuleID
}

func (o *UpdateNPARulesByIDRequest) GetSilent() *UpdateNPARulesByIDQueryParamSilent {
	if o == nil {
		return nil
	}
	return o.Silent
}

func (o *UpdateNPARulesByIDRequest) GetNpaPolicyRequest() shared.NpaPolicyRequest {
	if o == nil {
		return shared.NpaPolicyRequest{}
	}
	return o.NpaPolicyRequest
}

type UpdateNPARulesByIDStatus string

const (
	UpdateNPARulesByIDStatusSuccess UpdateNPARulesByIDStatus = "success"
	UpdateNPARulesByIDStatusError   UpdateNPARulesByIDStatus = "error"
)

func (e UpdateNPARulesByIDStatus) ToPointer() *UpdateNPARulesByIDStatus {
	return &e
}
func (e *UpdateNPARulesByIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "error":
		*e = UpdateNPARulesByIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNPARulesByIDStatus: %v", v)
	}
}

// UpdateNPARulesByIDResponseBody - successful operation
type UpdateNPARulesByIDResponseBody struct {
	Data   *shared.NpaPolicyResponseItem `json:"data,omitempty"`
	Status *UpdateNPARulesByIDStatus     `json:"status,omitempty"`
}

func (o *UpdateNPARulesByIDResponseBody) GetData() *shared.NpaPolicyResponseItem {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *UpdateNPARulesByIDResponseBody) GetStatus() *UpdateNPARulesByIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type UpdateNPARulesByIDResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// successful operation
	Object *UpdateNPARulesByIDResponseBody
	// Invalid request
	NpaPolicyResponse400 *shared.NpaPolicyResponse400
}

func (o *UpdateNPARulesByIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateNPARulesByIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateNPARulesByIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateNPARulesByIDResponse) GetObject() *UpdateNPARulesByIDResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *UpdateNPARulesByIDResponse) GetNpaPolicyResponse400() *shared.NpaPolicyResponse400 {
	if o == nil {
		return nil
	}
	return o.NpaPolicyResponse400
}
