// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetSCIMGroupsByIDRequest struct {
	// SCIM Group ID required.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *GetSCIMGroupsByIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetSCIMGroupsByIDStatus string

const (
	GetSCIMGroupsByIDStatusFailed            GetSCIMGroupsByIDStatus = "failed"
	GetSCIMGroupsByIDStatusFiveHundredAndOne GetSCIMGroupsByIDStatus = "501"
)

func (e GetSCIMGroupsByIDStatus) ToPointer() *GetSCIMGroupsByIDStatus {
	return &e
}

func (e *GetSCIMGroupsByIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "failed":
		fallthrough
	case "501":
		*e = GetSCIMGroupsByIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSCIMGroupsByIDStatus: %v", v)
	}
}

// GetSCIMGroupsByIDSCIMGroupsResponseResponseBody - Internal error Failed
type GetSCIMGroupsByIDSCIMGroupsResponseResponseBody struct {
	Status  *GetSCIMGroupsByIDStatus `json:"status,omitempty"`
	Schemas *string                  `json:"schemas,omitempty"`
	Detail  *string                  `json:"detail,omitempty"`
}

func (o *GetSCIMGroupsByIDSCIMGroupsResponseResponseBody) GetStatus() *GetSCIMGroupsByIDStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetSCIMGroupsByIDSCIMGroupsResponseResponseBody) GetSchemas() *string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *GetSCIMGroupsByIDSCIMGroupsResponseResponseBody) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

// GetSCIMGroupsByIDSCIMGroupsResponseBody - Not authorized to execte the specific API.
type GetSCIMGroupsByIDSCIMGroupsResponseBody struct {
	Message *string `json:"message,omitempty"`
}

func (o *GetSCIMGroupsByIDSCIMGroupsResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

type GetSCIMGroupsByIDSchemas string

const (
	GetSCIMGroupsByIDSchemasUrnIetfParamsScimSchemasCore20Group GetSCIMGroupsByIDSchemas = "urn:ietf:params:scim:schemas:core:2.0:Group"
)

func (e GetSCIMGroupsByIDSchemas) ToPointer() *GetSCIMGroupsByIDSchemas {
	return &e
}

func (e *GetSCIMGroupsByIDSchemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:schemas:core:2.0:Group":
		*e = GetSCIMGroupsByIDSchemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSCIMGroupsByIDSchemas: %v", v)
	}
}

type GetSCIMGroupsByIDMembers struct {
	Value *string `json:"value,omitempty"`
}

func (o *GetSCIMGroupsByIDMembers) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// GetSCIMGroupsByIDMeta - meta information
type GetSCIMGroupsByIDMeta struct {
	// resource type User/Group.
	ResourceType *string `json:"resourceType,omitempty"`
}

func (o *GetSCIMGroupsByIDMeta) GetResourceType() *string {
	if o == nil {
		return nil
	}
	return o.ResourceType
}

// GetSCIMGroupsByIDResponseBody - Successfully deleted the User.
type GetSCIMGroupsByIDResponseBody struct {
	// SCIM Group ID
	ID *string `json:"id,omitempty"`
	// schema of the resource
	Schemas []GetSCIMGroupsByIDSchemas `json:"schemas,omitempty"`
	// Display name for group.
	DisplayName *string                    `json:"displayName,omitempty"`
	Members     []GetSCIMGroupsByIDMembers `json:"members,omitempty"`
	// Optional - Scim External ID
	ExternalID *string `json:"externalId,omitempty"`
	// meta information
	Meta *GetSCIMGroupsByIDMeta `json:"meta,omitempty"`
}

func (o *GetSCIMGroupsByIDResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetSCIMGroupsByIDResponseBody) GetSchemas() []GetSCIMGroupsByIDSchemas {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *GetSCIMGroupsByIDResponseBody) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *GetSCIMGroupsByIDResponseBody) GetMembers() []GetSCIMGroupsByIDMembers {
	if o == nil {
		return nil
	}
	return o.Members
}

func (o *GetSCIMGroupsByIDResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *GetSCIMGroupsByIDResponseBody) GetMeta() *GetSCIMGroupsByIDMeta {
	if o == nil {
		return nil
	}
	return o.Meta
}

type GetSCIMGroupsByIDResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successfully deleted the User.
	TwoHundredApplicationJSONObject *GetSCIMGroupsByIDResponseBody
	// Not authorized to execte the specific API.
	FourHundredAndThreeApplicationJSONObject *GetSCIMGroupsByIDSCIMGroupsResponseBody
	// Internal error Failed
	FiveHundredAndOneApplicationJSONObject *GetSCIMGroupsByIDSCIMGroupsResponseResponseBody
}

func (o *GetSCIMGroupsByIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetSCIMGroupsByIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetSCIMGroupsByIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetSCIMGroupsByIDResponse) GetTwoHundredApplicationJSONObject() *GetSCIMGroupsByIDResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *GetSCIMGroupsByIDResponse) GetFourHundredAndThreeApplicationJSONObject() *GetSCIMGroupsByIDSCIMGroupsResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndThreeApplicationJSONObject
}

func (o *GetSCIMGroupsByIDResponse) GetFiveHundredAndOneApplicationJSONObject() *GetSCIMGroupsByIDSCIMGroupsResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.FiveHundredAndOneApplicationJSONObject
}
