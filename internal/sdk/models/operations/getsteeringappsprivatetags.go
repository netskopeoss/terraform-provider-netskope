// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/netskope/terraform-provider-ns/internal/sdk/models/shared"
	"net/http"
)

type GetSteeringAppsPrivateTagsRequest struct {
	// Return filtered result based on query
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Query offset
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Number of results to limit the output by
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
}

func (o *GetSteeringAppsPrivateTagsRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *GetSteeringAppsPrivateTagsRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetSteeringAppsPrivateTagsRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

type Tags struct {
	PrivateApps []shared.TagPrivateAppsResponse `json:"private_apps,omitempty"`
	TagID       *int                            `json:"tag_id,omitempty"`
	TagName     *string                         `json:"tag_name,omitempty"`
}

func (o *Tags) GetPrivateApps() []shared.TagPrivateAppsResponse {
	if o == nil {
		return nil
	}
	return o.PrivateApps
}

func (o *Tags) GetTagID() *int {
	if o == nil {
		return nil
	}
	return o.TagID
}

func (o *Tags) GetTagName() *string {
	if o == nil {
		return nil
	}
	return o.TagName
}

type GetSteeringAppsPrivateTagsData struct {
	Tags []Tags `json:"tags,omitempty"`
}

func (o *GetSteeringAppsPrivateTagsData) GetTags() []Tags {
	if o == nil {
		return nil
	}
	return o.Tags
}

type GetSteeringAppsPrivateTagsStatus string

const (
	GetSteeringAppsPrivateTagsStatusSuccess  GetSteeringAppsPrivateTagsStatus = "success"
	GetSteeringAppsPrivateTagsStatusNotFound GetSteeringAppsPrivateTagsStatus = "not found"
)

func (e GetSteeringAppsPrivateTagsStatus) ToPointer() *GetSteeringAppsPrivateTagsStatus {
	return &e
}
func (e *GetSteeringAppsPrivateTagsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "not found":
		*e = GetSteeringAppsPrivateTagsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSteeringAppsPrivateTagsStatus: %v", v)
	}
}

// GetSteeringAppsPrivateTagsResponseBody - successful operation
type GetSteeringAppsPrivateTagsResponseBody struct {
	Data   *GetSteeringAppsPrivateTagsData   `json:"data,omitempty"`
	Status *GetSteeringAppsPrivateTagsStatus `json:"status,omitempty"`
	Total  *int                              `json:"total,omitempty"`
}

func (o *GetSteeringAppsPrivateTagsResponseBody) GetData() *GetSteeringAppsPrivateTagsData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *GetSteeringAppsPrivateTagsResponseBody) GetStatus() *GetSteeringAppsPrivateTagsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetSteeringAppsPrivateTagsResponseBody) GetTotal() *int {
	if o == nil {
		return nil
	}
	return o.Total
}

type GetSteeringAppsPrivateTagsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// successful operation
	Object *GetSteeringAppsPrivateTagsResponseBody
	// Invalid request
	TagResponse400 *shared.TagResponse400
}

func (o *GetSteeringAppsPrivateTagsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetSteeringAppsPrivateTagsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetSteeringAppsPrivateTagsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetSteeringAppsPrivateTagsResponse) GetObject() *GetSteeringAppsPrivateTagsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *GetSteeringAppsPrivateTagsResponse) GetTagResponse400() *shared.TagResponse400 {
	if o == nil {
		return nil
	}
	return o.TagResponse400
}
