// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NpaPolicygroupRequestOrder string

const (
	NpaPolicygroupRequestOrderBefore NpaPolicygroupRequestOrder = "before"
	NpaPolicygroupRequestOrderAfter  NpaPolicygroupRequestOrder = "after"
)

func (e NpaPolicygroupRequestOrder) ToPointer() *NpaPolicygroupRequestOrder {
	return &e
}
func (e *NpaPolicygroupRequestOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "before":
		fallthrough
	case "after":
		*e = NpaPolicygroupRequestOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NpaPolicygroupRequestOrder: %v", v)
	}
}

type NpaPolicygroupRequestGroupOrder struct {
	GroupID *string                     `json:"group_id,omitempty"`
	Order   *NpaPolicygroupRequestOrder `json:"order,omitempty"`
}

func (o *NpaPolicygroupRequestGroupOrder) GetGroupID() *string {
	if o == nil {
		return nil
	}
	return o.GroupID
}

func (o *NpaPolicygroupRequestGroupOrder) GetOrder() *NpaPolicygroupRequestOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

type GroupOrder struct {
	GroupOrder *NpaPolicygroupRequestGroupOrder `json:"group_order,omitempty"`
}

func (o *GroupOrder) GetGroupOrder() *NpaPolicygroupRequestGroupOrder {
	if o == nil {
		return nil
	}
	return o.GroupOrder
}

type NpaPolicygroupRequest struct {
	GroupName  *string     `json:"group_name,omitempty"`
	GroupOrder *GroupOrder `json:"group_order,omitempty"`
	ModifyBy   *string     `json:"modify_by,omitempty"`
	ModifyType *string     `json:"modify_type,omitempty"`
}

func (o *NpaPolicygroupRequest) GetGroupName() *string {
	if o == nil {
		return nil
	}
	return o.GroupName
}

func (o *NpaPolicygroupRequest) GetGroupOrder() *GroupOrder {
	if o == nil {
		return nil
	}
	return o.GroupOrder
}

func (o *NpaPolicygroupRequest) GetModifyBy() *string {
	if o == nil {
		return nil
	}
	return o.ModifyBy
}

func (o *NpaPolicygroupRequest) GetModifyType() *string {
	if o == nil {
		return nil
	}
	return o.ModifyType
}
