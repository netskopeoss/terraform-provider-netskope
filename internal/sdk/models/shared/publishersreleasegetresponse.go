// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PublishersReleaseGetResponseStatus string

const (
	PublishersReleaseGetResponseStatusSuccess  PublishersReleaseGetResponseStatus = "success"
	PublishersReleaseGetResponseStatusNotFound PublishersReleaseGetResponseStatus = "not found"
)

func (e PublishersReleaseGetResponseStatus) ToPointer() *PublishersReleaseGetResponseStatus {
	return &e
}
func (e *PublishersReleaseGetResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "not found":
		*e = PublishersReleaseGetResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublishersReleaseGetResponseStatus: %v", v)
	}
}

type PublishersReleaseGetResponse struct {
	Status *PublishersReleaseGetResponseStatus `json:"status,omitempty"`
	Data   []ReleaseItem                       `json:"data,omitempty"`
}

func (o *PublishersReleaseGetResponse) GetStatus() *PublishersReleaseGetResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PublishersReleaseGetResponse) GetData() []ReleaseItem {
	if o == nil {
		return nil
	}
	return o.Data
}
