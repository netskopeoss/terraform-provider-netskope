// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PublishersGetResponseCaCertsStatus struct {
	Hashes       []string `json:"hashes,omitempty"`
	LastModified *int     `json:"last_modified,omitempty"`
}

func (o *PublishersGetResponseCaCertsStatus) GetHashes() []string {
	if o == nil {
		return nil
	}
	return o.Hashes
}

func (o *PublishersGetResponseCaCertsStatus) GetLastModified() *int {
	if o == nil {
		return nil
	}
	return o.LastModified
}

type PublishersGetResponseAssessment struct {
	CaCertsStatus *PublishersGetResponseCaCertsStatus `json:"ca_certs_status,omitempty"`
	EeeSupport    *bool                               `json:"eee_support,omitempty"`
	HddFree       *string                             `json:"hdd_free,omitempty"`
	HddTotal      *string                             `json:"hdd_total,omitempty"`
	IPAddress     *string                             `json:"ip_address,omitempty"`
	Latency       *int                                `json:"latency,omitempty"`
	Version       *string                             `json:"version,omitempty"`
}

func (o *PublishersGetResponseAssessment) GetCaCertsStatus() *PublishersGetResponseCaCertsStatus {
	if o == nil {
		return nil
	}
	return o.CaCertsStatus
}

func (o *PublishersGetResponseAssessment) GetEeeSupport() *bool {
	if o == nil {
		return nil
	}
	return o.EeeSupport
}

func (o *PublishersGetResponseAssessment) GetHddFree() *string {
	if o == nil {
		return nil
	}
	return o.HddFree
}

func (o *PublishersGetResponseAssessment) GetHddTotal() *string {
	if o == nil {
		return nil
	}
	return o.HddTotal
}

func (o *PublishersGetResponseAssessment) GetIPAddress() *string {
	if o == nil {
		return nil
	}
	return o.IPAddress
}

func (o *PublishersGetResponseAssessment) GetLatency() *int {
	if o == nil {
		return nil
	}
	return o.Latency
}

func (o *PublishersGetResponseAssessment) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

type PublishersGetResponsePullNsconfig struct {
	OrgkeyExist *bool `json:"orgkey_exist,omitempty"`
	OrguriExist *bool `json:"orguri_exist,omitempty"`
}

func (o *PublishersGetResponsePullNsconfig) GetOrgkeyExist() *bool {
	if o == nil {
		return nil
	}
	return o.OrgkeyExist
}

func (o *PublishersGetResponsePullNsconfig) GetOrguriExist() *bool {
	if o == nil {
		return nil
	}
	return o.OrguriExist
}

type PublishersGetResponseCapabilities struct {
	Dtls         *bool                              `json:"DTLS,omitempty"`
	Eee          *bool                              `json:"EEE,omitempty"`
	AutoUpgrade  *bool                              `json:"auto_upgrade,omitempty"`
	NwaBa        *bool                              `json:"nwa_ba,omitempty"`
	PullNsconfig *PublishersGetResponsePullNsconfig `json:"pull_nsconfig,omitempty"`
}

func (o *PublishersGetResponseCapabilities) GetDtls() *bool {
	if o == nil {
		return nil
	}
	return o.Dtls
}

func (o *PublishersGetResponseCapabilities) GetEee() *bool {
	if o == nil {
		return nil
	}
	return o.Eee
}

func (o *PublishersGetResponseCapabilities) GetAutoUpgrade() *bool {
	if o == nil {
		return nil
	}
	return o.AutoUpgrade
}

func (o *PublishersGetResponseCapabilities) GetNwaBa() *bool {
	if o == nil {
		return nil
	}
	return o.NwaBa
}

func (o *PublishersGetResponseCapabilities) GetPullNsconfig() *PublishersGetResponsePullNsconfig {
	if o == nil {
		return nil
	}
	return o.PullNsconfig
}

type PublishersGetResponseDataStatus string

const (
	PublishersGetResponseDataStatusConnected     PublishersGetResponseDataStatus = "connected"
	PublishersGetResponseDataStatusNotRegistered PublishersGetResponseDataStatus = "not registered"
)

func (e PublishersGetResponseDataStatus) ToPointer() *PublishersGetResponseDataStatus {
	return &e
}
func (e *PublishersGetResponseDataStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "connected":
		fallthrough
	case "not registered":
		*e = PublishersGetResponseDataStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublishersGetResponseDataStatus: %v", v)
	}
}

type Tags struct {
}

type PublishersGetResponseUpgradeFailedReason struct {
	Detail    *string `json:"detail,omitempty"`
	ErrorCode *int    `json:"error_code,omitempty"`
	Timestamp *int    `json:"timestamp,omitempty"`
	Version   *string `json:"version,omitempty"`
}

func (o *PublishersGetResponseUpgradeFailedReason) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

func (o *PublishersGetResponseUpgradeFailedReason) GetErrorCode() *int {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *PublishersGetResponseUpgradeFailedReason) GetTimestamp() *int {
	if o == nil {
		return nil
	}
	return o.Timestamp
}

func (o *PublishersGetResponseUpgradeFailedReason) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

type PublishersGetResponseUpgradeStatus struct {
	Upstat *string `json:"upstat,omitempty"`
}

func (o *PublishersGetResponseUpgradeStatus) GetUpstat() *string {
	if o == nil {
		return nil
	}
	return o.Upstat
}

type PublishersGetResponsePublishers struct {
	AppsCount                 *int                               `json:"apps_count,omitempty"`
	Assessment                *PublishersGetResponseAssessment   `json:"assessment,omitempty"`
	Capabilities              *PublishersGetResponseCapabilities `json:"capabilities,omitempty"`
	CommonName                *string                            `json:"common_name,omitempty"`
	ConnectedApps             []string                           `json:"connected_apps,omitempty"`
	Lbrokerconnect            *bool                              `json:"lbrokerconnect,omitempty"`
	PublisherID               *int                               `json:"publisher_id,omitempty"`
	PublisherName             *string                            `json:"publisher_name,omitempty"`
	PublisherUpgradeProfileID *int                               `json:"publisher_upgrade_profiles_external_id,omitempty"`
	Registered                *bool                              `json:"registered,omitempty"`
	Status                    *PublishersGetResponseDataStatus   `json:"status,omitempty"`
	StitcherID                *int                               `json:"stitcher_id,omitempty"`
	StitcherPop               *string                            `json:"stitcher_pop,omitempty"`
	// Not used at this time - please ignore
	//
	Tags                []Tags                                    `json:"tags,omitempty"`
	UpgradeFailedReason *PublishersGetResponseUpgradeFailedReason `json:"upgrade_failed_reason,omitempty"`
	UpgradeRequest      *bool                                     `json:"upgrade_request,omitempty"`
	UpgradeStatus       *PublishersGetResponseUpgradeStatus       `json:"upgrade_status,omitempty"`
}

func (o *PublishersGetResponsePublishers) GetAppsCount() *int {
	if o == nil {
		return nil
	}
	return o.AppsCount
}

func (o *PublishersGetResponsePublishers) GetAssessment() *PublishersGetResponseAssessment {
	if o == nil {
		return nil
	}
	return o.Assessment
}

func (o *PublishersGetResponsePublishers) GetCapabilities() *PublishersGetResponseCapabilities {
	if o == nil {
		return nil
	}
	return o.Capabilities
}

func (o *PublishersGetResponsePublishers) GetCommonName() *string {
	if o == nil {
		return nil
	}
	return o.CommonName
}

func (o *PublishersGetResponsePublishers) GetConnectedApps() []string {
	if o == nil {
		return nil
	}
	return o.ConnectedApps
}

func (o *PublishersGetResponsePublishers) GetLbrokerconnect() *bool {
	if o == nil {
		return nil
	}
	return o.Lbrokerconnect
}

func (o *PublishersGetResponsePublishers) GetPublisherID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherID
}

func (o *PublishersGetResponsePublishers) GetPublisherName() *string {
	if o == nil {
		return nil
	}
	return o.PublisherName
}

func (o *PublishersGetResponsePublishers) GetPublisherUpgradeProfileID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherUpgradeProfileID
}

func (o *PublishersGetResponsePublishers) GetRegistered() *bool {
	if o == nil {
		return nil
	}
	return o.Registered
}

func (o *PublishersGetResponsePublishers) GetStatus() *PublishersGetResponseDataStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PublishersGetResponsePublishers) GetStitcherID() *int {
	if o == nil {
		return nil
	}
	return o.StitcherID
}

func (o *PublishersGetResponsePublishers) GetStitcherPop() *string {
	if o == nil {
		return nil
	}
	return o.StitcherPop
}

func (o *PublishersGetResponsePublishers) GetTags() []Tags {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PublishersGetResponsePublishers) GetUpgradeFailedReason() *PublishersGetResponseUpgradeFailedReason {
	if o == nil {
		return nil
	}
	return o.UpgradeFailedReason
}

func (o *PublishersGetResponsePublishers) GetUpgradeRequest() *bool {
	if o == nil {
		return nil
	}
	return o.UpgradeRequest
}

func (o *PublishersGetResponsePublishers) GetUpgradeStatus() *PublishersGetResponseUpgradeStatus {
	if o == nil {
		return nil
	}
	return o.UpgradeStatus
}

type PublishersGetResponseData struct {
	Publishers []PublishersGetResponsePublishers `json:"publishers,omitempty"`
}

func (o *PublishersGetResponseData) GetPublishers() []PublishersGetResponsePublishers {
	if o == nil {
		return nil
	}
	return o.Publishers
}

type PublishersGetResponseStatus string

const (
	PublishersGetResponseStatusSuccess  PublishersGetResponseStatus = "success"
	PublishersGetResponseStatusNotFound PublishersGetResponseStatus = "not found"
)

func (e PublishersGetResponseStatus) ToPointer() *PublishersGetResponseStatus {
	return &e
}
func (e *PublishersGetResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "not found":
		*e = PublishersGetResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublishersGetResponseStatus: %v", v)
	}
}

type PublishersGetResponse struct {
	Data   *PublishersGetResponseData   `json:"data,omitempty"`
	Status *PublishersGetResponseStatus `json:"status,omitempty"`
	Total  *int                         `json:"total,omitempty"`
}

func (o *PublishersGetResponse) GetData() *PublishersGetResponseData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *PublishersGetResponse) GetStatus() *PublishersGetResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PublishersGetResponse) GetTotal() *int {
	if o == nil {
		return nil
	}
	return o.Total
}
