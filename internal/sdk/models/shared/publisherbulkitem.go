// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CaCertsStatus struct {
	Hashes       []string `json:"hashes,omitempty"`
	LastModified *int     `json:"last_modified,omitempty"`
}

func (o *CaCertsStatus) GetHashes() []string {
	if o == nil {
		return nil
	}
	return o.Hashes
}

func (o *CaCertsStatus) GetLastModified() *int {
	if o == nil {
		return nil
	}
	return o.LastModified
}

type Assessment struct {
	CaCertsStatus *CaCertsStatus `json:"ca_certs_status,omitempty"`
	EeeSupport    *bool          `json:"eee_support,omitempty"`
	HddFree       *string        `json:"hdd_free,omitempty"`
	HddTotal      *string        `json:"hdd_total,omitempty"`
	IPAddress     *string        `json:"ip_address,omitempty"`
	Latency       *int           `json:"latency,omitempty"`
	Version       *string        `json:"version,omitempty"`
}

func (o *Assessment) GetCaCertsStatus() *CaCertsStatus {
	if o == nil {
		return nil
	}
	return o.CaCertsStatus
}

func (o *Assessment) GetEeeSupport() *bool {
	if o == nil {
		return nil
	}
	return o.EeeSupport
}

func (o *Assessment) GetHddFree() *string {
	if o == nil {
		return nil
	}
	return o.HddFree
}

func (o *Assessment) GetHddTotal() *string {
	if o == nil {
		return nil
	}
	return o.HddTotal
}

func (o *Assessment) GetIPAddress() *string {
	if o == nil {
		return nil
	}
	return o.IPAddress
}

func (o *Assessment) GetLatency() *int {
	if o == nil {
		return nil
	}
	return o.Latency
}

func (o *Assessment) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

type PullNsconfig struct {
	OrgkeyExist *bool `json:"orgkey_exist,omitempty"`
	OrguriExist *bool `json:"orguri_exist,omitempty"`
}

func (o *PullNsconfig) GetOrgkeyExist() *bool {
	if o == nil {
		return nil
	}
	return o.OrgkeyExist
}

func (o *PullNsconfig) GetOrguriExist() *bool {
	if o == nil {
		return nil
	}
	return o.OrguriExist
}

type Capabilities struct {
	Dtls         *bool         `json:"DTLS,omitempty"`
	Eee          *bool         `json:"EEE,omitempty"`
	AutoUpgrade  *bool         `json:"auto_upgrade,omitempty"`
	NwaBa        *bool         `json:"nwa_ba,omitempty"`
	PullNsconfig *PullNsconfig `json:"pull_nsconfig,omitempty"`
}

func (o *Capabilities) GetDtls() *bool {
	if o == nil {
		return nil
	}
	return o.Dtls
}

func (o *Capabilities) GetEee() *bool {
	if o == nil {
		return nil
	}
	return o.Eee
}

func (o *Capabilities) GetAutoUpgrade() *bool {
	if o == nil {
		return nil
	}
	return o.AutoUpgrade
}

func (o *Capabilities) GetNwaBa() *bool {
	if o == nil {
		return nil
	}
	return o.NwaBa
}

func (o *Capabilities) GetPullNsconfig() *PullNsconfig {
	if o == nil {
		return nil
	}
	return o.PullNsconfig
}

type PublisherBulkItemStatus string

const (
	PublisherBulkItemStatusConnected     PublisherBulkItemStatus = "connected"
	PublisherBulkItemStatusNotRegistered PublisherBulkItemStatus = "not registered"
)

func (e PublisherBulkItemStatus) ToPointer() *PublisherBulkItemStatus {
	return &e
}
func (e *PublisherBulkItemStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "connected":
		fallthrough
	case "not registered":
		*e = PublisherBulkItemStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublisherBulkItemStatus: %v", v)
	}
}

type UpgradeFailedReason struct {
	Detail    *string  `json:"detail,omitempty"`
	ErrorCode *float64 `json:"error_code,omitempty"`
	Timestamp *float64 `json:"timestamp,omitempty"`
	Version   *string  `json:"version,omitempty"`
}

func (o *UpgradeFailedReason) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

func (o *UpgradeFailedReason) GetErrorCode() *float64 {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *UpgradeFailedReason) GetTimestamp() *float64 {
	if o == nil {
		return nil
	}
	return o.Timestamp
}

func (o *UpgradeFailedReason) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

type UpgradeStatus struct {
	Upstat *string `json:"upstat,omitempty"`
}

func (o *UpgradeStatus) GetUpstat() *string {
	if o == nil {
		return nil
	}
	return o.Upstat
}

type PublisherBulkItem struct {
	AppsCount                  *int                     `json:"apps_count,omitempty"`
	Assessment                 *Assessment              `json:"assessment,omitempty"`
	Capabilities               *Capabilities            `json:"capabilities,omitempty"`
	CommonName                 *string                  `json:"common_name,omitempty"`
	ConnectedApps              []string                 `json:"connected_apps,omitempty"`
	PublisherID                *int                     `json:"id,omitempty"`
	Lbrokerconnect             *bool                    `json:"lbrokerconnect,omitempty"`
	PublisherName              *string                  `json:"name,omitempty"`
	PublisherUpgradeProfilesID *int                     `json:"publisher_upgrade_profiles_id,omitempty"`
	Registered                 *bool                    `json:"registered,omitempty"`
	Status                     *PublisherBulkItemStatus `json:"status,omitempty"`
	StitcherID                 *int                     `json:"stitcher_id,omitempty"`
	StitcherPop                *string                  `json:"stitcher_pop,omitempty"`
	// Not used at this time - please ignore
	//
	Tags                []TagItem            `json:"tags,omitempty"`
	UpgradeFailedReason *UpgradeFailedReason `json:"upgrade_failed_reason,omitempty"`
	UpgradeRequest      *bool                `json:"upgrade_request,omitempty"`
	UpgradeStatus       *UpgradeStatus       `json:"upgrade_status,omitempty"`
}

func (o *PublisherBulkItem) GetAppsCount() *int {
	if o == nil {
		return nil
	}
	return o.AppsCount
}

func (o *PublisherBulkItem) GetAssessment() *Assessment {
	if o == nil {
		return nil
	}
	return o.Assessment
}

func (o *PublisherBulkItem) GetCapabilities() *Capabilities {
	if o == nil {
		return nil
	}
	return o.Capabilities
}

func (o *PublisherBulkItem) GetCommonName() *string {
	if o == nil {
		return nil
	}
	return o.CommonName
}

func (o *PublisherBulkItem) GetConnectedApps() []string {
	if o == nil {
		return nil
	}
	return o.ConnectedApps
}

func (o *PublisherBulkItem) GetPublisherID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherID
}

func (o *PublisherBulkItem) GetLbrokerconnect() *bool {
	if o == nil {
		return nil
	}
	return o.Lbrokerconnect
}

func (o *PublisherBulkItem) GetPublisherName() *string {
	if o == nil {
		return nil
	}
	return o.PublisherName
}

func (o *PublisherBulkItem) GetPublisherUpgradeProfilesID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherUpgradeProfilesID
}

func (o *PublisherBulkItem) GetRegistered() *bool {
	if o == nil {
		return nil
	}
	return o.Registered
}

func (o *PublisherBulkItem) GetStatus() *PublisherBulkItemStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PublisherBulkItem) GetStitcherID() *int {
	if o == nil {
		return nil
	}
	return o.StitcherID
}

func (o *PublisherBulkItem) GetStitcherPop() *string {
	if o == nil {
		return nil
	}
	return o.StitcherPop
}

func (o *PublisherBulkItem) GetTags() []TagItem {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PublisherBulkItem) GetUpgradeFailedReason() *UpgradeFailedReason {
	if o == nil {
		return nil
	}
	return o.UpgradeFailedReason
}

func (o *PublisherBulkItem) GetUpgradeRequest() *bool {
	if o == nil {
		return nil
	}
	return o.UpgradeRequest
}

func (o *PublisherBulkItem) GetUpgradeStatus() *UpgradeStatus {
	if o == nil {
		return nil
	}
	return o.UpgradeStatus
}
