// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/netskope/terraform-provider-ns/internal/sdk/internal/utils"
)

type UpgradeProfiles struct {
	CreatedAt              *string `json:"created_at,omitempty"`
	DockerTag              *string `json:"docker_tag,omitempty"`
	Enabled                *bool   `json:"enabled,omitempty"`
	ExternalID             *int    `json:"external_id,omitempty"`
	Frequency              *string `json:"frequency,omitempty"`
	ID                     *int    `json:"id,omitempty"`
	Name                   *string `json:"name,omitempty"`
	NextUpdateTime         *int    `json:"next_update_time,omitempty"`
	NumAssociatedPublisher *int    `default:"0" json:"num_associated_publisher"`
	ReleaseType            *string `json:"release_type,omitempty"`
	Timezone               *string `json:"timezone,omitempty"`
	UpdatedAt              *string `json:"updated_at,omitempty"`
	UpgradingStage         *int    `json:"upgrading_stage,omitempty"`
	WillStart              *bool   `json:"will_start,omitempty"`
}

func (u UpgradeProfiles) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpgradeProfiles) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpgradeProfiles) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpgradeProfiles) GetDockerTag() *string {
	if o == nil {
		return nil
	}
	return o.DockerTag
}

func (o *UpgradeProfiles) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *UpgradeProfiles) GetExternalID() *int {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *UpgradeProfiles) GetFrequency() *string {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *UpgradeProfiles) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpgradeProfiles) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpgradeProfiles) GetNextUpdateTime() *int {
	if o == nil {
		return nil
	}
	return o.NextUpdateTime
}

func (o *UpgradeProfiles) GetNumAssociatedPublisher() *int {
	if o == nil {
		return nil
	}
	return o.NumAssociatedPublisher
}

func (o *UpgradeProfiles) GetReleaseType() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseType
}

func (o *UpgradeProfiles) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *UpgradeProfiles) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpgradeProfiles) GetUpgradingStage() *int {
	if o == nil {
		return nil
	}
	return o.UpgradingStage
}

func (o *UpgradeProfiles) GetWillStart() *bool {
	if o == nil {
		return nil
	}
	return o.WillStart
}

type PublisherUpgradeProfileListResponseData struct {
	UpgradeProfiles []UpgradeProfiles `json:"upgrade_profiles,omitempty"`
}

func (o *PublisherUpgradeProfileListResponseData) GetUpgradeProfiles() []UpgradeProfiles {
	if o == nil {
		return nil
	}
	return o.UpgradeProfiles
}

type PublisherUpgradeProfileListResponseStatus string

const (
	PublisherUpgradeProfileListResponseStatusSuccess PublisherUpgradeProfileListResponseStatus = "success"
	PublisherUpgradeProfileListResponseStatusError   PublisherUpgradeProfileListResponseStatus = "error"
)

func (e PublisherUpgradeProfileListResponseStatus) ToPointer() *PublisherUpgradeProfileListResponseStatus {
	return &e
}
func (e *PublisherUpgradeProfileListResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "error":
		*e = PublisherUpgradeProfileListResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublisherUpgradeProfileListResponseStatus: %v", v)
	}
}

type PublisherUpgradeProfileListResponse struct {
	Data   *PublisherUpgradeProfileListResponseData   `json:"data,omitempty"`
	Status *PublisherUpgradeProfileListResponseStatus `json:"status,omitempty"`
	Total  *int                                       `json:"total,omitempty"`
}

func (o *PublisherUpgradeProfileListResponse) GetData() *PublisherUpgradeProfileListResponseData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *PublisherUpgradeProfileListResponse) GetStatus() *PublisherUpgradeProfileListResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PublisherUpgradeProfileListResponse) GetTotal() *int {
	if o == nil {
		return nil
	}
	return o.Total
}
