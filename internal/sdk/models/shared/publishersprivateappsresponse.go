// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PublishersPrivateAppsResponseAppOption struct {
}

type PublishersPrivateAppsResponseReachability struct {
	ErrorCode   *int    `json:"error_code,omitempty"`
	ErrorString *string `json:"error_string,omitempty"`
	Reachable   *bool   `json:"reachable,omitempty"`
}

func (o *PublishersPrivateAppsResponseReachability) GetErrorCode() *int {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *PublishersPrivateAppsResponseReachability) GetErrorString() *string {
	if o == nil {
		return nil
	}
	return o.ErrorString
}

func (o *PublishersPrivateAppsResponseReachability) GetReachable() *bool {
	if o == nil {
		return nil
	}
	return o.Reachable
}

type PublishersPrivateAppsResponseData struct {
	AllowUnauthenticatedCors    *bool                                      `json:"allow_unauthenticated_cors,omitempty"`
	AppOption                   *PublishersPrivateAppsResponseAppOption    `json:"app_option,omitempty"`
	ClientlessAccess            *bool                                      `json:"clientless_access,omitempty"`
	ExternalID                  *int                                       `json:"external_id,omitempty"`
	Host                        *string                                    `json:"host,omitempty"`
	ID                          *int                                       `json:"id,omitempty"`
	IsUserPortalApp             *bool                                      `json:"is_user_portal_app,omitempty"`
	PrivateAppName              *string                                    `json:"name,omitempty"`
	PrivateAppProtocol          *string                                    `json:"private_app_protocol,omitempty"`
	Protocols                   []ProtocolResponseItem                     `json:"protocols,omitempty"`
	PublicHost                  *string                                    `json:"public_host,omitempty"`
	Reachability                *PublishersPrivateAppsResponseReachability `json:"reachability,omitempty"`
	RealHost                    *string                                    `json:"real_host,omitempty"`
	ServicePublisherAssignments []ServicePublisherAssignmentItem           `json:"service_publisher_assignments,omitempty"`
	SupplimentDNSForOsx         *bool                                      `json:"suppliment_dns_for_osx,omitempty"`
	Tags                        []TagItem                                  `json:"tags,omitempty"`
	TrustSelfSignedCerts        *bool                                      `json:"trust_self_signed_certs,omitempty"`
	UsePublisherDNS             *bool                                      `json:"use_publisher_dns,omitempty"`
}

func (o *PublishersPrivateAppsResponseData) GetAllowUnauthenticatedCors() *bool {
	if o == nil {
		return nil
	}
	return o.AllowUnauthenticatedCors
}

func (o *PublishersPrivateAppsResponseData) GetAppOption() *PublishersPrivateAppsResponseAppOption {
	if o == nil {
		return nil
	}
	return o.AppOption
}

func (o *PublishersPrivateAppsResponseData) GetClientlessAccess() *bool {
	if o == nil {
		return nil
	}
	return o.ClientlessAccess
}

func (o *PublishersPrivateAppsResponseData) GetExternalID() *int {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *PublishersPrivateAppsResponseData) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *PublishersPrivateAppsResponseData) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PublishersPrivateAppsResponseData) GetIsUserPortalApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsUserPortalApp
}

func (o *PublishersPrivateAppsResponseData) GetPrivateAppName() *string {
	if o == nil {
		return nil
	}
	return o.PrivateAppName
}

func (o *PublishersPrivateAppsResponseData) GetPrivateAppProtocol() *string {
	if o == nil {
		return nil
	}
	return o.PrivateAppProtocol
}

func (o *PublishersPrivateAppsResponseData) GetProtocols() []ProtocolResponseItem {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *PublishersPrivateAppsResponseData) GetPublicHost() *string {
	if o == nil {
		return nil
	}
	return o.PublicHost
}

func (o *PublishersPrivateAppsResponseData) GetReachability() *PublishersPrivateAppsResponseReachability {
	if o == nil {
		return nil
	}
	return o.Reachability
}

func (o *PublishersPrivateAppsResponseData) GetRealHost() *string {
	if o == nil {
		return nil
	}
	return o.RealHost
}

func (o *PublishersPrivateAppsResponseData) GetServicePublisherAssignments() []ServicePublisherAssignmentItem {
	if o == nil {
		return nil
	}
	return o.ServicePublisherAssignments
}

func (o *PublishersPrivateAppsResponseData) GetSupplimentDNSForOsx() *bool {
	if o == nil {
		return nil
	}
	return o.SupplimentDNSForOsx
}

func (o *PublishersPrivateAppsResponseData) GetTags() []TagItem {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PublishersPrivateAppsResponseData) GetTrustSelfSignedCerts() *bool {
	if o == nil {
		return nil
	}
	return o.TrustSelfSignedCerts
}

func (o *PublishersPrivateAppsResponseData) GetUsePublisherDNS() *bool {
	if o == nil {
		return nil
	}
	return o.UsePublisherDNS
}

type PublishersPrivateAppsResponseStatus string

const (
	PublishersPrivateAppsResponseStatusSuccess  PublishersPrivateAppsResponseStatus = "success"
	PublishersPrivateAppsResponseStatusNotFound PublishersPrivateAppsResponseStatus = "not found"
)

func (e PublishersPrivateAppsResponseStatus) ToPointer() *PublishersPrivateAppsResponseStatus {
	return &e
}
func (e *PublishersPrivateAppsResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "not found":
		*e = PublishersPrivateAppsResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublishersPrivateAppsResponseStatus: %v", v)
	}
}

type PublishersPrivateAppsResponse struct {
	Data   []PublishersPrivateAppsResponseData  `json:"data,omitempty"`
	Status *PublishersPrivateAppsResponseStatus `json:"status,omitempty"`
}

func (o *PublishersPrivateAppsResponse) GetData() []PublishersPrivateAppsResponseData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *PublishersPrivateAppsResponse) GetStatus() *PublishersPrivateAppsResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
