// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PrivateAppsResponseAppOption struct {
}

type PrivateAppsResponseReachability struct {
	Reachable *bool `json:"reachable,omitempty"`
}

func (o *PrivateAppsResponseReachability) GetReachable() *bool {
	if o == nil {
		return nil
	}
	return o.Reachable
}

type PrivateAppsResponseData struct {
	AllowUnauthenticatedCors    *bool                            `json:"allow_unauthenticated_cors,omitempty"`
	AppID                       *int                             `json:"app_id,omitempty"`
	AppName                     *string                          `json:"app_name,omitempty"`
	AppOption                   *PrivateAppsResponseAppOption    `json:"app_option,omitempty"`
	ClientlessAccess            *bool                            `json:"clientless_access,omitempty"`
	PrivateAppHostname          *string                          `json:"host,omitempty"`
	PrivateAppID                *int                             `json:"id,omitempty"`
	IsUserPortalApp             *bool                            `json:"is_user_portal_app,omitempty"`
	ModifiedBy                  *string                          `json:"modified_by,omitempty"`
	ModifyTime                  *string                          `json:"modify_time,omitempty"`
	PrivateAppName              *string                          `json:"name,omitempty"`
	Policies                    []string                         `json:"policies,omitempty"`
	PrivateAppProtocol          *string                          `json:"private_app_protocol,omitempty"`
	Protocols                   []ProtocolResponseItem           `json:"protocols,omitempty"`
	PublicHost                  *string                          `json:"public_host,omitempty"`
	Reachability                *PrivateAppsResponseReachability `json:"reachability,omitempty"`
	RealHost                    *string                          `json:"real_host,omitempty"`
	ServicePublisherAssignments []ServicePublisherAssignmentItem `json:"service_publisher_assignments,omitempty"`
	SteeringConfigs             []string                         `json:"steering_configs,omitempty"`
	SupplementDNSForOsx         *bool                            `json:"supplement_dns_for_osx,omitempty"`
	Tags                        []TagItem                        `json:"tags,omitempty"`
	TrustSelfSignedCerts        *bool                            `json:"trust_self_signed_certs,omitempty"`
	UsePublisherDNS             *bool                            `json:"use_publisher_dns,omitempty"`
	AllowURIBypass              *bool                            `json:"allow_uri_bypass,omitempty"`
	UribypassHeaderValue        *string                          `json:"uribypass_header_value,omitempty"`
	BypassUris                  []string                         `json:"bypass_uris,omitempty"`
}

func (o *PrivateAppsResponseData) GetAllowUnauthenticatedCors() *bool {
	if o == nil {
		return nil
	}
	return o.AllowUnauthenticatedCors
}

func (o *PrivateAppsResponseData) GetAppID() *int {
	if o == nil {
		return nil
	}
	return o.AppID
}

func (o *PrivateAppsResponseData) GetAppName() *string {
	if o == nil {
		return nil
	}
	return o.AppName
}

func (o *PrivateAppsResponseData) GetAppOption() *PrivateAppsResponseAppOption {
	if o == nil {
		return nil
	}
	return o.AppOption
}

func (o *PrivateAppsResponseData) GetClientlessAccess() *bool {
	if o == nil {
		return nil
	}
	return o.ClientlessAccess
}

func (o *PrivateAppsResponseData) GetPrivateAppHostname() *string {
	if o == nil {
		return nil
	}
	return o.PrivateAppHostname
}

func (o *PrivateAppsResponseData) GetPrivateAppID() *int {
	if o == nil {
		return nil
	}
	return o.PrivateAppID
}

func (o *PrivateAppsResponseData) GetIsUserPortalApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsUserPortalApp
}

func (o *PrivateAppsResponseData) GetModifiedBy() *string {
	if o == nil {
		return nil
	}
	return o.ModifiedBy
}

func (o *PrivateAppsResponseData) GetModifyTime() *string {
	if o == nil {
		return nil
	}
	return o.ModifyTime
}

func (o *PrivateAppsResponseData) GetPrivateAppName() *string {
	if o == nil {
		return nil
	}
	return o.PrivateAppName
}

func (o *PrivateAppsResponseData) GetPolicies() []string {
	if o == nil {
		return nil
	}
	return o.Policies
}

func (o *PrivateAppsResponseData) GetPrivateAppProtocol() *string {
	if o == nil {
		return nil
	}
	return o.PrivateAppProtocol
}

func (o *PrivateAppsResponseData) GetProtocols() []ProtocolResponseItem {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *PrivateAppsResponseData) GetPublicHost() *string {
	if o == nil {
		return nil
	}
	return o.PublicHost
}

func (o *PrivateAppsResponseData) GetReachability() *PrivateAppsResponseReachability {
	if o == nil {
		return nil
	}
	return o.Reachability
}

func (o *PrivateAppsResponseData) GetRealHost() *string {
	if o == nil {
		return nil
	}
	return o.RealHost
}

func (o *PrivateAppsResponseData) GetServicePublisherAssignments() []ServicePublisherAssignmentItem {
	if o == nil {
		return nil
	}
	return o.ServicePublisherAssignments
}

func (o *PrivateAppsResponseData) GetSteeringConfigs() []string {
	if o == nil {
		return nil
	}
	return o.SteeringConfigs
}

func (o *PrivateAppsResponseData) GetSupplementDNSForOsx() *bool {
	if o == nil {
		return nil
	}
	return o.SupplementDNSForOsx
}

func (o *PrivateAppsResponseData) GetTags() []TagItem {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PrivateAppsResponseData) GetTrustSelfSignedCerts() *bool {
	if o == nil {
		return nil
	}
	return o.TrustSelfSignedCerts
}

func (o *PrivateAppsResponseData) GetUsePublisherDNS() *bool {
	if o == nil {
		return nil
	}
	return o.UsePublisherDNS
}

func (o *PrivateAppsResponseData) GetAllowURIBypass() *bool {
	if o == nil {
		return nil
	}
	return o.AllowURIBypass
}

func (o *PrivateAppsResponseData) GetUribypassHeaderValue() *string {
	if o == nil {
		return nil
	}
	return o.UribypassHeaderValue
}

func (o *PrivateAppsResponseData) GetBypassUris() []string {
	if o == nil {
		return nil
	}
	return o.BypassUris
}

type Status string

const (
	StatusSuccess  Status = "success"
	StatusNotFound Status = "not found"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "not found":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type PrivateAppsResponse struct {
	Data   *PrivateAppsResponseData `json:"data,omitempty"`
	Status *Status                  `json:"status,omitempty"`
}

func (o *PrivateAppsResponse) GetData() *PrivateAppsResponseData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *PrivateAppsResponse) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}
