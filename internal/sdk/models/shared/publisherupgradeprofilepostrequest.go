// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ReleaseType - This is the Release Type that is to be installed. \
// Release Type for releases can be optained from: \
// `api/v2/infrastructure/publishers/releases`
type ReleaseType string

const (
	ReleaseTypeBeta    ReleaseType = "Beta"
	ReleaseTypeLatest  ReleaseType = "Latest"
	ReleaseTypeLatest1 ReleaseType = "Latest-1"
	ReleaseTypeLatest2 ReleaseType = "Latest-2"
)

func (e ReleaseType) ToPointer() *ReleaseType {
	return &e
}
func (e *ReleaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Beta":
		fallthrough
	case "Latest":
		fallthrough
	case "Latest-1":
		fallthrough
	case "Latest-2":
		*e = ReleaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleaseType: %v", v)
	}
}

// Timezone - The timezone for which the upgrade triggers. \
// Please see enum for accepted values.
type Timezone string

const (
	TimezoneAfricaCairo                 Timezone = "Africa/Cairo"
	TimezoneAfricaCasablanca            Timezone = "Africa/Casablanca"
	TimezoneAfricaJohannesburg          Timezone = "Africa/Johannesburg"
	TimezoneAfricaNairobi               Timezone = "Africa/Nairobi"
	TimezoneAmericaArgentinaBuenosAires Timezone = "America/Argentina/Buenos_Aires"
	TimezoneAmericaCaracas              Timezone = "America/Caracas"
	TimezoneAmericaGodthab              Timezone = "America/Godthab"
	TimezoneAmericaLima                 Timezone = "America/Lima"
	TimezoneAmericaMazatlan             Timezone = "America/Mazatlan"
	TimezoneAmericaSantiago             Timezone = "America/Santiago"
	TimezoneAmericaTijuana              Timezone = "America/Tijuana"
	TimezoneAsiaAlmaty                  Timezone = "Asia/Almaty"
	TimezoneAsiaBaghdad                 Timezone = "Asia/Baghdad"
	TimezoneAsiaBaku                    Timezone = "Asia/Baku"
	TimezoneAsiaCalcutta                Timezone = "Asia/Calcutta"
	TimezoneAsiaDhaka                   Timezone = "Asia/Dhaka"
	TimezoneAsiaHarbin                  Timezone = "Asia/Harbin"
	TimezoneAsiaJakarta                 Timezone = "Asia/Jakarta"
	TimezoneAsiaJerusalem               Timezone = "Asia/Jerusalem"
	TimezoneAsiaKabul                   Timezone = "Asia/Kabul"
	TimezoneAsiaKarachi                 Timezone = "Asia/Karachi"
	TimezoneAsiaKathmandu               Timezone = "Asia/Kathmandu"
	TimezoneAsiaKrasnoyarsk             Timezone = "Asia/Krasnoyarsk"
	TimezoneAsiaKualaLumpur             Timezone = "Asia/Kuala_Lumpur"
	TimezoneAsiaMuscat                  Timezone = "Asia/Muscat"
	TimezoneAsiaRangoon                 Timezone = "Asia/Rangoon"
	TimezoneAsiaTaipei                  Timezone = "Asia/Taipei"
	TimezoneAsiaTehran                  Timezone = "Asia/Tehran"
	TimezoneAsiaVladivostok             Timezone = "Asia/Vladivostok"
	TimezoneAsiaYakutsk                 Timezone = "Asia/Yakutsk"
	TimezoneAsiaYerevan                 Timezone = "Asia/Yerevan"
	TimezoneAtlanticAzores              Timezone = "Atlantic/Azores"
	TimezoneAtlanticCapeVerde           Timezone = "Atlantic/Cape_Verde"
	TimezoneAustraliaAdelaide           Timezone = "Australia/Adelaide"
	TimezoneAustraliaBrisbane           Timezone = "Australia/Brisbane"
	TimezoneAustraliaDarwin             Timezone = "Australia/Darwin"
	TimezoneAustraliaHobart             Timezone = "Australia/Hobart"
	TimezoneAustraliaPerth              Timezone = "Australia/Perth"
	TimezoneAustraliaSydney             Timezone = "Australia/Sydney"
	TimezoneBrazilEast                  Timezone = "Brazil/East"
	TimezoneCanadaAtlantic              Timezone = "Canada/Atlantic"
	TimezoneCanadaCentral               Timezone = "Canada/Central"
	TimezoneCanadaNewfoundland          Timezone = "Canada/Newfoundland"
	TimezoneCanadaSaskatchewan          Timezone = "Canada/Saskatchewan"
	TimezoneEuropeAmsterdam             Timezone = "Europe/Amsterdam"
	TimezoneEuropeAthens                Timezone = "Europe/Athens"
	TimezoneEuropeCopenhagen            Timezone = "Europe/Copenhagen"
	TimezoneEuropeHelsinki              Timezone = "Europe/Helsinki"
	TimezoneEuropeLondon                Timezone = "Europe/London"
	TimezoneEuropeMinsk                 Timezone = "Europe/Minsk"
	TimezoneEuropeMoscow                Timezone = "Europe/Moscow"
	TimezoneEuropeParis                 Timezone = "Europe/Paris"
	TimezoneEuropePrague                Timezone = "Europe/Prague"
	TimezoneEuropeSarajevo              Timezone = "Europe/Sarajevo"
	TimezoneJapan                       Timezone = "Japan"
	TimezoneMexicoGeneral               Timezone = "Mexico/General"
	TimezonePacificAuckland             Timezone = "Pacific/Auckland"
	TimezonePacificFiji                 Timezone = "Pacific/Fiji"
	TimezonePacificGuadalcanal          Timezone = "Pacific/Guadalcanal"
	TimezonePacificGuam                 Timezone = "Pacific/Guam"
	TimezonePacificSamoa                Timezone = "Pacific/Samoa"
	TimezonePacificTongatapu            Timezone = "Pacific/Tongatapu"
	TimezoneUsAlaska                    Timezone = "US/Alaska"
	TimezoneUsArizona                   Timezone = "US/Arizona"
	TimezoneUsEastIndiana               Timezone = "US/East-Indiana"
	TimezoneUsEastern                   Timezone = "US/Eastern"
	TimezoneUsHawaii                    Timezone = "US/Hawaii"
	TimezoneUsMountain                  Timezone = "US/Mountain"
	TimezoneUsPacific                   Timezone = "US/Pacific"
)

func (e Timezone) ToPointer() *Timezone {
	return &e
}
func (e *Timezone) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Africa/Cairo":
		fallthrough
	case "Africa/Casablanca":
		fallthrough
	case "Africa/Johannesburg":
		fallthrough
	case "Africa/Nairobi":
		fallthrough
	case "America/Argentina/Buenos_Aires":
		fallthrough
	case "America/Caracas":
		fallthrough
	case "America/Godthab":
		fallthrough
	case "America/Lima":
		fallthrough
	case "America/Mazatlan":
		fallthrough
	case "America/Santiago":
		fallthrough
	case "America/Tijuana":
		fallthrough
	case "Asia/Almaty":
		fallthrough
	case "Asia/Baghdad":
		fallthrough
	case "Asia/Baku":
		fallthrough
	case "Asia/Calcutta":
		fallthrough
	case "Asia/Dhaka":
		fallthrough
	case "Asia/Harbin":
		fallthrough
	case "Asia/Jakarta":
		fallthrough
	case "Asia/Jerusalem":
		fallthrough
	case "Asia/Kabul":
		fallthrough
	case "Asia/Karachi":
		fallthrough
	case "Asia/Kathmandu":
		fallthrough
	case "Asia/Krasnoyarsk":
		fallthrough
	case "Asia/Kuala_Lumpur":
		fallthrough
	case "Asia/Muscat":
		fallthrough
	case "Asia/Rangoon":
		fallthrough
	case "Asia/Taipei":
		fallthrough
	case "Asia/Tehran":
		fallthrough
	case "Asia/Vladivostok":
		fallthrough
	case "Asia/Yakutsk":
		fallthrough
	case "Asia/Yerevan":
		fallthrough
	case "Atlantic/Azores":
		fallthrough
	case "Atlantic/Cape_Verde":
		fallthrough
	case "Australia/Adelaide":
		fallthrough
	case "Australia/Brisbane":
		fallthrough
	case "Australia/Darwin":
		fallthrough
	case "Australia/Hobart":
		fallthrough
	case "Australia/Perth":
		fallthrough
	case "Australia/Sydney":
		fallthrough
	case "Brazil/East":
		fallthrough
	case "Canada/Atlantic":
		fallthrough
	case "Canada/Central":
		fallthrough
	case "Canada/Newfoundland":
		fallthrough
	case "Canada/Saskatchewan":
		fallthrough
	case "Europe/Amsterdam":
		fallthrough
	case "Europe/Athens":
		fallthrough
	case "Europe/Copenhagen":
		fallthrough
	case "Europe/Helsinki":
		fallthrough
	case "Europe/London":
		fallthrough
	case "Europe/Minsk":
		fallthrough
	case "Europe/Moscow":
		fallthrough
	case "Europe/Paris":
		fallthrough
	case "Europe/Prague":
		fallthrough
	case "Europe/Sarajevo":
		fallthrough
	case "Japan":
		fallthrough
	case "Mexico/General":
		fallthrough
	case "Pacific/Auckland":
		fallthrough
	case "Pacific/Fiji":
		fallthrough
	case "Pacific/Guadalcanal":
		fallthrough
	case "Pacific/Guam":
		fallthrough
	case "Pacific/Samoa":
		fallthrough
	case "Pacific/Tongatapu":
		fallthrough
	case "US/Alaska":
		fallthrough
	case "US/Arizona":
		fallthrough
	case "US/East-Indiana":
		fallthrough
	case "US/Eastern":
		fallthrough
	case "US/Hawaii":
		fallthrough
	case "US/Mountain":
		fallthrough
	case "US/Pacific":
		*e = Timezone(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Timezone: %v", v)
	}
}

type PublisherUpgradeProfilePostRequest struct {
	// Docker Tag of the release version you wish to install. \
	// Docker Tag for releases can be optained from: \
	// `api/v2/infrastructure/publishers/releases`
	//
	DockerTag string `json:"docker_tag"`
	// Is this updgrade profile enabled.
	// * `true` - Enabled
	// * `false` - Disabled
	//
	Enabled bool `json:"enabled"`
	// Frequency of updates. This frequency is in a CRON format. \
	// ┌───────────── minute (0–59) \
	// │ ┌───────────── hour (0–23) \
	// │ │ ┌───────────── day of the month (1–31) \
	// │ │ │ ┌───────────── month (1–12) (Leave as *) \
	// │ │ │ │ ┌───────────── day of the week (MON, TUE, WED, THU, FRI, SAT, SUN) \
	// 0 0 1 * TUE => (Midnight, Weekly, Tuesday)
	//
	Frequency string `json:"frequency"`
	Name      string `json:"name"`
	// This is the Release Type that is to be installed. \
	// Release Type for releases can be optained from: \
	// `api/v2/infrastructure/publishers/releases`
	//
	ReleaseType ReleaseType `json:"release_type"`
	// The timezone for which the upgrade triggers. \
	// Please see enum for accepted values.
	//
	Timezone Timezone `json:"timezone"`
}

func (o *PublisherUpgradeProfilePostRequest) GetDockerTag() string {
	if o == nil {
		return ""
	}
	return o.DockerTag
}

func (o *PublisherUpgradeProfilePostRequest) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *PublisherUpgradeProfilePostRequest) GetFrequency() string {
	if o == nil {
		return ""
	}
	return o.Frequency
}

func (o *PublisherUpgradeProfilePostRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PublisherUpgradeProfilePostRequest) GetReleaseType() ReleaseType {
	if o == nil {
		return ReleaseType("")
	}
	return o.ReleaseType
}

func (o *PublisherUpgradeProfilePostRequest) GetTimezone() Timezone {
	if o == nil {
		return Timezone("")
	}
	return o.Timezone
}
