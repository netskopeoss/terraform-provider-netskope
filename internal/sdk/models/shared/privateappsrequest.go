// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AppOption struct {
}

type PrivateAppProtocol string

const (
	PrivateAppProtocolHTTP  PrivateAppProtocol = "http"
	PrivateAppProtocolHTTPS PrivateAppProtocol = "https"
)

func (e PrivateAppProtocol) ToPointer() *PrivateAppProtocol {
	return &e
}
func (e *PrivateAppProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = PrivateAppProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PrivateAppProtocol: %v", v)
	}
}

type Protocols struct {
	Port     string `json:"port"`
	Protocol string `json:"type"`
}

func (o *Protocols) GetPort() string {
	if o == nil {
		return ""
	}
	return o.Port
}

func (o *Protocols) GetProtocol() string {
	if o == nil {
		return ""
	}
	return o.Protocol
}

type PrivateAppsRequestPublishers struct {
	PublisherID   string `json:"publisher_id"`
	PublisherName string `json:"publisher_name"`
}

func (o *PrivateAppsRequestPublishers) GetPublisherID() string {
	if o == nil {
		return ""
	}
	return o.PublisherID
}

func (o *PrivateAppsRequestPublishers) GetPublisherName() string {
	if o == nil {
		return ""
	}
	return o.PublisherName
}

type Tags struct {
	TagName string `json:"tag_name"`
}

func (o *Tags) GetTagName() string {
	if o == nil {
		return ""
	}
	return o.TagName
}

type PrivateAppsRequest struct {
	AllowUnauthenticatedCors *bool                          `json:"allow_unauthenticated_cors,omitempty"`
	AppName                  string                         `json:"app_name"`
	AppOption                *AppOption                     `json:"app_option,omitempty"`
	ClientlessAccess         *bool                          `json:"clientless_access,omitempty"`
	PrivateAppProtocol       *PrivateAppProtocol            `json:"private_app_protocol,omitempty"`
	PrivateAppHostname       string                         `json:"host"`
	IsUserPortalApp          *bool                          `json:"is_user_portal_app,omitempty"`
	Protocols                []Protocols                    `json:"protocols"`
	Publishers               []PrivateAppsRequestPublishers `json:"publishers"`
	RealHost                 *string                        `json:"real_host,omitempty"`
	Tags                     []Tags                         `json:"tags,omitempty"`
	TrustSelfSignedCerts     *bool                          `json:"trust_self_signed_certs,omitempty"`
	UsePublisherDNS          *bool                          `json:"use_publisher_dns,omitempty"`
}

func (o *PrivateAppsRequest) GetAllowUnauthenticatedCors() *bool {
	if o == nil {
		return nil
	}
	return o.AllowUnauthenticatedCors
}

func (o *PrivateAppsRequest) GetAppName() string {
	if o == nil {
		return ""
	}
	return o.AppName
}

func (o *PrivateAppsRequest) GetAppOption() *AppOption {
	if o == nil {
		return nil
	}
	return o.AppOption
}

func (o *PrivateAppsRequest) GetClientlessAccess() *bool {
	if o == nil {
		return nil
	}
	return o.ClientlessAccess
}

func (o *PrivateAppsRequest) GetPrivateAppProtocol() *PrivateAppProtocol {
	if o == nil {
		return nil
	}
	return o.PrivateAppProtocol
}

func (o *PrivateAppsRequest) GetPrivateAppHostname() string {
	if o == nil {
		return ""
	}
	return o.PrivateAppHostname
}

func (o *PrivateAppsRequest) GetIsUserPortalApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsUserPortalApp
}

func (o *PrivateAppsRequest) GetProtocols() []Protocols {
	if o == nil {
		return []Protocols{}
	}
	return o.Protocols
}

func (o *PrivateAppsRequest) GetPublishers() []PrivateAppsRequestPublishers {
	if o == nil {
		return []PrivateAppsRequestPublishers{}
	}
	return o.Publishers
}

func (o *PrivateAppsRequest) GetRealHost() *string {
	if o == nil {
		return nil
	}
	return o.RealHost
}

func (o *PrivateAppsRequest) GetTags() []Tags {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PrivateAppsRequest) GetTrustSelfSignedCerts() *bool {
	if o == nil {
		return nil
	}
	return o.TrustSelfSignedCerts
}

func (o *PrivateAppsRequest) GetUsePublisherDNS() *bool {
	if o == nil {
		return nil
	}
	return o.UsePublisherDNS
}
