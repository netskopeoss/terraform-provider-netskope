// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/internal/utils"
)

type Two struct {
}

type PublisherAssessmentType string

const (
	PublisherAssessmentTypeAssessment PublisherAssessmentType = "Assessment"
	PublisherAssessmentTypeTwo        PublisherAssessmentType = "2"
)

type PublisherAssessment struct {
	Assessment *Assessment
	Two        *Two

	Type PublisherAssessmentType
}

func CreatePublisherAssessmentAssessment(assessment Assessment) PublisherAssessment {
	typ := PublisherAssessmentTypeAssessment

	return PublisherAssessment{
		Assessment: &assessment,
		Type:       typ,
	}
}

func CreatePublisherAssessmentTwo(two Two) PublisherAssessment {
	typ := PublisherAssessmentTypeTwo

	return PublisherAssessment{
		Two:  &two,
		Type: typ,
	}
}

func (u *PublisherAssessment) UnmarshalJSON(data []byte) error {

	var two Two = Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = PublisherAssessmentTypeTwo
		return nil
	}

	var assessment Assessment = Assessment{}
	if err := utils.UnmarshalJSON(data, &assessment, "", true, true); err == nil {
		u.Assessment = &assessment
		u.Type = PublisherAssessmentTypeAssessment
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PublisherAssessment", string(data))
}

func (u PublisherAssessment) MarshalJSON() ([]byte, error) {
	if u.Assessment != nil {
		return utils.MarshalJSON(u.Assessment, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type PublisherAssessment: all fields are null")
}

type UpgradeFailedReason2 struct {
}

type PublisherUpgradeFailedReasonType string

const (
	PublisherUpgradeFailedReasonTypeUpgradeFailedReason  PublisherUpgradeFailedReasonType = "UpgradeFailedReason"
	PublisherUpgradeFailedReasonTypeUpgradeFailedReason2 PublisherUpgradeFailedReasonType = "upgrade_failed_reason_2"
)

type PublisherUpgradeFailedReason struct {
	UpgradeFailedReason  *UpgradeFailedReason
	UpgradeFailedReason2 *UpgradeFailedReason2

	Type PublisherUpgradeFailedReasonType
}

func CreatePublisherUpgradeFailedReasonUpgradeFailedReason(upgradeFailedReason UpgradeFailedReason) PublisherUpgradeFailedReason {
	typ := PublisherUpgradeFailedReasonTypeUpgradeFailedReason

	return PublisherUpgradeFailedReason{
		UpgradeFailedReason: &upgradeFailedReason,
		Type:                typ,
	}
}

func CreatePublisherUpgradeFailedReasonUpgradeFailedReason2(upgradeFailedReason2 UpgradeFailedReason2) PublisherUpgradeFailedReason {
	typ := PublisherUpgradeFailedReasonTypeUpgradeFailedReason2

	return PublisherUpgradeFailedReason{
		UpgradeFailedReason2: &upgradeFailedReason2,
		Type:                 typ,
	}
}

func (u *PublisherUpgradeFailedReason) UnmarshalJSON(data []byte) error {

	var upgradeFailedReason2 UpgradeFailedReason2 = UpgradeFailedReason2{}
	if err := utils.UnmarshalJSON(data, &upgradeFailedReason2, "", true, true); err == nil {
		u.UpgradeFailedReason2 = &upgradeFailedReason2
		u.Type = PublisherUpgradeFailedReasonTypeUpgradeFailedReason2
		return nil
	}

	var upgradeFailedReason UpgradeFailedReason = UpgradeFailedReason{}
	if err := utils.UnmarshalJSON(data, &upgradeFailedReason, "", true, true); err == nil {
		u.UpgradeFailedReason = &upgradeFailedReason
		u.Type = PublisherUpgradeFailedReasonTypeUpgradeFailedReason
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PublisherUpgradeFailedReason", string(data))
}

func (u PublisherUpgradeFailedReason) MarshalJSON() ([]byte, error) {
	if u.UpgradeFailedReason != nil {
		return utils.MarshalJSON(u.UpgradeFailedReason, "", true)
	}

	if u.UpgradeFailedReason2 != nil {
		return utils.MarshalJSON(u.UpgradeFailedReason2, "", true)
	}

	return nil, errors.New("could not marshal union type PublisherUpgradeFailedReason: all fields are null")
}

type Publisher struct {
	AppsCount                          int64                        `json:"apps_count"`
	Assessment                         PublisherAssessment          `json:"assessment"`
	CommonName                         string                       `json:"common_name"`
	ConnectedApps                      []string                     `json:"connected_apps"`
	Lbrokerconnect                     bool                         `json:"lbrokerconnect"`
	PublisherID                        int64                        `json:"publisher_id"`
	PublisherName                      string                       `json:"publisher_name"`
	PublisherUpgradeProfilesExternalID int64                        `json:"publisher_upgrade_profiles_external_id"`
	Registered                         bool                         `json:"registered"`
	Status                             string                       `json:"status"`
	StitcherID                         int64                        `json:"stitcher_id"`
	Tags                               []any                        `json:"tags"`
	UpgradeFailedReason                PublisherUpgradeFailedReason `json:"upgrade_failed_reason"`
	UpgradeRequest                     bool                         `json:"upgrade_request"`
	UpgradeStatus                      UpgradeStatus                `json:"upgrade_status"`
}

func (o *Publisher) GetAppsCount() int64 {
	if o == nil {
		return 0
	}
	return o.AppsCount
}

func (o *Publisher) GetAssessment() PublisherAssessment {
	if o == nil {
		return PublisherAssessment{}
	}
	return o.Assessment
}

func (o *Publisher) GetCommonName() string {
	if o == nil {
		return ""
	}
	return o.CommonName
}

func (o *Publisher) GetConnectedApps() []string {
	if o == nil {
		return []string{}
	}
	return o.ConnectedApps
}

func (o *Publisher) GetLbrokerconnect() bool {
	if o == nil {
		return false
	}
	return o.Lbrokerconnect
}

func (o *Publisher) GetPublisherID() int64 {
	if o == nil {
		return 0
	}
	return o.PublisherID
}

func (o *Publisher) GetPublisherName() string {
	if o == nil {
		return ""
	}
	return o.PublisherName
}

func (o *Publisher) GetPublisherUpgradeProfilesExternalID() int64 {
	if o == nil {
		return 0
	}
	return o.PublisherUpgradeProfilesExternalID
}

func (o *Publisher) GetRegistered() bool {
	if o == nil {
		return false
	}
	return o.Registered
}

func (o *Publisher) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *Publisher) GetStitcherID() int64 {
	if o == nil {
		return 0
	}
	return o.StitcherID
}

func (o *Publisher) GetTags() []any {
	if o == nil {
		return []any{}
	}
	return o.Tags
}

func (o *Publisher) GetUpgradeFailedReason() PublisherUpgradeFailedReason {
	if o == nil {
		return PublisherUpgradeFailedReason{}
	}
	return o.UpgradeFailedReason
}

func (o *Publisher) GetUpgradeRequest() bool {
	if o == nil {
		return false
	}
	return o.UpgradeRequest
}

func (o *Publisher) GetUpgradeStatus() UpgradeStatus {
	if o == nil {
		return UpgradeStatus{}
	}
	return o.UpgradeStatus
}
