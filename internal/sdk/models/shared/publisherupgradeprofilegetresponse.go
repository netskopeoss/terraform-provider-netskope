// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/netskopeoss/terraform-provider-netskope/internal/sdk/internal/utils"
)

type PublisherUpgradeProfileGetResponseData struct {
	CreatedAt                 *string `json:"created_at,omitempty"`
	DockerTag                 *string `json:"docker_tag,omitempty"`
	Enabled                   *bool   `json:"enabled,omitempty"`
	PublisherUpgradeProfileID *int    `json:"external_id,omitempty"`
	Frequency                 *string `json:"frequency,omitempty"`
	ID                        *int    `json:"id,omitempty"`
	Name                      *string `json:"name,omitempty"`
	NextUpdateTime            *int    `json:"next_update_time,omitempty"`
	NumAssociatedPublisher    *int    `default:"0" json:"num_associated_publisher"`
	ReleaseType               *string `json:"release_type,omitempty"`
	Timezone                  *string `json:"timezone,omitempty"`
	UpdatedAt                 *string `json:"updated_at,omitempty"`
	UpgradingStage            *int    `json:"upgrading_stage,omitempty"`
	WillStart                 *bool   `json:"will_start,omitempty"`
}

func (p PublisherUpgradeProfileGetResponseData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PublisherUpgradeProfileGetResponseData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PublisherUpgradeProfileGetResponseData) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *PublisherUpgradeProfileGetResponseData) GetDockerTag() *string {
	if o == nil {
		return nil
	}
	return o.DockerTag
}

func (o *PublisherUpgradeProfileGetResponseData) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *PublisherUpgradeProfileGetResponseData) GetPublisherUpgradeProfileID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherUpgradeProfileID
}

func (o *PublisherUpgradeProfileGetResponseData) GetFrequency() *string {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *PublisherUpgradeProfileGetResponseData) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PublisherUpgradeProfileGetResponseData) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PublisherUpgradeProfileGetResponseData) GetNextUpdateTime() *int {
	if o == nil {
		return nil
	}
	return o.NextUpdateTime
}

func (o *PublisherUpgradeProfileGetResponseData) GetNumAssociatedPublisher() *int {
	if o == nil {
		return nil
	}
	return o.NumAssociatedPublisher
}

func (o *PublisherUpgradeProfileGetResponseData) GetReleaseType() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseType
}

func (o *PublisherUpgradeProfileGetResponseData) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *PublisherUpgradeProfileGetResponseData) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *PublisherUpgradeProfileGetResponseData) GetUpgradingStage() *int {
	if o == nil {
		return nil
	}
	return o.UpgradingStage
}

func (o *PublisherUpgradeProfileGetResponseData) GetWillStart() *bool {
	if o == nil {
		return nil
	}
	return o.WillStart
}

type PublisherUpgradeProfileGetResponseStatus string

const (
	PublisherUpgradeProfileGetResponseStatusSuccess  PublisherUpgradeProfileGetResponseStatus = "success"
	PublisherUpgradeProfileGetResponseStatusNotFound PublisherUpgradeProfileGetResponseStatus = "not found"
)

func (e PublisherUpgradeProfileGetResponseStatus) ToPointer() *PublisherUpgradeProfileGetResponseStatus {
	return &e
}
func (e *PublisherUpgradeProfileGetResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "not found":
		*e = PublisherUpgradeProfileGetResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublisherUpgradeProfileGetResponseStatus: %v", v)
	}
}

type PublisherUpgradeProfileGetResponse struct {
	Data   *PublisherUpgradeProfileGetResponseData   `json:"data,omitempty"`
	Status *PublisherUpgradeProfileGetResponseStatus `json:"status,omitempty"`
}

func (o *PublisherUpgradeProfileGetResponse) GetData() *PublisherUpgradeProfileGetResponseData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *PublisherUpgradeProfileGetResponse) GetStatus() *PublisherUpgradeProfileGetResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
