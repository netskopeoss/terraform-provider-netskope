// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PublisherResponseCaCertsStatus struct {
	Hashes       []string `json:"hashes,omitempty"`
	LastModified *float64 `json:"last_modified,omitempty"`
}

func (o *PublisherResponseCaCertsStatus) GetHashes() []string {
	if o == nil {
		return nil
	}
	return o.Hashes
}

func (o *PublisherResponseCaCertsStatus) GetLastModified() *float64 {
	if o == nil {
		return nil
	}
	return o.LastModified
}

type PublisherResponseAssessment struct {
	CaCertsStatus *PublisherResponseCaCertsStatus `json:"ca_certs_status,omitempty"`
	EeeSupport    *bool                           `json:"eee_support,omitempty"`
	HddFree       *string                         `json:"hdd_free,omitempty"`
	HddTotal      *string                         `json:"hdd_total,omitempty"`
	IPAddress     *string                         `json:"ip_address,omitempty"`
	Latency       *float64                        `json:"latency,omitempty"`
	Version       *string                         `json:"version,omitempty"`
}

func (o *PublisherResponseAssessment) GetCaCertsStatus() *PublisherResponseCaCertsStatus {
	if o == nil {
		return nil
	}
	return o.CaCertsStatus
}

func (o *PublisherResponseAssessment) GetEeeSupport() *bool {
	if o == nil {
		return nil
	}
	return o.EeeSupport
}

func (o *PublisherResponseAssessment) GetHddFree() *string {
	if o == nil {
		return nil
	}
	return o.HddFree
}

func (o *PublisherResponseAssessment) GetHddTotal() *string {
	if o == nil {
		return nil
	}
	return o.HddTotal
}

func (o *PublisherResponseAssessment) GetIPAddress() *string {
	if o == nil {
		return nil
	}
	return o.IPAddress
}

func (o *PublisherResponseAssessment) GetLatency() *float64 {
	if o == nil {
		return nil
	}
	return o.Latency
}

func (o *PublisherResponseAssessment) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

type PublisherResponsePullNsconfig struct {
	OrgkeyExist *bool `json:"orgkey_exist,omitempty"`
	OrguriExist *bool `json:"orguri_exist,omitempty"`
}

func (o *PublisherResponsePullNsconfig) GetOrgkeyExist() *bool {
	if o == nil {
		return nil
	}
	return o.OrgkeyExist
}

func (o *PublisherResponsePullNsconfig) GetOrguriExist() *bool {
	if o == nil {
		return nil
	}
	return o.OrguriExist
}

type PublisherResponseCapabilities struct {
	Dtls         *bool                          `json:"DTLS,omitempty"`
	Eee          *bool                          `json:"EEE,omitempty"`
	AutoUpgrade  *bool                          `json:"auto_upgrade,omitempty"`
	NwaBa        *bool                          `json:"nwa_ba,omitempty"`
	PullNsconfig *PublisherResponsePullNsconfig `json:"pull_nsconfig,omitempty"`
}

func (o *PublisherResponseCapabilities) GetDtls() *bool {
	if o == nil {
		return nil
	}
	return o.Dtls
}

func (o *PublisherResponseCapabilities) GetEee() *bool {
	if o == nil {
		return nil
	}
	return o.Eee
}

func (o *PublisherResponseCapabilities) GetAutoUpgrade() *bool {
	if o == nil {
		return nil
	}
	return o.AutoUpgrade
}

func (o *PublisherResponseCapabilities) GetNwaBa() *bool {
	if o == nil {
		return nil
	}
	return o.NwaBa
}

func (o *PublisherResponseCapabilities) GetPullNsconfig() *PublisherResponsePullNsconfig {
	if o == nil {
		return nil
	}
	return o.PullNsconfig
}

type PublisherResponseStatus string

const (
	PublisherResponseStatusConnected     PublisherResponseStatus = "connected"
	PublisherResponseStatusNotRegistered PublisherResponseStatus = "not registered"
)

func (e PublisherResponseStatus) ToPointer() *PublisherResponseStatus {
	return &e
}
func (e *PublisherResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "connected":
		fallthrough
	case "not registered":
		*e = PublisherResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublisherResponseStatus: %v", v)
	}
}

type PublisherResponseUpgradeFailedReason struct {
	Detail    *string  `json:"detail,omitempty"`
	ErrorCode *float64 `json:"error_code,omitempty"`
	Timestamp *float64 `json:"timestamp,omitempty"`
	Version   *string  `json:"version,omitempty"`
}

func (o *PublisherResponseUpgradeFailedReason) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

func (o *PublisherResponseUpgradeFailedReason) GetErrorCode() *float64 {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *PublisherResponseUpgradeFailedReason) GetTimestamp() *float64 {
	if o == nil {
		return nil
	}
	return o.Timestamp
}

func (o *PublisherResponseUpgradeFailedReason) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

type PublisherResponseUpgradeStatus struct {
	Upstat *string `json:"upstat,omitempty"`
}

func (o *PublisherResponseUpgradeStatus) GetUpstat() *string {
	if o == nil {
		return nil
	}
	return o.Upstat
}

type PublisherResponseData struct {
	AppsCount                  *int                           `json:"apps_count,omitempty"`
	Assessment                 *PublisherResponseAssessment   `json:"assessment,omitempty"`
	Capabilities               *PublisherResponseCapabilities `json:"capabilities,omitempty"`
	CommonName                 *string                        `json:"common_name,omitempty"`
	ConnectedApps              []string                       `json:"connected_apps,omitempty"`
	PublisherID                *int                           `json:"id,omitempty"`
	Lbrokerconnect             *bool                          `json:"lbrokerconnect,omitempty"`
	PublisherName              *string                        `json:"name,omitempty"`
	PublisherUpgradeProfilesID *int                           `json:"publisher_upgrade_profiles_id,omitempty"`
	Registered                 *bool                          `json:"registered,omitempty"`
	Status                     *PublisherResponseStatus       `json:"status,omitempty"`
	StitcherID                 *int                           `json:"stitcher_id,omitempty"`
	SticherPop                 *string                        `json:"sticher_pop,omitempty"`
	// Not used at this time - please ignore
	//
	Tags                []TagItem                             `json:"tags,omitempty"`
	UpgradeFailedReason *PublisherResponseUpgradeFailedReason `json:"upgrade_failed_reason,omitempty"`
	UpgradeRequest      *bool                                 `json:"upgrade_request,omitempty"`
	UpgradeStatus       *PublisherResponseUpgradeStatus       `json:"upgrade_status,omitempty"`
}

func (o *PublisherResponseData) GetAppsCount() *int {
	if o == nil {
		return nil
	}
	return o.AppsCount
}

func (o *PublisherResponseData) GetAssessment() *PublisherResponseAssessment {
	if o == nil {
		return nil
	}
	return o.Assessment
}

func (o *PublisherResponseData) GetCapabilities() *PublisherResponseCapabilities {
	if o == nil {
		return nil
	}
	return o.Capabilities
}

func (o *PublisherResponseData) GetCommonName() *string {
	if o == nil {
		return nil
	}
	return o.CommonName
}

func (o *PublisherResponseData) GetConnectedApps() []string {
	if o == nil {
		return nil
	}
	return o.ConnectedApps
}

func (o *PublisherResponseData) GetPublisherID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherID
}

func (o *PublisherResponseData) GetLbrokerconnect() *bool {
	if o == nil {
		return nil
	}
	return o.Lbrokerconnect
}

func (o *PublisherResponseData) GetPublisherName() *string {
	if o == nil {
		return nil
	}
	return o.PublisherName
}

func (o *PublisherResponseData) GetPublisherUpgradeProfilesID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherUpgradeProfilesID
}

func (o *PublisherResponseData) GetRegistered() *bool {
	if o == nil {
		return nil
	}
	return o.Registered
}

func (o *PublisherResponseData) GetStatus() *PublisherResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PublisherResponseData) GetStitcherID() *int {
	if o == nil {
		return nil
	}
	return o.StitcherID
}

func (o *PublisherResponseData) GetSticherPop() *string {
	if o == nil {
		return nil
	}
	return o.SticherPop
}

func (o *PublisherResponseData) GetTags() []TagItem {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PublisherResponseData) GetUpgradeFailedReason() *PublisherResponseUpgradeFailedReason {
	if o == nil {
		return nil
	}
	return o.UpgradeFailedReason
}

func (o *PublisherResponseData) GetUpgradeRequest() *bool {
	if o == nil {
		return nil
	}
	return o.UpgradeRequest
}

func (o *PublisherResponseData) GetUpgradeStatus() *PublisherResponseUpgradeStatus {
	if o == nil {
		return nil
	}
	return o.UpgradeStatus
}

type PublisherResponse struct {
	Data *PublisherResponseData `json:"data,omitempty"`
}

func (o *PublisherResponse) GetData() *PublisherResponseData {
	if o == nil {
		return nil
	}
	return o.Data
}
