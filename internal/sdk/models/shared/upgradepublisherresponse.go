// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type UpgradePublisherResponseCaCertsStatus struct {
	Hashes       []string `json:"hashes,omitempty"`
	LastModified *int     `json:"last_modified,omitempty"`
}

func (o *UpgradePublisherResponseCaCertsStatus) GetHashes() []string {
	if o == nil {
		return nil
	}
	return o.Hashes
}

func (o *UpgradePublisherResponseCaCertsStatus) GetLastModified() *int {
	if o == nil {
		return nil
	}
	return o.LastModified
}

type UpgradePublisherResponseAssessment struct {
	CaCertsStatus *UpgradePublisherResponseCaCertsStatus `json:"ca_certs_status,omitempty"`
	EeeSupport    *bool                                  `json:"eee_support,omitempty"`
	HddFree       *string                                `json:"hdd_free,omitempty"`
	HddTotal      *string                                `json:"hdd_total,omitempty"`
	IPAddress     *string                                `json:"ip_address,omitempty"`
	Latency       *int                                   `json:"latency,omitempty"`
	Version       *string                                `json:"version,omitempty"`
}

func (o *UpgradePublisherResponseAssessment) GetCaCertsStatus() *UpgradePublisherResponseCaCertsStatus {
	if o == nil {
		return nil
	}
	return o.CaCertsStatus
}

func (o *UpgradePublisherResponseAssessment) GetEeeSupport() *bool {
	if o == nil {
		return nil
	}
	return o.EeeSupport
}

func (o *UpgradePublisherResponseAssessment) GetHddFree() *string {
	if o == nil {
		return nil
	}
	return o.HddFree
}

func (o *UpgradePublisherResponseAssessment) GetHddTotal() *string {
	if o == nil {
		return nil
	}
	return o.HddTotal
}

func (o *UpgradePublisherResponseAssessment) GetIPAddress() *string {
	if o == nil {
		return nil
	}
	return o.IPAddress
}

func (o *UpgradePublisherResponseAssessment) GetLatency() *int {
	if o == nil {
		return nil
	}
	return o.Latency
}

func (o *UpgradePublisherResponseAssessment) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

type UpgradePublisherResponsePullNsconfig struct {
	OrgkeyExist *bool `json:"orgkey_exist,omitempty"`
	OrguriExist *bool `json:"orguri_exist,omitempty"`
}

func (o *UpgradePublisherResponsePullNsconfig) GetOrgkeyExist() *bool {
	if o == nil {
		return nil
	}
	return o.OrgkeyExist
}

func (o *UpgradePublisherResponsePullNsconfig) GetOrguriExist() *bool {
	if o == nil {
		return nil
	}
	return o.OrguriExist
}

type UpgradePublisherResponseCapabilities struct {
	Dtls         *bool                                 `json:"DTLS,omitempty"`
	Eee          *bool                                 `json:"EEE,omitempty"`
	AutoUpgrade  *bool                                 `json:"auto_upgrade,omitempty"`
	NwaBa        *bool                                 `json:"nwa_ba,omitempty"`
	PullNsconfig *UpgradePublisherResponsePullNsconfig `json:"pull_nsconfig,omitempty"`
}

func (o *UpgradePublisherResponseCapabilities) GetDtls() *bool {
	if o == nil {
		return nil
	}
	return o.Dtls
}

func (o *UpgradePublisherResponseCapabilities) GetEee() *bool {
	if o == nil {
		return nil
	}
	return o.Eee
}

func (o *UpgradePublisherResponseCapabilities) GetAutoUpgrade() *bool {
	if o == nil {
		return nil
	}
	return o.AutoUpgrade
}

func (o *UpgradePublisherResponseCapabilities) GetNwaBa() *bool {
	if o == nil {
		return nil
	}
	return o.NwaBa
}

func (o *UpgradePublisherResponseCapabilities) GetPullNsconfig() *UpgradePublisherResponsePullNsconfig {
	if o == nil {
		return nil
	}
	return o.PullNsconfig
}

type UpgradePublisherResponseUpgradeFailedReason struct {
	Detail    *string `json:"detail,omitempty"`
	ErrorCode *int    `json:"error_code,omitempty"`
	Timestamp *int    `json:"timestamp,omitempty"`
	Version   *string `json:"version,omitempty"`
}

func (o *UpgradePublisherResponseUpgradeFailedReason) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

func (o *UpgradePublisherResponseUpgradeFailedReason) GetErrorCode() *int {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *UpgradePublisherResponseUpgradeFailedReason) GetTimestamp() *int {
	if o == nil {
		return nil
	}
	return o.Timestamp
}

func (o *UpgradePublisherResponseUpgradeFailedReason) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

type UpgradePublisherResponseUpgradeStatus struct {
	Upstat *string `json:"upstat,omitempty"`
}

func (o *UpgradePublisherResponseUpgradeStatus) GetUpstat() *string {
	if o == nil {
		return nil
	}
	return o.Upstat
}

type UpgradePublisherResponse struct {
	AppsCount                  *int                                         `json:"apps_count,omitempty"`
	Assessment                 *UpgradePublisherResponseAssessment          `json:"assessment,omitempty"`
	Capabilities               *UpgradePublisherResponseCapabilities        `json:"capabilities,omitempty"`
	CommonName                 *string                                      `json:"common_name,omitempty"`
	ConnectedApps              []string                                     `json:"connected_apps,omitempty"`
	PublisherID                *int                                         `json:"id,omitempty"`
	Lbrokerconnect             *bool                                        `json:"lbrokerconnect,omitempty"`
	Name                       *string                                      `json:"name,omitempty"`
	PublisherUpgradeProfilesID *int                                         `json:"publisher_upgrade_profiles_id,omitempty"`
	Registered                 *bool                                        `json:"registered,omitempty"`
	Status                     *string                                      `json:"status,omitempty"`
	SticherPop                 *string                                      `json:"sticher_pop,omitempty"`
	StitcherID                 *int                                         `json:"stitcher_id,omitempty"`
	Tags                       []TagItem                                    `json:"tags,omitempty"`
	UpgradeFailedReason        *UpgradePublisherResponseUpgradeFailedReason `json:"upgrade_failed_reason,omitempty"`
	UpgradeRequest             *bool                                        `json:"upgrade_request,omitempty"`
	UpgradeStatus              *UpgradePublisherResponseUpgradeStatus       `json:"upgrade_status,omitempty"`
}

func (o *UpgradePublisherResponse) GetAppsCount() *int {
	if o == nil {
		return nil
	}
	return o.AppsCount
}

func (o *UpgradePublisherResponse) GetAssessment() *UpgradePublisherResponseAssessment {
	if o == nil {
		return nil
	}
	return o.Assessment
}

func (o *UpgradePublisherResponse) GetCapabilities() *UpgradePublisherResponseCapabilities {
	if o == nil {
		return nil
	}
	return o.Capabilities
}

func (o *UpgradePublisherResponse) GetCommonName() *string {
	if o == nil {
		return nil
	}
	return o.CommonName
}

func (o *UpgradePublisherResponse) GetConnectedApps() []string {
	if o == nil {
		return nil
	}
	return o.ConnectedApps
}

func (o *UpgradePublisherResponse) GetPublisherID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherID
}

func (o *UpgradePublisherResponse) GetLbrokerconnect() *bool {
	if o == nil {
		return nil
	}
	return o.Lbrokerconnect
}

func (o *UpgradePublisherResponse) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpgradePublisherResponse) GetPublisherUpgradeProfilesID() *int {
	if o == nil {
		return nil
	}
	return o.PublisherUpgradeProfilesID
}

func (o *UpgradePublisherResponse) GetRegistered() *bool {
	if o == nil {
		return nil
	}
	return o.Registered
}

func (o *UpgradePublisherResponse) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpgradePublisherResponse) GetSticherPop() *string {
	if o == nil {
		return nil
	}
	return o.SticherPop
}

func (o *UpgradePublisherResponse) GetStitcherID() *int {
	if o == nil {
		return nil
	}
	return o.StitcherID
}

func (o *UpgradePublisherResponse) GetTags() []TagItem {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *UpgradePublisherResponse) GetUpgradeFailedReason() *UpgradePublisherResponseUpgradeFailedReason {
	if o == nil {
		return nil
	}
	return o.UpgradeFailedReason
}

func (o *UpgradePublisherResponse) GetUpgradeRequest() *bool {
	if o == nil {
		return nil
	}
	return o.UpgradeRequest
}

func (o *UpgradePublisherResponse) GetUpgradeStatus() *UpgradePublisherResponseUpgradeStatus {
	if o == nil {
		return nil
	}
	return o.UpgradeStatus
}
